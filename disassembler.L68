00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 6/1/2017 7:36:55 PM

00000000                             1  *    -----------------------------------------------------------
00000000                             2  
00000000                             3  *    Title      : CS422 Spring Disassembler
00000000                             4  
00000000                             5  *    Written by : Danny Ly & Edward Chang
00000000                             6  
00000000                             7  *    Date       : 4/27/2017
00000000                             8  
00000000                             9  *    Description: Our dissasembler for 68KKrew
00000000                            10  
00000000                            11  *    -----------------------------------------------------------
00000000                            12  
00000000                            13  
00000000                            14  
00001000                            15      ORG    $1000    program starting address
00001000                            16      
00001000  =0000000D                 17  CR          EQU $0D
00001000  =0000000A                 18  LF          EQU $0A
00001000  =00007000                 19  startLoc    EQU $7000
00001000                            20  
00001000                            21  
00001000                            22  *    --- Notes
00001000                            23  
00001000                            24  *    We'll keep A2 as our pointer to writing to the different buffers
00001000                            25  
00001000                            26  *    A4 will be our main pointer to current memory address and current data
00001000                            27  
00001000                            28  *    D3 will be dedicated register to manipulate our data in
00001000                            29  
00001000                            30  *    
00001000                            31  
00001000                            32  *    
00001000                            33  
00001000                            34  *    ---------
00001000                            35  
00001000                            36  START:                  
00001000                            37      ; first instruction of program
00001000                            38      ;LEA     stack,SP
00001000                            39      *-present the hello message
00001000  43F9 00003BF2             40      LEA     welcome_message,A1  PRESENT THE WELCOME MESSAGE
00001006  103C 000E                 41      MOVE.B  #14,D0
0000100A  4E4F                      42      TRAP    #15
0000100C                            43      
0000100C                            44  *    
0000100C                            45  
0000100C                            46  *    - FOR TEST RANGE FROM 996 - 9CF PUT CODES OR NOP ANYWHERE BETWEEN
0000100C                            47  
0000100C                            48  *    
0000100C                            49  
0000100C                            50  *    Put program code here
0000100C                            51  
0000100C                            52  *    -----
0000100C                            53  
0000100C                            54  *    This program starts by given a starting address and an ending address disassemble
0000100C                            55  
0000100C                            56  *    the binary code that is at that location.
0000100C                            57  
0000100C                            58  *    
0000100C                            59  
0000100C                            60  *    
0000100C                            61  
0000100C                            62  *    ----
0000100C                            63  
0000100C                            64  *    
0000100C                            65  
0000100C                            66  *    -------
0000100C                            67  
0000100C                            68  *    Needs to check for odd addressing**
0000100C                            69  
0000100C                            70  *    
0000100C                            71  
0000100C                            72  *    
0000100C                            73  
0000100C                            74  *    -----
0000100C                            75  
0000100C                            76  *    ---------------------I/O SECTION
0000100C                            77  
0000100C                            78  *    Grabs ascii from user and converts to hex stored into memory
0000100C                            79  
0000100C                            80  *    A4 is used as our pointer for the program, ending addresses can be stored
0000100C                            81  
0000100C                            82  *    statically in memory and retrieved when needed to compare
0000100C                            83  
0000100C                            84  *    this free's up a adress/data register to use
0000100C                            85  
0000100C                            86  *    -----------------------
0000100C                            87  
0000100C                            88  *    
0000100C                            89  
0000100C                            90  *    
0000100C                            91  
0000100C                            92  *    get_input_start_addr 
0000100C                            93  
0000100C                            94  *    MOVE.L  #0,A3
0000100C                            95  
0000100C                            96  *    CLR     D1
0000100C                            97  
0000100C                            98  *    LEA     enter_start_AD,A1
0000100C                            99  
0000100C                           100  *    MOVE.L  #14,D0
0000100C                           101  
0000100C                           102  *    TRAP    #15
0000100C                           103  
0000100C                           104  *    
0000100C                           105  
0000100C                           106  *    
0000100C                           107  
0000100C                           108  *    
0000100C                           109  
0000100C                           110  *    
0000100C                           111  
0000100C                           112  *    LEA     userStartAddrInput,A1   load address to store the input from user
0000100C                           113  
0000100C                           114  *    MOVE.L  #2,D0
0000100C                           115  
0000100C                           116  *    TRAP    #15
0000100C                           117  
0000100C                           118  *    JSR     parse_input             parse the starting address
0000100C                           119  
0000100C                           120  *    
0000100C                           121  
0000100C                           122  *    
0000100C                           123  
0000100C                           124  *    MOVE.L  D6,A5                   MOVE OUR STARTING ADDRESS TO A6
0000100C                           125  
0000100C                           126  *    
0000100C                           127  
0000100C                           128  *    ----MIGHT NEED TO CHECK FOR ODD ADDRESSING ?
0000100C                           129  
0000100C                           130  *    ----CHECK FOR ADDRESS OUT OF BOUNDS DOMAIN?
0000100C                           131  
0000100C                           132  *    
0000100C                           133  
0000100C                           134  *    
0000100C                           135  
0000100C                           136  *    get_input_end_addr
0000100C                           137  
0000100C                           138  *    MOVE.L  #0,A3
0000100C                           139  
0000100C                           140  *    CLR     D1
0000100C                           141  
0000100C                           142  *    LEA     userEnd,A1
0000100C                           143  
0000100C                           144  *    MOVE.L  #14,D0
0000100C                           145  
0000100C                           146  *    TRAP    #15
0000100C                           147  
0000100C                           148  *    
0000100C                           149  
0000100C                           150  *    
0000100C                           151  
0000100C                           152  *    
0000100C                           153  
0000100C                           154  *    LEA     userEndAddrInput,A1
0000100C                           155  
0000100C                           156  *    MOVE.B  userEnd,D1
0000100C                           157  
0000100C                           158  *    MOVE.L  #2,D0
0000100C                           159  
0000100C                           160  *    TRAP    #15
0000100C                           161  
0000100C                           162  *    JSR     parse_end
0000100C                           163  
0000100C                           164  *    
0000100C                           165  
0000100C                           166  *    
0000100C                           167  
0000100C                           168  *    MOVE.L  D6,A6           MOVE OUT ENDING ADDRESS TO 
0000100C                           169  
0000100C                           170  
0000100C                           171  *    
0000100C                           172  
0000100C                           173  *    
0000100C                           174  
0000100C                           175  *    STORE_SRT_END:
0000100C                           176  
0000100C                           177  *    
0000100C                           178  
0000100C                           179  *    ;store the starting and ending address into memory out of range
0000100C                           180  
0000100C                           181  *    SUB.W   A5,D6           SUBTRACT THE STARTING ADDRESS FROM THE ENDING ADDRESS TO GET THE SIZE OF INSTRUCTIONS
0000100C                           182  
0000100C                           183  *    MOVE.L  A5,$00FFFF00    STORE USER START ADDRESS SO WE CAN FREE UP REG
0000100C                           184  
0000100C                           185  *    MOVE.L  A6,$00FFFF10    STORE USER END ADDRESS SO WE CAN FREE UP REG
0000100C                           186  
0000100C                           187  *    MOVE.L  D6,$00FFFF20    STORE SIZE OF INSTRCTIONS
0000100C                           188  
0000100C                           189  *    MOVE.L  A5,A4
0000100C                           190  
0000100C                           191      
0000100C                           192      *----------FOR TESTING PURPOSES FOR RELEASE UNCOMMENT THE ABOVE----------------
0000100C                           193      *       Testing Code Starts the address at 996 to 9CF about 30 entries
0000100C                           194      *
0000100C  2C3C 00009000            195      MOVE.L  #$9000,D6    Starting address loads into D6
00001012  2A46                     196      MOVE.L  D6,A5       Move D6 into a5
00001014                           197      
00001014  2C3C 000FFFFF            198      MOVE.L  #$FFFFF,D6
0000101A  2C46                     199      MOVE.L  D6,A6
0000101C                           200      
0000101C                           201      
0000101C  23CD 00FFFF00            202      MOVE.L  A5,$00FFFF00    STORE USER START ADDRESS SO WE CAN FREE UP REG
00001022  23CE 00FFFF10            203      MOVE.L  A6,$00FFFF10    STORE USER END ADDRESS SO WE CAN FREE UP REG
00001028  284D                     204      MOVE.L  A5,A4           A4 is our starting.current pointer
0000102A                           205      *
0000102A                           206      *
0000102A                           207      *-------------END OF TESING CODE-----------
0000102A                           208      
0000102A  6000 00BE                209      BRA get_next_instruction
0000102E                           210      
0000102E                           211      
0000102E                           212      
0000102E                           213  *    ---move_addresses:
0000102E                           214  
0000102E                           215      
0000102E                           216      *-MOVE 2 INTO DATA REG
0000102E                           217      
0000102E                           218      ;JSR     LOOP
0000102E                           219      *----LEA     good_code_buffer,a2 ;load the code buffer
0000102E                           220      *-STORE THE OLD ADDRESS/STARTING/CURRENT INTO
0000102E                           221      
0000102E                           222      *----MOVE.W  A4,A0
0000102E                           223      
0000102E                           224      *-STORE 2 AT DATA REG MAYBE FOR INCREMNTEATION
0000102E                           225      *----MOVE.B  #2,D4
0000102E                           226      
0000102E                           227      *-MOVE OLD ADDRESS TO DATA REGISTER
0000102E                           228      *-----MOVE.L  A0,D3   ;D3 IS USED TO PRINT OUT THE ADDRESS LINE, OR ANYTHING IN D3
0000102E                           229      *------MOVE.L  D3,D7
0000102E                           230      
0000102E                           231  
0000102E                           232  
0000102E                           233  
0000102E                           234      *------LEA     good_code_buffer,A2 load again
0000102E                           235      *------JSR     print_d3
0000102E                           236      
0000102E                           237      
0000102E                           238      ;JSR     get_opcode
0000102E                           239  
0000102E                           240      *----MIGHT NEED TO CHECK FOR ODD ADDRESSING ?
0000102E                           241      *----CHECK FOR ADDRESS OUT OF BOUNDS DOMAIN?
0000102E                           242      ;SIMHALT
0000102E                           243  
0000102E                           244  
0000102E                           245  *    ---------------------------------------------------------- 
0000102E                           246  
0000102E                           247  *    Decode ---------------------------------------------------
0000102E                           248  
0000102E  49F8 7000                249      LEA     startLoc,A4 ;loads statLoc's EA into A4
00001032  6000 00B6                250      BRA     get_next_instruction    ;put data in D3, incre. A4
00001036                           251      
00001036                           252  mainLoop          
00001036                           253      *-----
00001036                           254      *-This is the various OP Codes to decode, and branch off too, we need to decode these ones
00001036                           255      *- listing of finished and un finished work
00001036                           256      *-          ***Machine Code saved in D6*****
00001036                           257      *-----
00001036                           258  
00001036  E84B                     259      LSR     #4,D3       SHIFT 4 BITS TO GET THE MSB OF THE WORD
00001038                           260      
00001038                           261      ;compare bits to instructions
00001038                           262      *- Machine code saved in D6
00001038                           263  *    -----------------------------------------------------------------------
00001038                           264  
00001038                           265  *    op0000 : ADDI, SUBI
00001038                           266  
00001038                           267  *    -----------------------------------------------------------------------
00001038                           268  
00001038  B63C 0000                269      CMP.B   #bin0000,D3 ;ADDI, SUBI
0000103C  6700 1420                270      BEQ     op0000      ;branch to op0000
00001040                           271  *    -----------------------------------------------------------------------
00001040                           272  
00001040                           273  *    op0001 : MOVE.B
00001040                           274  
00001040                           275  *    -----------------------------------------------------------------------
00001040                           276  
00001040  B63C 0001                277      CMP.B   #bin0001,D3 ;MOVE.B
00001044  6700 0B10                278      BEQ     op0001      ;branch to op0001
00001048                           279  *    -----------------------------------------------------------------------
00001048                           280  
00001048                           281  *    op0010 : MOVE.L, MOVEA.L
00001048                           282  
00001048                           283  *    -----------------------------------------------------------------------
00001048                           284  
00001048  B63C 0002                285      CMP.B   #bin0010,D3 ;MOVE.L, MOVEA.L
0000104C  6700 0C14                286      BEQ     op0010      ;branch to op0010
00001050                           287  *    -----------------------------------------------------------------------
00001050                           288  
00001050                           289  *    op0011 : MOVE.W, MOVEA.W
00001050                           290  
00001050                           291  *    -----------------------------------------------------------------------
00001050                           292  
00001050  B63C 0003                293      CMP.B   #bin0011,D3 ;MOVE.W, MOVEA.W
00001054  6700 0B5E                294      BEQ     op0011      ;branch to op0011
00001058                           295  *    -----------------------------------------------------------------------
00001058                           296  
00001058                           297  *    op0100 : MOVEM.L, MOVEM.W(NEEDED), 
00001058                           298  
00001058                           299  *    MULS.L, DIVU.L(NEEDED),
00001058                           300  
00001058                           301  *    LEA, CLR, JSR, NOP, RTS
00001058                           302  
00001058                           303  *    -----------------------------------------------------------------------
00001058                           304  
00001058  B63C 0004                305      CMP.B   #bin0100,D3     MOVEM.L, MOVEM.W, LEA, CLR, JSR,NOP, RTS
0000105C  6700 062C                306      BEQ     op0100          branch to op0100
00001060                           307  *    -----------------------------------------------------------------------
00001060                           308  
00001060                           309  *    op0101 : SUBQ ADDQ
00001060                           310  
00001060                           311  *    -----------------------------------------------------------------------
00001060                           312  
00001060  B63C 0005                313      CMP.B   #bin0101,D3 ;SUBQ ADDQ
00001064  6700 15E2                314      BEQ     op0101      ;branch to op0101
00001068                           315  *    -----------------------------------------------------------------------
00001068                           316  
00001068                           317  *    op0110 : BRA, Bcc
00001068                           318  
00001068                           319  *    -----------------------------------------------------------------------
00001068                           320  
00001068  B63C 0006                321      CMP.B   #bin0110,D3 ;BRA, Bcc
0000106C  6700 09B2                322      BEQ     op0110      ;branch to op0110
00001070                           323  *    -----------------------------------------------------------------------
00001070                           324  
00001070                           325  *    op0111 : MOVEQ
00001070                           326  
00001070                           327  *    -----------------------------------------------------------------------      
00001070                           328  
00001070  B63C 0007                329      CMP.B   #bin0111,D3 ;MOVEQ
00001074  6700 1370                330      BEQ     op0111      ;branch to op0111
00001078                           331  *    -----------------------------------------------------------------------
00001078                           332  
00001078                           333  *    op1000 : DIVU.W, OR
00001078                           334  
00001078                           335  *    ----------------------------------------------------------------------- 
00001078                           336  
00001078  B63C 0008                337      CMP.B   #bin1000,D3 ;DIVU.W
0000107C  6700 1166                338      BEQ     op1000      ;branch to op1000
00001080                           339  *    -----------------------------------------------------------------------
00001080                           340  
00001080                           341  *    op1001 : SUB, SUBA
00001080                           342  
00001080                           343  *    -----------------------------------------------------------------------
00001080                           344  
00001080  B63C 0009                345      CMP.B   #bin1001,D3 ;SUB, SUBA
00001084  6700 0EC4                346      BEQ     op1001      ;branch to op1001
00001088                           347  *    -----------------------------------------------------------------------
00001088                           348  
00001088                           349  *    op1100 : AND, MULS.W
00001088                           350  
00001088                           351  *    -----------------------------------------------------------------------
00001088                           352  
00001088  B63C 000C                353      CMP.B   #bin1100,D3 ;AND, MULS.W
0000108C  6700 27E0                354      BEQ     op1100      ;branch to op1100
00001090                           355  *    -----------------------------------------------------------------------
00001090                           356  
00001090                           357  *    op1101 : ADD, ADDA
00001090                           358  
00001090                           359  *    -----------------------------------------------------------------------
00001090                           360  
00001090  B63C 000D                361      CMP.B   #bin1101,D3 ;ADD, ADDA
00001094  6700 0C7A                362      BEQ     op1101      ;branch to op1101
00001098                           363  *    -----------------------------------------------------------------------
00001098                           364  
00001098                           365  *    op1110 : ASR, LSL, ROL, ROR
00001098                           366  
00001098                           367  *    ----------------------------------------------------------------------- 
00001098                           368  
00001098  B63C 000E                369      CMP.B   #bin1110,D3 ;ASR, LSL, ROL, ROR
0000109C  6700 1840                370      BEQ     op1110      ;branch to op1110
000010A0                           371  *    -----------------------------------------------------------------------
000010A0                           372  
000010A0                           373  *    opERROR : DATA 
000010A0                           374  
000010A0                           375  *    -----------------------------------------------------------------------           
000010A0                           376  
000010A0  6000 29D2                377      BRA     opERROR     ;invalid opcode display we havent implemented this code yet
000010A4                           378      
000010A4                           379      ;branch to display opError display
000010A4                           380      
000010A4                           381      ;print all the things...
000010A4                           382   *******************************************************************************
000010A4                           383  *    
000010A4                           384  
000010A4                           385  
000010A4                           386  *    
000010A4                           387  
000010A4                           388  *    
000010A4                           389  
000010A4                           390  *    
000010A4                           391  
000010A4                           392  lineCount
000010A4  45F9 00003C53            393      LEA     line_counter,A2    * Set up A2 ptr as linecount
000010AA  5212                     394      ADDI.B  #$1,(A2)    * Increment the number of lines by one
000010AC  0C12 001E                395      CMP.B   #30,(A2)    * Now check if the lines hit 30
000010B0  6700 0004                396      BEQ     halt        * Pause the page if it is full
000010B4  4E75                     397      RTS                 * If counter isnt at 31 then go back to
000010B6                           398      
000010B6                           399      
000010B6                           400  *    this will halt the program and ask user to continue
000010B6                           401  
000010B6                           402  halt
000010B6  4241                     403      CLR     D1
000010B8  14BC 0000                404      MOVE.B  #00,(A2)     * Reset the counter then display message
000010BC  43F9 00003C2E            405      LEA     hitEnter,A1  * Load lower address prompt
000010C2  1239 00003C51            406      MOVE.B  enterBuf,D1  * Load lower prompt length
000010C8  7001                     407      MOVE.L  #1,D0        * Load task code for prompt
000010CA  4E4F                     408      TRAP    #15          * Display user prompt
000010CC  43F9 00003C52            409      LEA     haltEntry,A1    * Load address to store user input
000010D2  7002                     410      MOVE.L  #2,D0       * Load task code for user input
000010D4  4E4F                     411      TRAP    #15         * Retrieve input
000010D6  4E75                     412      RTS                 * Return to the main program loop
000010D8                           413      
000010D8                           414  *    
000010D8                           415  
000010D8                           416  *    
000010D8                           417  
000010D8                           418  *    
000010D8                           419  
000010D8                           420  *    
000010D8                           421  
000010D8                           422  addressCount 
000010D8                           423      *-THIS LOCATION IS WHERE WE WILL PERIODICALLY CHECK THE RUNNING A4 REGISTERY WITH OUR STORED
000010D8                           424      *-ENDING ADDRESS VALUE TO SEE IF WE HAVE REACHED THE END OF OUR ADDRESS RANGE
000010D8                           425      *-A4 IS ALSO ACTS AS OUR 'I' VALUE OR OUR VALUE THAT KEEPS POINTING TO MEMORY LOCATIONS
000010D8                           426      *-wE CAN USE THIS POINTER TO ACCESS DATA FURTHURE DOWN, THE END ADDRESS WE DO NOT NEED TO KEEP
000010D8                           427      *-TRACK OF CONSTANTLY SO WE CAN STORE INTO MEMORY AND RETRIEVE FROM MEMORY WHEN WE NEED IT
000010D8                           428      
000010D8  4BF9 00FFFF10            429      LEA   $00FFFF10,A5  * RETRIEVE ENDING ADDRESS(THE LESASH /POINTER TO ENGIND ADDRESS
000010DE  2215                     430      MOVE.L  (A5),D1     * MOVE THE DATA STORED AT THE POINTER TO DATA REGISTER
000010E0  2A0C                     431      MOVE.L  A4,D5       * MOVE OPUR CURRENT POINTER 'I' FROM ADDRESS REGISTER TO DATA REGISTER
000010E2  B285                     432      CMP.L   D5,D1       * COMPARE THE ADDRESSES
000010E4  6F00 2A08                433      BLE     FINISH      * branch to end if ending address reached
000010E8  4E75                     434      RTS                 * return IF WE HAVE NOT FINISHED
000010EA                           435      
000010EA                           436  get_next_instruction:
000010EA  4EB8 10D8                437      JSR addressCount    *-CHECKS IF WE REACHED OUT ENDING ADDRESS YET
000010EE                           438      *-line count
000010EE  4EB8 10A4                439      JSR lineCount
000010F2  4245                     440      CLR D5             *-CLEAR THIS REGISTER/
000010F4                           441      
000010F4  45F9 00003C54            442      Lea good_code_buffer,A2 ;reset A2, LOADS THE BUFFER TO GET READY TO PRINT TO IT/WRITE TO IT
000010FA  304C                     443      MOVE.W  A4,A0   UPDATE OUR OLD ADDRESS STORED AT 10 WITH THE MOST CURRENT POINTER ADDRESS *INCRMENTED BY A WORD
000010FC  7E02                     444      MOVE.L  #2,D7   *-CHECKER FOR ERROR
000010FE  2608                     445      MOVE.L  A0,D3   *-MOVE AROUND TEH DATA STORED AT CURRENT POINTER TO D3 REGISTER TO WORK WITH IT
00001100  2C03                     446      MOVE.L  D3,D6
00001102  45F9 00003C54            447      LEA     good_code_buffer,A2
00001108                           448      *-write the current data moved to data register d3
00001108  4EB9 00001130            449      JSR     write_data_in_D3_to_buffer
0000110E                           450      
0000110E  14BC 0020                451      MOVE.B  #' ',(A2)
00001112  14BC 0020                452      MOVE.B  #' ',(A2)
00001116  14BC 0020                453      MOVE.B  #' ',(A2)
0000111A  14BC 0020                454      MOVE.B  #' ',(A2)
0000111E                           455      
0000111E  4286                     456      CLR.L   D6
00001120  4283                     457      CLR.L   D3
00001122                           458      
00001122  3A4C                     459      MOVE.W  A4,A5    Load the instruction address into the designated address resgister A5 to decode operand if needed
00001124                           460      
00001124  3C1C                     461      MOVE.W  (A4)+,D6 INCREMENT OUT STARTING/CURRENT POINTER BY A WORD, STORE THE CONTENTS OF WHAT ITS CURRENTLY POINTING AT
00001126                           462      *-WHICH WOULD BE THE OPCODE DATA, INTO D6
00001126                           463  
00001126  2814                     464      MOVE.L  (A4),D4  If absolute addressing => this will be operand
00001128  3606                     465      MOVE.W  D6,D3
0000112A  E04B                     466      LSR.W   #8,D3
0000112C                           467      
0000112C  6000 FF08                468      BRA     mainLoop
00001130                           469      
00001130                           470  write_data_in_D3_to_buffer:
00001130                           471      *------
00001130                           472      *   This is where we write to whatever is in data registrer D3 our dedicated D3 writer buffer writer
00001130                           473      *
00001130                           474      *
00001130                           475      *---------
00001130  BE7C 0002                476      CMP.W   #2,D7 ERROR checking
00001134  6600 0010                477      BNE     print_word branch off to write the first word of the line
00001138  4843                     478      SWAP    D3
0000113A  4846                     479      SWAP    D6
0000113C  4EB9 00001146            480      JSR     print_word
00001142  4846                     481      SWAP    D6
00001144  2606                     482      MOVE.L  D6,D3
00001146                           483      
00001146                           484   print_word:
00001146                           485      *-****
00001146                           486      * called 4 times to decode from hex to ascii the first word
00001146                           487      *   using the below jump table
00001146                           488      *
00001146                           489      *-------
00001146  3606                     490      MOVE.W  D6,D3
00001148  E04B                     491      LSR.W   #8,D3
0000114A  E84B                     492      LSR.W   #4,D3
0000114C  C6FC 0008                493      MULU.W  #8,D3
00001150  4DF9 00001472            494      LEA     numTable,A6
00001156  4EB6 3000                495      JSR     (A6,D3)
0000115A                           496      
0000115A  3606                     497      MOVE.W  D6,D3   COPY DATA
0000115C  E94B                     498      LSL.W   #4,D3
0000115E  E04B                     499      LSR.W   #8,D3
00001160  E84B                     500      LSR.W   #4,D3
00001162  C6FC 0008                501      MULU.W  #8,D3
00001166  4DF9 00001472            502      LEA     numTable,A6
0000116C  4EB6 3000                503      JSR     (A6,D3)
00001170                           504      
00001170  3606                     505      MOVE.W  D6,D3
00001172                           506      
00001172  E14B                     507      LSL.W   #8,D3
00001174  E04B                     508      LSR.W   #8,D3
00001176  E84B                     509      LSR.W   #4,D3
00001178  C6FC 0008                510      MULU.W  #8,D3
0000117C  4DF9 00001472            511      LEA numTable,A6
00001182  4EB6 3000                512      JSR     (A6,D3)
00001186                           513      
00001186                           514      
00001186  3606                     515      MOVE.W  D6,D3
00001188  E94B                     516      LSL.W   #4,D3
0000118A  E14B                     517      LSL.W   #8,D3
0000118C  E04B                     518      LSR.W   #8,D3
0000118E  E84B                     519      LSR.W   #4,D3
00001190  C6FC 0008                520      MULU.W  #8,D3
00001194  4DF9 00001472            521      LEA     numTable,A6
0000119A  4EB6 3000                522      JSR     (A6,D3)
0000119E  5805                     523      ADDI.B  #4,D5
000011A0  4E75                     524      RTS
000011A2                           525  *    -----------------------------------------------------------            
000011A2                           526  
000011A2                           527  *    Jump Table immAbTable *************************************
000011A2                           528  
000011A2                           529  *    matches the associated Addressing mode     
000011A2                           530  
000011A2                           531  *    
000011A2                           532  
000011A2  4EB9 000011EA            533  immAbTable  JSR     IA000   ;Absoulute Word
000011A8  4E75                     534      RTS             ;return, done printing
000011AA  4EB9 00001252            535      JSR     IA001   ;Aboulute Long
000011B0  4E75                     536      RTS             ;return, done printing
000011B2  4EB9 000011CA            537      JSR     IA010   ;immediate Data Long
000011B8  4E75                     538      RTS             ;return, done printing
000011BA  4EB9 000011D6            539      JSR     IA011   ;immediate Data Word
000011C0  4E75                     540      RTS             ;return, done printing
000011C2  4EB9 00001316            541      JSR     IA100   ;immediate Data Byte
000011C8  4E75                     542      RTS             ;return, done printing
000011CA                           543  *    -----------------------------------------------------------            
000011CA                           544  
000011CA                           545  IA010       ;immediate Data Long
000011CA  14FC 0023                546      MOVE.B  #'#',(A2)+
000011CE  4EB9 00001252            547      JSR     IA001
000011D4  4E75                     548      RTS
000011D6                           549  IA011       ;immediate Data Word
000011D6  14FC 0023                550      MOVE.B  #'#',(A2)+
000011DA  4EB9 000011EA            551      JSR     IA000
000011E0  4E75                     552      RTS
000011E2                           553  *    ----------------------------------------------------------- 
000011E2                           554  
000011E2                           555  moveIntPointerWord
000011E2  381C                     556      MOVE.W  (A4)+,D4     MOVE insturction pointer by WORD to get next
000011E4  4E75                     557      RTS
000011E6                           558  moveIntPointerLong
000011E6  281C                     559      MOVE.L  (A4)+,D4     MOVE insturction pointer by LONG to get next
000011E8  4E75                     560      RTS
000011EA                           561  *    -----------------------------------------------------------            
000011EA                           562  
000011EA                           563  *    Subroutine IA000   ------------------------------------------
000011EA                           564  
000011EA                           565  IA000                               ;absoulteWord      
000011EA  14FC 0024                566      MOVE.B  #'$',(A2)+
000011EE  2A04                     567      MOVE.L  D4,D5
000011F0  E08D                     568      LSR.L   #8,D5       XXXX **** => 00XX XX**
000011F2  E08D                     569      LSR.L   #8,D5       00XX XX** => 0000 XXXX
000011F4                           570      *4MSB   X***
000011F4  4241                     571      CLR     D1
000011F6  3205                     572      MOVE.W  D5,D1       X***
000011F8  E049                     573      LSR.W   #8,D1       00X*
000011FA  E849                     574      LSR.W   #4,D1       000X
000011FC  4DF9 00001472            575      LEA     numTable ,A6 Load the table into A6
00001202  C2FC 0008                576      MULU    #8,D1
00001206  4EB6 1000                577      JSR     (A6,D1)     Jump to subroutine of value at D1
0000120A                           578      *next 4MSB  *X**
0000120A  4241                     579      CLR     D1
0000120C  3205                     580      MOVE.W  D5,D1       *X**
0000120E  E949                     581      LSL.W   #4,D1       X**0
00001210  E049                     582      LSR.W   #8,D1       00X*
00001212  E849                     583      LSR.W   #4,D1       000X
00001214  4DF9 00001472            584      LEA     numTable ,A6 Load the table into A6
0000121A  C2FC 0008                585      MULU    #8,D1
0000121E  4EB6 1000                586      JSR     (A6,D1)     Jump to subroutine of value at D1
00001222                           587      *next 4MSB  **X*
00001222  4241                     588      CLR     D1
00001224  1205                     589      MOVE.B  D5,D1       00X*
00001226  E809                     590      LSR.B   #4,D1       000X
00001228  4DF9 00001472            591      LEA     numTable ,A6 Load the table into A6
0000122E  C2FC 0008                592      MULU    #8,D1
00001232  4EB6 1000                593      JSR     (A6,D1)     Jump to subroutine of value at D1
00001236                           594      *last 4  bits   ***X
00001236  4241                     595      CLR     D1
00001238  1205                     596      MOVE.B  D5,D1       00*X
0000123A  E909                     597      LSL.B   #4,D1       00X0
0000123C  E809                     598      LSR.B   #4,D1       000X
0000123E  4DF9 00001472            599      LEA     numTable ,A6 Load the table into A6
00001244  C2FC 0008                600      MULU    #8,D1
00001248  4EB6 1000                601      JSR     (A6,D1)     Jump to subroutine of value at D1
0000124C  4EB8 11E2                602      JSR     moveIntPointerWord
00001250  4E75                     603      RTS
00001252                           604  *    -----------------------------------------------------------            
00001252                           605  
00001252                           606  *    Subroutine IA001   ------------------------------------------
00001252                           607  
00001252                           608  IA001                               ;absoulteLong
00001252  4241                     609      CLR     D1
00001254  4242                     610      CLR     D2
00001256  14FC 0024                611      MOVE.B  #'$',(A2)+
0000125A  2404                     612      MOVE.L  D4,D2       D2 will be used for later
0000125C                           613  *    ----------- first Word Value D4
0000125C                           614  
0000125C  E08C                     615      LSR.L   #8,D4       XXXX **** => 00XX XX**
0000125E  E08C                     616      LSR.L   #8,D4       00XX XX** => 0000 XXXX
00001260                           617      *4MSB   X***
00001260  4241                     618      CLR     D1
00001262  3204                     619      MOVE.W  D4,D1       X***
00001264  E049                     620      LSR.W   #8,D1       00X*
00001266  E849                     621      LSR.W   #4,D1       000X
00001268  4DF9 00001472            622      LEA     numTable ,A6 Load the table into A6
0000126E  C2FC 0008                623      MULU    #8,D1
00001272  4EB6 1000                624      JSR     (A6,D1)     Jump to subroutine of value at D1
00001276                           625      *next 4MSB  *X**
00001276  4241                     626      CLR     D1
00001278  3204                     627      MOVE.W  D4,D1       *X**
0000127A  E949                     628      LSL.W   #4,D1       X**0
0000127C  E049                     629      LSR.W   #8,D1       00X*
0000127E  E849                     630      LSR.W   #4,D1       000X
00001280  4DF9 00001472            631      LEA     numTable ,A6 Load the table into A6
00001286  C2FC 0008                632      MULU    #8,D1
0000128A  4EB6 1000                633      JSR     (A6,D1)     Jump to subroutine of value at D1
0000128E                           634      *next 4MSB  **X*
0000128E  4241                     635      CLR     D1
00001290  1204                     636      MOVE.B  D4,D1       00X*
00001292  E809                     637      LSR.B   #4,D1       000X
00001294  4DF9 00001472            638      LEA     numTable ,A6 Load the table into A6
0000129A  C2FC 0008                639      MULU    #8,D1
0000129E  4EB6 1000                640      JSR     (A6,D1)     Jump to subroutine of value at D1
000012A2                           641      *last 4  bits   ***X
000012A2  4241                     642      CLR     D1
000012A4  1204                     643      MOVE.B  D4,D1       00*X
000012A6  E909                     644      LSL.B   #4,D1       00X0
000012A8  E809                     645      LSR.B   #4,D1       000X
000012AA  4DF9 00001472            646      LEA     numTable ,A6 Load the table into A6
000012B0  C2FC 0008                647      MULU    #8,D1
000012B4  4EB6 1000                648      JSR     (A6,D1)     Jump to subroutine of value at D1
000012B8                           649  *    ---------  Second Word Value D2    **** XXXX
000012B8                           650  
000012B8                           651      *4MSB   X***
000012B8  4241                     652      CLR     D1
000012BA  3202                     653      MOVE.W  D2,D1
000012BC  E049                     654      LSR.W   #8,D1            00X*
000012BE  E849                     655      LSR.W   #4,D1            000X
000012C0  C2FC 0008                656      MULU    #8,D1
000012C4  4DF9 00001472            657      LEA     numTable ,A6 Load the table into A6
000012CA  4EB6 1000                658      JSR     (A6,D1)     Jump to subroutine of value at D1
000012CE                           659      *next 4MSB  *X**
000012CE  4241                     660      CLR     D1
000012D0  3202                     661      MOVE.W  D2,D1
000012D2  E949                     662      LSL.W   #4,D1       X**0
000012D4  E049                     663      LSR.W   #8,D1       00X*
000012D6  E809                     664      LSR.B   #4,D1       000X
000012D8  C2FC 0008                665      MULU    #8,D1
000012DC  4DF9 00001472            666      LEA     numTable ,A6 Load the table into A6
000012E2  4EB6 1000                667      JSR     (A6,D1)     Jump to subroutine of value at D1
000012E6                           668      *next 4MSB  **X*
000012E6  4241                     669      CLR     D1
000012E8  1202                     670      MOVE.B  D2,D1       00X*
000012EA  E809                     671      LSR.B   #4,D1       000X
000012EC  C2FC 0008                672      MULU    #8,D1
000012F0  4DF9 00001472            673      LEA     numTable ,A6 Load the table into A6
000012F6  4EB6 1000                674      JSR     (A6,D1)     Jump to subroutine of value at D1
000012FA                           675      *next 4MSB  ***X
000012FA  4241                     676      CLR     D1
000012FC  1202                     677      MOVE.B  D2,D1       00*X
000012FE  E909                     678      LSL.B   #4,D1       00X0
00001300  E809                     679      LSR.B   #4,D1       000X
00001302  C2FC 0008                680      MULU    #8,D1
00001306  4DF9 00001472            681      LEA     numTable ,A6 Load the table into A6
0000130C  4EB6 1000                682      JSR     (A6,D1)     Jump to subroutine of value at D1
00001310  4EB8 11E6                683      JSR     moveIntPointerLong
00001314  4E75                     684      RTS
00001316                           685   
00001316                           686  *    -----------------------------------------------------------            
00001316                           687  
00001316                           688  *    Subroutine IA100   ------------------------------------------
00001316                           689  
00001316                           690  IA100                               ;immediateByte
00001316  14FC 0023                691      MOVE.B  #'#',(A2)+
0000131A  14FC 0024                692      MOVE.B  #'$',(A2)+
0000131E  381D                     693      MOVE.W  (A5)+,D4    WE got the address for the operand
00001320  3815                     694      MOVE.W  (A5),D4     Got the value of operand, immeditae data
00001322  E08C                     695      LSR.L   #8,D4
00001324  E08C                     696      LSR.L   #8,D4
00001326                           697      *4MSB   00X*
00001326  4242                     698      CLR     D2
00001328  1404                     699      MOVE.B  D4,D2       00X*
0000132A  E80A                     700      LSR.B   #4,D2       000X
0000132C  C4FC 0008                701      MULU    #8,D2
00001330  4DF9 00001472            702      LEA     numTable ,A6 Load the table into A6
00001336  4EB6 2000                703      JSR     (A6,D2)     Jump to subroutine of value at D2
0000133A                           704      *last 4bits 00*X
0000133A  4242                     705      CLR     D2
0000133C  1404                     706      MOVE.B  D4,D2       00*X
0000133E  E90A                     707      LSL.B   #4,D2       00X*
00001340  E80A                     708      LSR.B   #4,D2       000X
00001342  C4FC 0008                709      MULU    #8,D2
00001346                           710      
00001346  4EB6 2000                711      JSR     (A6,D2)     Jump to subroutine of value at D2
0000134A  4EB8 11E2                712      JSR     moveIntPointerWord
0000134E  4E75                     713      RTS
00001350                           714  
00001350                           715      
00001350                           716  *    -----------------------------------------------------------            
00001350                           717  
00001350                           718  *    Jump Table modeTable ***************************************
00001350                           719  
00001350                           720  *    matches the associated Addressing mode     
00001350                           721  
00001350                           722  *    
00001350                           723  
00001350  4EB9 00001390            724  modeTable   JSR     M0000   ;Dn, Data Register 
00001356  4E75                     725      RTS             ;return, done printing
00001358  4EB9 0000139C            726      JSR     M0001   ;An, Address Register
0000135E  4E75                     727      RTS             ;return, done printing
00001360  4EB9 000013A8            728      JSR     M0010   ;(An), Address
00001366  4E75                     729      RTS             ;return, done printing
00001368  4EB9 000013BC            730      JSR     M0011   ;(An)+, Address with Postincrement
0000136E  4E75                     731      RTS             ;return, done printing
00001370                           732      
00001370  4EB9 000013D4            733      JSR     M0100   ;-(An), Address with Predecrement
00001376  4E75                     734      RTS             ;return, done printing
00001378  4EB9 000013EC            735      JSR     M0101   ; blank - not assigned for this project
0000137E  4E75                     736      RTS
00001380  4EB9 000013EE            737      JSR     M0110   ; blank - not assigned for this project
00001386  4E75                     738      RTS
00001388  4EB9 000013F0            739      JSR     M0111   ;(xxx).W, (xxx).L, #imm
0000138E  4E75                     740      RTS             ;return, done printing
00001390                           741  *    -----------------------------------------------------------            
00001390                           742  
00001390                           743  *    Subroutine M0000 ------------------------------------------
00001390                           744  
00001390                           745  M0000                               ;Dn
00001390  14FC 0044                746      MOVE.B  #'D',(A2)+      ;display D
00001394  264A                     747      MOVEA.L A2,A3           ;get address for n
00001396  14FC 0020                748      MOVE.B  #' ',(A2)+      ;blank
0000139A  4E75                     749      RTS
0000139C                           750  
0000139C                           751  *    -----------------------------------------------------------            
0000139C                           752  
0000139C                           753  *    Subroutine M0001 ------------------------------------------
0000139C                           754  
0000139C                           755  M0001                               ;An
0000139C  14FC 0041                756      MOVE.B  #'A',(A2)+      ;display A
000013A0  264A                     757      MOVEA.L A2,A3           ;get address for n
000013A2  14FC 0020                758      MOVE.B  #' ',(A2)+      ;blank
000013A6  4E75                     759      RTS
000013A8                           760  
000013A8                           761  *    -----------------------------------------------------------            
000013A8                           762  
000013A8                           763  *    Subroutine M0010 ------------------------------------------
000013A8                           764  
000013A8                           765  M0010                               ;(An) Address
000013A8  14FC 0028                766      MOVE.B  #'(',(A2)+      ;display (
000013AC  14FC 0041                767      MOVE.B  #'A',(A2)+      ;display A
000013B0  264A                     768      MOVEA.L A2,A3           ;get address for n
000013B2  14FC 0020                769      MOVE.B  #' ',(A2)+      ;blank
000013B6  14FC 0029                770      MOVE.B  #')',(A2)+      ;display )
000013BA  4E75                     771      RTS
000013BC                           772   
000013BC                           773  *    -----------------------------------------------------------            
000013BC                           774  
000013BC                           775  *    Subroutine M0011 ------------------------------------------
000013BC                           776  
000013BC                           777  M0011                               ;(An)+ 
000013BC  14FC 0028                778      MOVE.B  #'(',(A2)+      ;display (
000013C0  14FC 0041                779      MOVE.B  #'A',(A2)+      ;display A
000013C4  264A                     780      MOVEA.L A2,A3           ;get address for n
000013C6  14FC 0020                781      MOVE.B  #' ',(A2)+      ;blank
000013CA  14FC 0029                782      MOVE.B  #')',(A2)+      ;display )
000013CE  14FC 002B                783      MOVE.B  #'+',(A2)+      ;display +
000013D2  4E75                     784      RTS
000013D4                           785  
000013D4                           786  *    -----------------------------------------------------------            
000013D4                           787  
000013D4                           788  *    Subroutine M0100 ------------------------------------------
000013D4                           789  
000013D4                           790  M0100                               ;-(An)
000013D4  14FC 002D                791      MOVE.B  #'-',(A2)+      ;display -
000013D8  14FC 0028                792      MOVE.B  #'(',(A2)+      ;display (
000013DC  14FC 0041                793      MOVE.B  #'A',(A2)+      ;display A
000013E0  264A                     794      MOVEA.L A2,A3           ;get address for n
000013E2  14FC 0020                795      MOVE.B  #' ',(A2)+      ;blank
000013E6  14FC 0029                796      MOVE.B  #')',(A2)+      ;display )
000013EA  4E75                     797      RTS
000013EC                           798  
000013EC                           799  *    -----------------------------------------------------------    
000013EC                           800  
000013EC                           801  *    Subroutine M0101 ------------------------------------------
000013EC                           802  
000013EC                           803  M0101                               ;do nothing
000013EC  4E75                     804      RTS
000013EE                           805  *    -----------------------------------------------------------   
000013EE                           806  
000013EE                           807  *    Subroutine M0110 ------------------------------------------
000013EE                           808  
000013EE                           809  M0110                               ;do nothing
000013EE  4E75                     810      RTS
000013F0                           811  *    -----------------------------------------------------------     
000013F0                           812  
000013F0                           813  *    Subroutine M0111 -------------------------Not finished-----
000013F0                           814  
000013F0                           815  *    Register is stored at D1
000013F0                           816  
000013F0                           817  *    ----case 1 : Register 100 => #imm => #XX 3 spaces
000013F0                           818  
000013F0                           819  *    ----case 2 : Register 000 => (XXX).W => 
000013F0                           820  
000013F0                           821  *    ----case 3 : Register 001 => (XXX).L
000013F0                           822  
000013F0                           823  *    
000013F0                           824  
000013F0                           825  *    MOVE.W  (A4)+,D6 INCREMENT OUT STARTING/CURRENT POINTER BY A WORD, STORE THE CONTENTS OF WHAT ITS CURRENTLY POINTING AT
000013F0                           826  
000013F0                           827  *    A3 not changed => overwritten 
000013F0                           828  
000013F0                           829  M0111                               ;(xxx).W, (xxx).L, #imm
000013F0  367C 0004                830      MOVEA.W  #4,A3               ; This will be taken care under opcode subroutine
000013F4  4E75                     831      RTS
000013F6                           832  
000013F6                           833  *    -----------------------------------------------------------
000013F6                           834  
000013F6                           835  *    Subroutine immediateData 
000013F6                           836  
000013F6                           837  ;immediateData     
000013F6                           838  ;            RTS
000013F6                           839  *    -----------------------------------------------------------
000013F6                           840  
000013F6                           841  
000013F6                           842  *    Subroutine registerPrint----------------------------------- 
000013F6                           843  
000013F6                           844  registerPrint
000013F6  4DF9 00001472            845      LEA     numTable,A6 Load the table into A6
000013FC  4EB6 1000                846      JSR     (A6,D1)     Jump to numTable with value at D1
00001400  4E75                     847      RTS
00001402                           848  
00001402                           849  *    -----------------------------------------------------------            
00001402                           850  
00001402                           851  *    Jump Table regNumTable ***************************************
00001402                           852  
00001402                           853  *    prints the associated number of the register            *
00001402                           854  
00001402                           855  *    Also prints hex values for data and addresses           *
00001402                           856  
00001402                           857  *    -----see below for decoding of what these sub-routines are
00001402                           858  
00001402                           859  *    
00001402                           860  
00001402  4EB9 00001442            861  regNumTable JSR     RN0000   ;register 0
00001408  4E75                     862      RTS             ;return, done printing
0000140A  4EB9 00001448            863      JSR     RN0001   ;register 1
00001410  4E75                     864      RTS             ;return, done printing
00001412  4EB9 0000144E            865      JSR     RN0010   ;register 2
00001418  4E75                     866      RTS             ;return, done printing
0000141A  4EB9 00001454            867      JSR     RN0011   ;register 3
00001420  4E75                     868      RTS             ;return, done printing
00001422  4EB9 0000145A            869      JSR     RN0100   ;register 4
00001428  4E75                     870      RTS             ;return, done printing
0000142A  4EB9 00001460            871      JSR     RN0101   ;register 5
00001430  4E75                     872      RTS             ;return, done printing
00001432  4EB9 00001466            873      JSR     RN0110   ;register 6
00001438  4E75                     874      RTS             ;return, done printing
0000143A  4EB9 0000146C            875      JSR     RN0111   ;register 7
00001440  4E75                     876      RTS             ;return, done printing
00001442                           877  *    -----------------------------------------------------------            
00001442                           878  
00001442                           879  *    Subroutine RN0000 ------------------------------------------
00001442                           880  
00001442                           881  RN0000
00001442  16BC 0030                882      MOVE.B  #'0',(A3)      ;display 0
00001446  4E75                     883      RTS
00001448                           884  
00001448                           885  *    -----------------------------------------------------------            
00001448                           886  
00001448                           887  *    Subroutine RN0001 ------------------------------------------
00001448                           888  
00001448                           889  RN0001
00001448  16BC 0031                890      MOVE.B  #'1',(A3)      ;display 1
0000144C  4E75                     891      RTS
0000144E                           892  
0000144E                           893  *    -----------------------------------------------------------            
0000144E                           894  
0000144E                           895  *    Subroutine RN0010 ------------------------------------------
0000144E                           896  
0000144E                           897  RN0010
0000144E  16BC 0032                898      MOVE.B  #'2',(A3)      ;display 2
00001452  4E75                     899      RTS
00001454                           900   
00001454                           901  *    -----------------------------------------------------------            
00001454                           902  
00001454                           903  *    Subroutine RN0011 ------------------------------------------
00001454                           904  
00001454                           905  RN0011
00001454  16BC 0033                906      MOVE.B  #'3',(A3)      ;display 3
00001458  4E75                     907      RTS
0000145A                           908  
0000145A                           909  *    -----------------------------------------------------------            
0000145A                           910  
0000145A                           911  *    Subroutine RN0100 ------------------------------------------
0000145A                           912  
0000145A                           913  RN0100
0000145A  16BC 0034                914      MOVE.B  #'4',(A3)      ;display 4
0000145E  4E75                     915      RTS
00001460                           916  
00001460                           917  *    -----------------------------------------------------------            
00001460                           918  
00001460                           919  *    Subroutine RN0101 ------------------------------------------
00001460                           920  
00001460                           921  RN0101
00001460  16BC 0035                922      MOVE.B  #'5',(A3)      ;display 5
00001464  4E75                     923      RTS
00001466                           924  
00001466                           925  *    -----------------------------------------------------------            
00001466                           926  
00001466                           927  *    Subroutine RN0110 ------------------------------------------
00001466                           928  
00001466                           929  RN0110
00001466  16BC 0036                930      MOVE.B  #'6',(A3)      ;display 6
0000146A  4E75                     931      RTS
0000146C                           932      
0000146C                           933  *    -----------------------------------------------------------            
0000146C                           934  
0000146C                           935  *    Subroutine RN0111 ------------------------------------------
0000146C                           936  
0000146C                           937  RN0111
0000146C  16BC 0037                938      MOVE.B  #'7',(A3)      ;display 7
00001470  4E75                     939      RTS
00001472                           940  
00001472                           941  *    -----------------------------------------------------------            
00001472                           942  
00001472                           943  *    Jump Table numTable ***************************************
00001472                           944  
00001472                           945  *    prints the associated number of the register            *
00001472                           946  
00001472                           947  *    Also prints hex values for data and addresses           *
00001472                           948  
00001472                           949  *    -----see below for decoding of what these sub-routines are
00001472                           950  
00001472                           951  *    
00001472                           952  
00001472  4EB9 000014F2            953  numTable    JSR     N0000   ;register 0
00001478  4E75                     954      RTS             ;return, done printing
0000147A  4EB9 000014F8            955      JSR     N0001   ;register 1
00001480  4E75                     956      RTS             ;return, done printing
00001482  4EB9 000014FE            957      JSR     N0010   ;register 2
00001488  4E75                     958      RTS             ;return, done printing
0000148A  4EB9 00001504            959      JSR     N0011   ;register 3
00001490  4E75                     960      RTS             ;return, done printing
00001492  4EB9 0000150A            961      JSR     N0100   ;register 4
00001498  4E75                     962      RTS             ;return, done printing
0000149A  4EB9 00001510            963      JSR     N0101   ;register 5
000014A0  4E75                     964      RTS             ;return, done printing
000014A2  4EB9 00001516            965      JSR     N0110   ;register 6
000014A8  4E75                     966      RTS             ;return, done printing
000014AA  4EB9 0000151C            967      JSR     N0111   ;register 7
000014B0  4E75                     968      RTS             ;return, done printing
000014B2  4EB9 00001522            969      JSR     N1000   ;num 8
000014B8  4E75                     970      RTS             ;return, done printing
000014BA  4EB9 00001528            971      JSR     N1001   ;num 9
000014C0  4E75                     972      RTS             ;return, done printing
000014C2  4EB9 0000152E            973      JSR     N1010   ;num A
000014C8  4E75                     974      RTS             ;return, done printing
000014CA  4EB9 00001534            975      JSR     N1011   ;num B
000014D0  4E75                     976      RTS             ;return, done printing
000014D2  4EB9 0000153A            977      JSR     N1100   ;num C
000014D8  4E75                     978      RTS             ;return, done printing
000014DA  4EB9 00001540            979      JSR     N1101   ;num D
000014E0  4E75                     980      RTS             ;return, done printing
000014E2  4EB9 00001546            981      JSR     N1110   ;num E
000014E8  4E75                     982      RTS             ;return, done printing
000014EA  4EB9 0000154C            983      JSR     N1111   ;num F
000014F0  4E75                     984      RTS             ;return, done printing
000014F2                           985  *    -----------------------------------------------------------            
000014F2                           986  
000014F2                           987  *    Subroutine N0000 ------------------------------------------
000014F2                           988  
000014F2                           989  N0000
000014F2  14FC 0030                990      MOVE.B  #'0',(A2)+      ;display 0
000014F6  4E75                     991      RTS
000014F8                           992  
000014F8                           993  *    -----------------------------------------------------------            
000014F8                           994  
000014F8                           995  *    Subroutine N0001 ------------------------------------------
000014F8                           996  
000014F8                           997  N0001
000014F8  14FC 0031                998      MOVE.B  #'1',(A2)+      ;display 1
000014FC  4E75                     999      RTS
000014FE                          1000  
000014FE                          1001  *    -----------------------------------------------------------            
000014FE                          1002  
000014FE                          1003  *    Subroutine N0010 ------------------------------------------
000014FE                          1004  
000014FE                          1005  N0010
000014FE  14FC 0032               1006      MOVE.B  #'2',(A2)+      ;display 2
00001502  4E75                    1007      RTS
00001504                          1008   
00001504                          1009  *    -----------------------------------------------------------            
00001504                          1010  
00001504                          1011  *    Subroutine N0011 ------------------------------------------
00001504                          1012  
00001504                          1013  N0011
00001504  14FC 0033               1014      MOVE.B  #'3',(A2)+      ;display 3
00001508  4E75                    1015      RTS
0000150A                          1016  
0000150A                          1017  *    -----------------------------------------------------------            
0000150A                          1018  
0000150A                          1019  *    Subroutine N0100 ------------------------------------------
0000150A                          1020  
0000150A                          1021  N0100
0000150A  14FC 0034               1022      MOVE.B  #'4',(A2)+      ;display 4
0000150E  4E75                    1023      RTS
00001510                          1024  
00001510                          1025  *    -----------------------------------------------------------            
00001510                          1026  
00001510                          1027  *    Subroutine N0101 ------------------------------------------
00001510                          1028  
00001510                          1029  N0101
00001510  14FC 0035               1030      MOVE.B  #'5',(A2)+      ;display 5
00001514  4E75                    1031      RTS
00001516                          1032  
00001516                          1033  *    -----------------------------------------------------------            
00001516                          1034  
00001516                          1035  *    Subroutine N0110 ------------------------------------------
00001516                          1036  
00001516                          1037  N0110
00001516  14FC 0036               1038      MOVE.B  #'6',(A2)+      ;display 6
0000151A  4E75                    1039      RTS
0000151C                          1040      
0000151C                          1041  *    -----------------------------------------------------------            
0000151C                          1042  
0000151C                          1043  *    Subroutine N0111 ------------------------------------------
0000151C                          1044  
0000151C                          1045  N0111
0000151C  14FC 0037               1046      MOVE.B  #'7',(A2)+      ;display 7
00001520  4E75                    1047      RTS
00001522                          1048  
00001522                          1049  *    ----------------------------------------------------------- 
00001522                          1050  
00001522                          1051  *    Subroutine N1000 ------------------------------------------
00001522                          1052  
00001522                          1053  N1000       
00001522  14FC 0038               1054      MOVE.B  #'8',(A2)+      ;display 8
00001526  4E75                    1055      RTS
00001528                          1056  
00001528                          1057  *    -----------------------------------------------------------            
00001528                          1058  
00001528                          1059  *    Subroutine N1001 ------------------------------------------
00001528                          1060  
00001528                          1061  N1001   
00001528  14FC 0039               1062      MOVE.B  #'9',(A2)+      ;display 9
0000152C  4E75                    1063      RTS
0000152E                          1064  
0000152E                          1065  *    -----------------------------------------------------------            
0000152E                          1066  
0000152E                          1067  *    Subroutine N1010 ------------------------------------------
0000152E                          1068  
0000152E                          1069  N1010   
0000152E  14FC 0041               1070      MOVE.B  #'A',(A2)+      ;display A
00001532  4E75                    1071      RTS
00001534                          1072  
00001534                          1073  *    -----------------------------------------------------------            
00001534                          1074  
00001534                          1075  *    Subroutine N1011 ------------------------------------------
00001534                          1076  
00001534                          1077  N1011   
00001534  14FC 0042               1078      MOVE.B  #'B',(A2)+      ;display B
00001538  4E75                    1079      RTS
0000153A                          1080  
0000153A                          1081  *    -----------------------------------------------------------            
0000153A                          1082  
0000153A                          1083  *    Subroutine N1100 ------------------------------------------
0000153A                          1084  
0000153A                          1085  N1100   
0000153A  14FC 0043               1086      MOVE.B  #'C',(A2)+      ;display C
0000153E  4E75                    1087      RTS
00001540                          1088  
00001540                          1089  *    -----------------------------------------------------------            
00001540                          1090  
00001540                          1091  *    Subroutine N1101 ------------------------------------------
00001540                          1092  
00001540                          1093  N1101   
00001540  14FC 0044               1094      MOVE.B  #'D',(A2)+      ;display D
00001544  4E75                    1095      RTS
00001546                          1096  
00001546                          1097  *    -----------------------------------------------------------            
00001546                          1098  
00001546                          1099  *    Subroutine N1110 ------------------------------------------
00001546                          1100  
00001546                          1101  N1110   
00001546  14FC 0045               1102      MOVE.B  #'E',(A2)+      ;display E
0000154A  4E75                    1103      RTS
0000154C                          1104  
0000154C                          1105  *    -----------------------------------------------------------            
0000154C                          1106  
0000154C                          1107  *    Subroutine N1111 ------------------------------------------
0000154C                          1108  
0000154C                          1109  N1111   
0000154C  14FC 0046               1110      MOVE.B  #'F',(A2)+      ;display F
00001550  4E75                    1111      RTS
00001552                          1112  *    -------------------- HELPER FUCNTION LOCATION -----------
00001552                          1113  
00001552                          1114  *    - For Mode always D2
00001552                          1115  
00001552                          1116  *    -- For Register always D1
00001552                          1117  
00001552                          1118  *    -  Original Machine code In D6
00001552                          1119  
00001552                          1120  
00001552                          1121  
00001552                          1122  *    HELPER LOCATION
00001552                          1123  
00001552                          1124  *    HELPER LOCATION
00001552                          1125  
00001552                          1126  *    HELPER LOCATION
00001552                          1127  
00001552                          1128  *    HELPER LOCATION
00001552                          1129  
00001552                          1130  *    HELPER LOCATION
00001552                          1131  
00001552                          1132  *    ------------------------------------------------------------
00001552                          1133  
00001552                          1134  get_0to2_bit
00001552                          1135  *    ------------------------------------------------------------
00001552                          1136  
00001552                          1137  *    MachineCode: 0001 **** **** **** *BIT
00001552                          1138  
00001552                          1139  *    Only last 3 bits which is stored at D0 => Source Register
00001552                          1140  
00001552  4281                    1141      CLR.L     D1
00001554  1206                    1142      MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
00001556  EB09                    1143      LSL.B   #5,D1       **** **** BIT0 0000
00001558  EA09                    1144      LSR.B   #5,D1       **** **** 0000 0BIT
0000155A  1001                    1145      MOVE.B  D1,D0
0000155C  C0FC 0008               1146      MULU    #8,D0       value adjusted for jumping
00001560  4DF8 1402               1147      LEA     regNumTable ,A6 Load the table into A6
00001564  4EB6 0000               1148      JSR     (A6,D0)     Jump to subroutine of value at D1
00001568  4E75                    1149      RTS
0000156A                          1150  *    ------------------------------------------------------------
0000156A                          1151  
0000156A                          1152  get_3to5_bit
0000156A                          1153  *    ------------------------------------------------------------
0000156A                          1154  
0000156A                          1155  *    MachineCode: 0001 **** **** **BI T***
0000156A                          1156  
0000156A                          1157  *    Only next last 3 bits which is stored at D0 => Source Address mode
0000156A                          1158  
0000156A  4282                    1159      CLR.L     D2
0000156C  4281                    1160      CLR.L     D1
0000156E  1406                    1161      MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00001570  E50A                    1162      LSL.B   #2,D2       **** **** BIT* **00
00001572  EA0A                    1163      LSR.B   #5,D2       **** **** 0000 0BIT
00001574  1002                    1164      MOVE.B  D2,D0
00001576  C0FC 0008               1165      MULU    #8,D0       value adjusted for jumping
0000157A  4DF8 1350               1166      LEA     modeTable,A6 Load the table into A6
0000157E  4EB6 0000               1167      JSR     (A6,D0)     Jump to subroutine of value at D0
00001582  4E75                    1168      RTS
00001584                          1169  *    ------------------------------------------------------------
00001584                          1170  
00001584                          1171  get_6to8_bit
00001584                          1172  *    ------------------------------------------------------------
00001584                          1173  
00001584                          1174  *    MachineCode: 0001 **** ***B IT** ****
00001584                          1175  
00001584                          1176  *    Only next last 3 bits which is stored at D0 => Destination Address mode
00001584                          1177  
00001584  4282                    1178      CLR.L     D2
00001586  4281                    1179      CLR.L     D1
00001588  3406                    1180      MOVE.W  D6,D2       MOVE the original machine code to D2 to play with
0000158A  EF4A                    1181      LSL.W   #7,D2       BIT* **** **** 0000
0000158C  E04A                    1182      LSR.W   #8,D2       0000 0000 BIT* ****
0000158E  EA4A                    1183      LSR.W   #5,D2       0000 0000 0000 0BIT
00001590  C4FC 0008               1184      MULU    #8,D2       value adjusted for jumping
00001594  4DF8 1350               1185      LEA     modeTable,A6 Load the table into A6
00001598  4EB6 2000               1186      JSR     (A6,D2)     Jump to subroutine of value at D2
0000159C  4E75                    1187      RTS
0000159E                          1188  *    ------------------------------------------------------------
0000159E                          1189  
0000159E                          1190  get_9to11_bit
0000159E                          1191  *    ------------------------------------------------------------
0000159E                          1192  
0000159E                          1193  *    MachineCode: 0001 **** BIT* **** ****
0000159E                          1194  
0000159E                          1195  *    Decode 3 bits => Destination Register
0000159E                          1196  
0000159E                          1197  *    Stored at D1
0000159E                          1198  
0000159E  4281                    1199      CLR.L     D1
000015A0  3206                    1200      MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
000015A2  E949                    1201      LSL.W   #4,D1       BIT* **** **** 0000
000015A4  E049                    1202      LSR.W   #8,D1       0000 0000 BIT* ****
000015A6  EA49                    1203      LSR.W   #5,D1       0000 0000 0000 0BIT
000015A8  C2FC 0008               1204      MULU    #8,D1       value adjusted for jumping
000015AC  4DF8 1402               1205      LEA     regNumTable ,A6 Load the table into A6
000015B0  4EB6 1000               1206      JSR     (A6,D1)     Jump to subroutine of value at D1
000015B4  4E75                    1207      RTS
000015B6                          1208  *    -----------------------FUNCTION word or Long --------------
000015B6                          1209  
000015B6                          1210  *    ----------Used to decipher if we are decoding a word or long
000015B6                          1211  
000015B6                          1212  *    -  This subroutine determines f the operations is a word or a long, 
000015B6                          1213  
000015B6                          1214  *    - we use the AND operator to clear out everything except for the 
000015B6                          1215  
000015B6                          1216  *    -3 bit which will be found in D3, we play with our data in D3
000015B6                          1217  
000015B6                          1218  *    -the word or LONG can be found in the OPCODE FIELD which is 
000015B6                          1219  
000015B6                          1220  *    -bits 8 _6
000015B6                          1221  
000015B6                          1222  
000015B6                          1223  print_long:
000015B6                          1224      *-This method print out the long stored in D4,
000015B6                          1225      *- converting from hex to ascii
000015B6  2604                    1226      MOVE.L  D4,D3
000015B8  4843                    1227      SWAP D3
000015BA                          1228      
000015BA  C6BC 0000FFFF           1229      AND.L   #$0000FFFF,D3
000015C0  3403                    1230      MOVE.W  D3,D2
000015C2  3602                    1231      MOVE.W  D2,D3
000015C4                          1232      *-get bit 0
000015C4                          1233      
000015C4                          1234      
000015C4  E14B                    1235      LSL.W    #8,D3
000015C6  E94B                    1236      LSL.W    #4,D3
000015C8  E04B                    1237      LSR.W    #8,D3
000015CA  E84B                    1238      LSR.W    #4,D3
000015CC                          1239      
000015CC  C6FC 0008               1240      MULU.W   #8,D3
000015D0  4DF8 1472               1241      LEA  numTable,A6
000015D4  4EB6 3000               1242      JSR  (A6,D3)
000015D8                          1243      
000015D8                          1244      *-get bit 1
000015D8  4243                    1245      CLR  D3
000015DA  3602                    1246      MOVE.W   D2,D3
000015DC  C67C 00F0               1247      AND.W    #$00F0,D3
000015E0  E84B                    1248      LSR.W    #4,D3
000015E2                          1249      
000015E2  C6FC 0008               1250      MULU.W   #8,D3
000015E6  4DF8 1472               1251      LEA  numTable,A6
000015EA  4EB6 3000               1252      JSR  (A6,D3)
000015EE                          1253      
000015EE  3602                    1254      MOVE.W   D2,D3
000015F0  C67C 0F00               1255      AND.W    #$0F00,D3
000015F4  E04B                    1256      LSR.W    #8,D3
000015F6                          1257      
000015F6  C6FC 0008               1258      MULU.W   #8,D3
000015FA  4DF8 1472               1259      LEA  numTable,A6
000015FE  4EB6 3000               1260      JSR  (A6,D3)
00001602                          1261      
00001602  3602                    1262      MOVE.W   D2,D3
00001604  C67C F000               1263      AND.W    #$F000,D3
00001608  E04B                    1264      LSR.W    #8,D3
0000160A  E84B                    1265      LSR.W    #4,D3
0000160C                          1266      
0000160C  C6FC 0008               1267      MULU.W   #8,D3
00001610  4DF8 1472               1268      LEA  numTable,A6
00001614  4EB6 3000               1269      JSR  (A6,D3)
00001618                          1270      
00001618                          1271      *-print the upper word
00001618                          1272      
00001618  2604                    1273      MOVE.L D4,D3
0000161A                          1274      
0000161A  C6BC 0000FFFF           1275      AND.L    #$0000FFFF,D3
00001620  3403                    1276      MOVE.W   D3,D2
00001622                          1277      
00001622                          1278      *-get bit 4
00001622  C67C F000               1279      AND.W    #$F000,D3
00001626  E04B                    1280      LSR.W    #8,D3
00001628  E84B                    1281      LSR.W    #4,D3
0000162A  C6FC 0008               1282      MULU.W   #8,D3
0000162E  4DF8 1472               1283      LEA  numTable,A6
00001632  4EB6 3000               1284      JSR  (A6,D3)
00001636                          1285      
00001636                          1286      
00001636  3602                    1287      MOVE.W   D2,D3
00001638  C67C 0F00               1288      AND.W    #$0F00,D3
0000163C  E04B                    1289      LSR.W    #8,D3
0000163E  C6FC 0008               1290      MULU.W   #8,D3
00001642  4DF8 1472               1291      LEA  numTable,A6
00001646  4EB6 3000               1292      JSR  (A6,D3)
0000164A                          1293      
0000164A  3602                    1294      MOVE.W   D2,D3
0000164C  C67C 00F0               1295      AND.W    #$00F0,D3
00001650  E84B                    1296      LSR.W    #4,D3
00001652  C6FC 0008               1297      MULU.W   #8,D3
00001656  4DF8 1472               1298      LEA  numTable,A6
0000165A  4EB6 3000               1299      JSR  (A6,D3)
0000165E                          1300      
0000165E                          1301      
0000165E  3602                    1302      MOVE.W   D2,D3
00001660  C67C 000F               1303      AND.W    #$000F,D3
00001664  C6FC 0008               1304      MULU.W   #8,D3
00001668  4DF8 1472               1305      LEA  numTable,A6
0000166C  4EB6 3000               1306      JSR  (A6,D3)
00001670  4E75                    1307      RTS
00001672                          1308      
00001672                          1309  
00001672                          1310  WordOrLong  
00001672                          1311      *-find this OPMODE
00001672  4283                    1312      CLR.L   D3
00001674  3606                    1313      MOVE.W  D6,D3 ;D6 holds the ORIGINAL CODE
00001676                          1314      *-we will store this in D3
00001676                          1315      *-using a shortcut the AND operator
00001676                          1316      *-we need these bits
00001676                          1317      *-[**** XXXX X[XXX] ****]
00001676                          1318      *- starts repersenting bits we do not need
00001676                          1319      *-shortcut we do not need to shift as much
00001676                          1320      *-minor optimization
00001676                          1321      *-AND F to keep 0 to throw away
00001676  C67C 0FF0               1322      AND.W   #$0FF0,D3 means turn the zeros into zeros keep the F's
0000167A  EC4B                    1323      LSR.W   #6,D3
0000167C                          1324      *- now weneed to get the last 3 bits
0000167C                          1325      *-shift to the right by 6 makes the last 3 bits in the
0000167C                          1326      *-byte postion
0000167C                          1327      *-[**** **** XXXX X[XXX]]m we need to clear everything else
0000167C  C67C 000F               1328      AND.W   #$000F,D3 clear everything except the last byte we need
00001680  E34B                    1329      LSL.W   #1,D3   shift the remaining bit out [X<-[XXX]]
00001682                          1330      *-make sure everyhting is clearn except the last byte
00001682  C67C 000F               1331      AND.W   #$000F,D3
00001686                          1332      *-Shift back by 1 bit to the right
00001686  E24B                    1333      LSR.W   #1,D3
00001688  4E75                    1334      RTS
0000168A                          1335      
0000168A                          1336      
0000168A                          1337      
0000168A                          1338      
0000168A                          1339      
0000168A                          1340      *---------------------------------------------------------------
0000168A                          1341      *--------------------------------------------------------
0000168A                          1342      *-OPCODE SUB ROUTINE INCLUDES ( all decodes are in different files - See files
0000168A                          1343      *-------------------------------------
0000168A                          1344      INCLUDE 'op0100.x68'    IN a different file, modulated design
0000168A                          1345  
0000168A                          1346  
0000168A                          1347  
0000168A                          1348  
0000168A                          1349  
0000168A                          1350  
0000168A                          1351  op0100      *MOVEM, JSR,LEA,RTS,NOP
0000168A  14FC 0020               1352      MOVE.B  #' ',(A2)+      ;print spaces
0000168E  14FC 0020               1353      MOVE.B  #' ',(A2)+      ;print spaces
00001692  14FC 0020               1354      MOVE.B  #' ',(A2)+      ;print spaces
00001696  14FC 0020               1355      MOVE.B  #' ',(A2)+      ;print spaces
0000169A                          1356  
0000169A                          1357  
0000169A                          1358  
0000169A                          1359  
0000169A                          1360  
0000169A                          1361  
0000169A                          1362  
0000169A                          1363  
0000169A                          1364  
0000169A                          1365  
0000169A                          1366  
0000169A  BC7C 4E71               1367      CMP.W   #$4E71,D6
0000169E  6700 018A               1368      BEQ     _NOP
000016A2                          1369  
000016A2                          1370  
000016A2                          1371  
000016A2  BC7C 4E75               1372      CMP.W   #$4E75,D6   ;see if it's a RTS
000016A6  6700 01A8               1373      BEQ     _RTS        branch to RTS
000016AA                          1374  
000016AA                          1375  
000016AA                          1376  
000016AA  4242                    1377      CLR     D2
000016AC  3406                    1378      MOVE.W  D6,D2       MOVE the original machine code to D2 to play with
000016AE  EF4A                    1379      LSL.W   #7,D2       BIT* **** **** 0000
000016B0  E04A                    1380      LSR.W   #8,D2       0000 0000 BIT* ****
000016B2  EA4A                    1381      LSR.W   #5,D2       0000 0000 0000 0BIT
000016B4  B43C 0007               1382      CMP.B   #7,D2
000016B8  6700 01BC               1383      BEQ     _LEA        branch to LEA
000016BC                          1384      
000016BC                          1385  
000016BC                          1386  
000016BC                          1387  
000016BC                          1388  
000016BC                          1389  
000016BC                          1390  
000016BC                          1391  
000016BC                          1392      
000016BC                          1393      
000016BC  B63C 0002               1394      CMP.B   #hex_2,D3    ;see if it's a MOVEM.W
000016C0                          1395  
000016C0  6700 0022               1396      BEQ     _movemW     ;branch   
000016C4                          1397  
000016C4  B63C 0004               1398      CMP.B   #$4,D3    ;see if it's a MOVEM.L
000016C8                          1399  
000016C8  6700 0042               1400      BEQ     _movemL
000016CC                          1401  
000016CC                          1402  
000016CC                          1403  
000016CC                          1404  
000016CC                          1405  
000016CC  BC7C 4EB8               1406      CMP.W   #$4EB8,D6   ;see if it's a JSR
000016D0  6700 0206               1407      BEQ     _JSR
000016D4                          1408  
000016D4  BC7C 4EB9               1409      CMP.W   #$4EB9,D6   ;see if it's a JSR
000016D8  6700 01FE               1410      BEQ     _JSR
000016DC                          1411  
000016DC  BC7C 4EA7               1412      CMP.W   #$4EA7,D6   ;see if it's a JSR
000016E0  6300 01F6               1413      BLS     _JSR
000016E4                          1414      ;branch
000016E4                          1415  
000016E4                          1416      ;JSR     WorL
000016E4                          1417  
000016E4                          1418      ;CMP.B   #hex7,D3    ;see if it's a LEA
000016E4                          1419      ;BEQ     _lea        ;branch
000016E4                          1420      
000016E4                          1421  
000016E4                          1422      ;JSR     clrORmm
000016E4                          1423  
000016E4                          1424      ;CMP.B   #hex2,D3    ;see if it's a MOVEM.W
000016E4                          1425      ;BEQ     _movemW     ;branch
000016E4                          1426      ;CMP.B   #hex3,D3    ;see if it's a MOVEM.L
000016E4                          1427      ;BEQ     _movemL     ;branch
000016E4                          1428      
000016E4                          1429      ;BRA     opError     ;bad opcode branch to error
000016E4                          1430      
000016E4                          1431      
000016E4                          1432  _movemW
000016E4                          1433  
000016E4  14FC 0020               1434      MOVE.B  #' ',(A2)+
000016E8  14FC 004D               1435      MOVE.B  #'M',(A2)+      ;print spaces
000016EC  14FC 004F               1436      MOVE.B  #'O',(A2)+      ;print R
000016F0  14FC 0056               1437      MOVE.B  #'V',(A2)+      ;print T
000016F4  14FC 0045               1438      MOVE.B  #'E',(A2)+      ;print S
000016F8  14FC 004D               1439      MOVE.B  #'M',(A2)+      ;print spaces
000016FC  14FC 002E               1440      MOVE.B  #'.',(A2)+      ;print spaces
00001700  14FC 0057               1441      MOVE.B  #'W',(A2)+      ;print spaces
00001704  14FC 0020               1442      MOVE.B  #' ',(A2)+      ;print spaces
00001708                          1443  
00001708  6000 002A               1444      BRA decodeMOVEM
0000170C                          1445  
0000170C                          1446  _movemL
0000170C                          1447  
0000170C  14FC 0020               1448      MOVE.B  #' ',(A2)+      ;print spaces
00001710  14FC 004D               1449      MOVE.B  #'M',(A2)+      ;print spaces
00001714  14FC 004F               1450      MOVE.B  #'O',(A2)+      ;print R
00001718  14FC 0056               1451      MOVE.B  #'V',(A2)+      ;print T
0000171C  14FC 0045               1452      MOVE.B  #'E',(A2)+      ;print S
00001720  14FC 004D               1453      MOVE.B  #'M',(A2)+      ;print spaces
00001724  14FC 002E               1454      MOVE.B  #'.',(A2)+      ;print spaces
00001728  14FC 004C               1455      MOVE.B  #'L',(A2)+      ;print spaces
0000172C  14FC 0020               1456      MOVE.B  #' ',(A2)+      ;print spaces
00001730                          1457  
00001730  6000 0002               1458      BRA decodeMOVEM
00001734                          1459  decodeMOVEM
00001734                          1460      * decode bit 10 for direction
00001734  4280                    1461      CLR.L   D0
00001736  3006                    1462      MOVE.W  D6,D0           **** *X** **** **** 
00001738  4840                    1463      SWAP    D0              **** **** **** *X**
0000173A  4281                    1464      CLR.L   D1
0000173C  1200                    1465      MOVE.B  D0,D1           *X**
0000173E  E309                    1466      LSL.B   #1,D1           X**0
00001740  E609                    1467      LSR.B   #3,D1           000X
00001742  B23C 0001               1468      CMP.B   #1,D1           
00001746  6700 0006               1469      BEQ     RtoM
0000174A  6600 00B4               1470      BNE     MtoR
0000174E                          1471  RtoM
0000174E  4EB9 00001778           1472      JSR     decodeListRtoM
00001754  4EB8 156A               1473      JSR     get_3to5_bit
00001758  4EB8 1552               1474      JSR     get_0to2_bit    
0000175C  B43C 0007               1475      CMP.B   #7,D2
00001760  6700 0006               1476      BEQ     immAbRtoM
00001764  6000 2372               1477      BRA printCode
00001768                          1478  immAbRtoM
00001768  4DF8 11A2               1479      LEA     immAbTable, A6
0000176C  C2FC 0008               1480      MULU    #8,D1
00001770  4EB6 1000               1481      JSR     (A6,D1)
00001774  6000 2362               1482      BRA     printCode
00001778                          1483  
00001778                          1484  decodeListRtoM
00001778  2A04                    1485      MOVE.L  D4,D5
0000177A  E08D                    1486      LSR.L   #8,D5
0000177C  E08D                    1487      LSR.L   #8,D5
0000177E  4282                    1488      CLR.L   D2
00001780                          1489  FindLargestA
00001780  3605                    1490      MOVE.W  D5,D3
00001782  C67C 00F0               1491      AND.W   #$F0,D3
00001786  EE4B                    1492      LSR.W   #7,D3
00001788  B63C 0001               1493      CMP.B   #1,D3
0000178C  6700 000E               1494      BEQ     FoundLA
00001790  5202                    1495      ADD.B   #1,D2           increment
00001792  B43C 0008               1496      CMP.B   #8,D2           end of the loop compare
00001796  6700 0022               1497      BEQ     setupFindLargestD    end of the loop
0000179A  66E4                    1498      BNE     FindLargestA
0000179C                          1499      
0000179C                          1500  FoundLA
0000179C  14FC 0041               1501      MOVE.B  #'A',(A2)+
000017A0  4DF8 1472               1502      LEA     numTable,A6
000017A4  4280                    1503      CLR.L   D0
000017A6  1002                    1504      MOVE.B  D2,D0
000017A8  C1FC 0008               1505      MULS    #8,D0
000017AC  4EB6 0000               1506      JSR     (A6,D0)
000017B0  14FC 002F               1507      MOVE.B  #'/',(A2)+
000017B4  5202                    1508      ADD.B   #1,D2       increment
000017B6  E34D                    1509      LSL.W   #1,D5
000017B8  60C6                    1510      BRA     FindLargestA
000017BA                          1511  setupFindLargestD    
000017BA  2A04                    1512      MOVE.L  D4,D5
000017BC  E08D                    1513      LSR.L   #8,D5
000017BE  E08D                    1514      LSR.L   #8,D5
000017C0  E08D                    1515      LSR.L   #8,D5
000017C2  4282                    1516      CLR.L   D2
000017C4  4283                    1517      CLR.L   D3
000017C6                          1518  FindLargestD
000017C6  3605                    1519      MOVE.W  D5,D3
000017C8  C67C 00F0               1520      AND.W   #$F0,D3
000017CC  EE4B                    1521      LSR.W   #7,D3
000017CE  B63C 0001               1522      CMP.B   #1,D3
000017D2  6700 000E               1523      BEQ     FoundLD
000017D6  5202                    1524      ADD.B   #1,D2       increment
000017D8  B43C 0008               1525      CMP.B   #8,D2       end of the loop compare
000017DC  6700 22FA               1526      BEQ     printCode   end of the loop
000017E0  66E4                    1527      BNE     FindLargestD
000017E2                          1528      
000017E2                          1529  FoundLD
000017E2  14FC 0044               1530      MOVE.B  #'D',(A2)+
000017E6  4DF8 1472               1531      LEA     numTable,A6
000017EA  4280                    1532      CLR.L   D0
000017EC  1002                    1533      MOVE.B  D2,D0
000017EE  C1FC 0008               1534      MULS    #8,D0
000017F2  4EB6 0000               1535      JSR     (A6,D0)
000017F6  14FC 002F               1536      MOVE.B  #'/',(A2)+
000017FA  5202                    1537      ADD.B   #1,D2       increment
000017FC  E34D                    1538      LSL.W   #1,D5
000017FE  60C6                    1539      BRA     FindLargestD
00001800                          1540  MtoR    
00001800  4EB8 156A               1541      JSR     get_3to5_bit
00001804  4EB8 1552               1542      JSR     get_0to2_bit    
00001808  B43C 0007               1543      CMP.B   #7,D2
0000180C  6700 000C               1544      BEQ     immAbMtoR
00001810  14FC 002C               1545      MOVE.B  #',',(A2)+
00001814  4EB9 0000182A           1546      JSR     decodeListMtoR
0000181A                          1547  immAbMtoR
0000181A  4DF8 11A2               1548      LEA     immAbTable, A6
0000181E  C2FC 0008               1549      MULU    #8,D1
00001822  4EB6 1000               1550      JSR     (A6,D1)
00001826  6000 22B0               1551      BRA     printCode
0000182A                          1552  decodeListMtoR
0000182A                          1553  
0000182A                          1554      
0000182A                          1555      
0000182A                          1556      
0000182A                          1557  
0000182A                          1558  
0000182A                          1559  
0000182A                          1560  
0000182A                          1561  _NOP
0000182A  7E02                    1562      MOVE.L  #2,D7       ;data is not error
0000182C  14FC 0020               1563      MOVE.B  #' ',(A2)+      ;print spaces
00001830  14FC 0020               1564      MOVE.B  #' ',(A2)+      ;print spaces
00001834  14FC 0020               1565      MOVE.B  #' ',(A2)+      ;print spaces
00001838  14FC 0020               1566      MOVE.B  #' ',(A2)+      ;print spaces
0000183C  14FC 004E               1567      MOVE.B  #'N',(A2)+      ;print N
00001840  14FC 004F               1568      MOVE.B  #'O',(A2)+      ;print O
00001844  14FC 0050               1569      MOVE.B  #'P',(A2)+      ;print P
00001848  1A3C 0003               1570      MOVE.B  #3,D5           ;counter for output
0000184C  6000 228A               1571      BRA     printCode
00001850                          1572  
00001850                          1573  
00001850                          1574  
00001850                          1575  _RTS    
00001850  7E02                    1576      MOVE.L  #2,D7       ;data is not error
00001852  14FC 0020               1577      MOVE.B  #' ',(A2)+      ;print spaces
00001856  14FC 0020               1578      MOVE.B  #' ',(A2)+      ;print spaces
0000185A  14FC 0020               1579      MOVE.B  #' ',(A2)+      ;print spaces
0000185E  14FC 0020               1580      MOVE.B  #' ',(A2)+      ;print spaces
00001862  14FC 0052               1581      MOVE.B  #'R',(A2)+      ;print R
00001866  14FC 0054               1582      MOVE.B  #'T',(A2)+      ;print T
0000186A  14FC 0053               1583      MOVE.B  #'S',(A2)+      ;print S
0000186E  1A3C 0003               1584      MOVE.B  #3,D5           ;counter for output
00001872  6000 2264               1585      BRA     printCode
00001876                          1586  
00001876                          1587  
00001876                          1588  
00001876                          1589  _LEA    
00001876  7E02                    1590      MOVE.L  #2,D7       ;data is not error
00001878  14FC 0020               1591      MOVE.B  #' ',(A2)+      ;print spaces
0000187C  14FC 0020               1592      MOVE.B  #' ',(A2)+      ;print spaces
00001880  14FC 0020               1593      MOVE.B  #' ',(A2)+      ;print spaces
00001884  14FC 0020               1594      MOVE.B  #' ',(A2)+      ;print spaces
00001888  14FC 004C               1595      MOVE.B  #'L',(A2)+      ;print R
0000188C  14FC 0045               1596      MOVE.B  #'E',(A2)+      ;print T
00001890  14FC 0041               1597      MOVE.B  #'A',(A2)+      ;print S
00001894  14FC 0020               1598      MOVE.B  #' ',(A2)+      ;print spaces
00001898  14FC 0020               1599      MOVE.B  #' ',(A2)+      ;print spaces
0000189C  14FC 0020               1600      MOVE.B  #' ',(A2)+      ;print spaces
000018A0  14FC 0020               1601      MOVE.B  #' ',(A2)+      ;print spaces
000018A4  1A3C 0003               1602      MOVE.B  #3,D5           ;counter for output
000018A8                          1603  
000018A8  4EB8 156A               1604      JSR     get_3to5_bit
000018AC  4EB8 1552               1605      JSR     get_0to2_bit
000018B0                          1606  
000018B0                          1607  
000018B0  B43C 0007               1608      CMP.B   #7,D2
000018B4  6700 014A               1609      BEQ     immAbLEA
000018B8                          1610  
000018B8                          1611  desDecodeLEA
000018B8  14FC 002C               1612      MOVE.B  #',',(A2)+  comma between operands
000018BC                          1613  
000018BC  4DF8 1350               1614      LEA     modeTable,A6
000018C0  103C 0001               1615      MOVE.B  #1,D0
000018C4  C0FC 0008               1616      MULU    #8,D0       value adjusted for jumping
000018C8  4DF8 1350               1617      LEA     modeTable,A6 Load the table into A6
000018CC  4EB6 0000               1618      JSR     (A6,D0)     Jump to subroutine of value at D0
000018D0                          1619      
000018D0  4EB8 159E               1620      JSR     get_9to11_bit
000018D4                          1621  
000018D4  6000 2202               1622      BRA     printCode
000018D8                          1623  
000018D8                          1624  
000018D8                          1625  
000018D8                          1626  _JSR
000018D8  7E02                    1627      MOVE.L  #2,D7       ;data is not error
000018DA  14FC 0020               1628      MOVE.B  #' ',(A2)+      ;print spaces
000018DE  14FC 0020               1629      MOVE.B  #' ',(A2)+      ;print spaces
000018E2  14FC 0020               1630      MOVE.B  #' ',(A2)+      ;print spaces
000018E6  14FC 0020               1631      MOVE.B  #' ',(A2)+      ;print spaces
000018EA  14FC 004A               1632      MOVE.B  #'J',(A2)+      ;print J
000018EE  14FC 0053               1633      MOVE.B  #'S',(A2)+      ;print S
000018F2  14FC 0052               1634      MOVE.B  #'R',(A2)+      ;print R
000018F6  14FC 0020               1635      MOVE.B  #' ',(A2)+      ;print spaces
000018FA  14FC 0020               1636      MOVE.B  #' ',(A2)+      ;print spaces
000018FE  14FC 0020               1637      MOVE.B  #' ',(A2)+      ;print spaces
00001902  14FC 0020               1638      MOVE.B  #' ',(A2)+      ;print spaces
00001906  1A3C 0003               1639      MOVE.B  #3,D5           ;counter for output
0000190A  4EB8 156A               1640      JSR     get_3to5_bit
0000190E  4EB8 1552               1641      JSR     get_0to2_bit
00001912                          1642  
00001912                          1643  
00001912  B43C 0007               1644      CMP.B   #7,D2
00001916  6700 00D8               1645      BEQ     immAbJSR
0000191A  6000 21BC               1646      BRA     printCode
0000191E                          1647      
0000191E                          1648      
0000191E                          1649  
0000191E                          1650  
0000191E                          1651  
0000191E                          1652  
0000191E                          1653  clr_B       ;CLR.B
0000191E  1606                    1654      MOVE.B  D6,D3       ;copy data to D3
00001920  EB0B                    1655      LSL.B   #5,D3       ;shift d3 to clear
00001922  EA0B                    1656      LSR.B   #5,D3       ;shift back to bit 0-2
00001924  B63C 0004               1657      CMP.B   #%100,D3    ;compare to immediate data
00001928                          1658  
00001928                          1659      ;Print/store CLR.B here
00001928  14FC 0020               1660      MOVE.B  #' ',(A2)+
0000192C  14FC 0020               1661      MOVE.B  #' ',(A2)+
00001930  14FC 0020               1662      MOVE.B  #' ',(A2)+
00001934  14FC 0020               1663      MOVE.B  #' ',(A2)+
00001938  14FC 0043               1664      MOVE.B  #'C',(A2)+  ;print C
0000193C  14FC 004C               1665      MOVE.B  #'L',(A2)+  ;print L
00001940  14FC 0052               1666      MOVE.B  #'R',(A2)+  ;print R
00001944  14FC 002E               1667      MOVE.B  #'.',(A2)+  ;print .
00001948  14FC 0042               1668      MOVE.B  #'B',(A2)+  ;print B
0000194C  14FC 0020               1669      MOVE.B  #' ',(A2)+  ;print some spaces
00001950  14FC 0020               1670      MOVE.B  #' ',(A2)+
00001954  14FC 0020               1671      MOVE.B  #' ',(A2)+
00001958                          1672  
00001958                          1673      
00001958                          1674      *-get bit 3 to 5
00001958  4EB8 156A               1675      JSR get_3to5_bit
0000195C  4EB8 1552               1676      JSR get_0to2_bit
00001960                          1677  
00001960                          1678  
00001960  6000 2176               1679      BRA     printCode
00001964                          1680      
00001964                          1681      
00001964                          1682  clr_W       ;CLR.W
00001964  1606                    1683      MOVE.B  D6,D3       ;copy data to D3
00001966  EB0B                    1684      LSL.B   #5,D3       ;shift d3 to clear
00001968  EA0B                    1685      LSR.B   #5,D3       ;shift back to bit 0-2
0000196A  B63C 0004               1686      CMP.B   #%100,D3    ;compare to immediate data
0000196E                          1687  
0000196E                          1688      ;Print/store CLR.B here
0000196E  14FC 0020               1689      MOVE.B  #' ',(A2)+
00001972  14FC 0020               1690      MOVE.B  #' ',(A2)+
00001976  14FC 0020               1691      MOVE.B  #' ',(A2)+
0000197A  14FC 0020               1692      MOVE.B  #' ',(A2)+
0000197E  14FC 0043               1693      MOVE.B  #'C',(A2)+  ;print C
00001982  14FC 004C               1694      MOVE.B  #'L',(A2)+  ;print L
00001986  14FC 0052               1695      MOVE.B  #'R',(A2)+  ;print R
0000198A  14FC 002E               1696      MOVE.B  #'.',(A2)+  ;print .
0000198E  14FC 0057               1697      MOVE.B  #'W',(A2)+  ;print W
00001992  14FC 0020               1698      MOVE.B  #' ',(A2)+  ;print some spaces
00001996  14FC 0020               1699      MOVE.B  #' ',(A2)+
0000199A  14FC 0020               1700      MOVE.B  #' ',(A2)+
0000199E                          1701  
0000199E                          1702      
0000199E                          1703      *-get bit 3 to 5
0000199E  4EB8 156A               1704      JSR get_3to5_bit
000019A2  4EB8 1552               1705      JSR get_0to2_bit
000019A6                          1706  
000019A6  6000 2130               1707      BRA     printCode
000019AA                          1708      
000019AA                          1709  clr_L       ;CLR.L
000019AA  1606                    1710      MOVE.B  D6,D3       ;copy data to D3
000019AC  EB0B                    1711      LSL.B   #5,D3       ;shift d3 to clear
000019AE  EA0B                    1712      LSR.B   #5,D3       ;shift back to bit 0-2
000019B0  B63C 0004               1713      CMP.B   #%100,D3    ;compare to immediate data
000019B4                          1714  
000019B4                          1715      ;Print/store CLR.B here
000019B4  14FC 0020               1716      MOVE.B  #' ',(A2)+
000019B8  14FC 0020               1717      MOVE.B  #' ',(A2)+
000019BC  14FC 0020               1718      MOVE.B  #' ',(A2)+
000019C0  14FC 0020               1719      MOVE.B  #' ',(A2)+
000019C4  14FC 0043               1720      MOVE.B  #'C',(A2)+  ;print C
000019C8  14FC 004C               1721      MOVE.B  #'L',(A2)+  ;print L
000019CC  14FC 0052               1722      MOVE.B  #'R',(A2)+  ;print R
000019D0  14FC 002E               1723      MOVE.B  #'.',(A2)+  ;print .
000019D4  14FC 004C               1724      MOVE.B  #'L',(A2)+  ;print B
000019D8  14FC 0020               1725      MOVE.B  #' ',(A2)+  ;print some spaces
000019DC  14FC 0020               1726      MOVE.B  #' ',(A2)+
000019E0  14FC 0020               1727      MOVE.B  #' ',(A2)+
000019E4                          1728  
000019E4                          1729      
000019E4                          1730      *-get bit 3 to 5
000019E4  4EB8 156A               1731      JSR get_3to5_bit
000019E8  4EB8 1552               1732      JSR get_0to2_bit
000019EC  6000 20EA               1733      BRA     printCode
000019F0                          1734  
000019F0                          1735  immAbJSR
000019F0                          1736  
000019F0  4DF8 11A2               1737      LEA     immAbTable, A6
000019F4  C2FC 0008               1738      MULU    #8,D1
000019F8  4EB6 1000               1739      JSR     (A6,D1)
000019FC  6000 20DA               1740      BRA     printCode
00001A00                          1741  immAbLEA
00001A00                          1742  
00001A00  4DF8 11A2               1743      LEA     immAbTable, A6
00001A04  C2FC 0008               1744      MULU    #8,D1
00001A08  4EB6 1000               1745      JSR     (A6,D1)
00001A0C  6000 FEAA               1746      BRA     desDecodeLEA
00001A10                          1747  check_clr_or_moveM:
00001A10  4283                    1748      CLR.L   D3
00001A12  3606                    1749      MOVE.W  D6,D3
00001A14  C67C 0FF0               1750      AND.W   #$0FF0,D3
00001A18  EC4B                    1751      LSR.W   #6,D3
00001A1A  C67C 000F               1752      AND.W   #$000F,D3
00001A1E  4E75                    1753      RTS
00001A20                          1754  
00001A20                          1755  
00001A20                          1756  
00001A20                          1757  
00001A20                          1758  
00001A20                          1759  
00001A20                          1760  
00001A20                          1761  
00001A20                          1762  
00001A20                          1763  
00001A20                          1764  
00001A20                          1765  
00001A20                          1766  
00001A20                          1767  
00001A20                          1768  
00001A20                          1769  
00001A20                          1770  
00001A20                          1771  -------------------- end include --------------------
00001A20                          1772      INCLUDE 'op0110.x68'    BRA,Bcc(BCC,BLT,BGE)
00001A20                          1773  op0110      *BRA, Bcc(BCC,BLT,BGE)
00001A20                          1774  
00001A20                          1775  
00001A20                          1776  
00001A20                          1777  
00001A20  7E02                    1778      MOVE.L  #2,D7       ;data is not error
00001A22  14FC 0020               1779      MOVE.B  #' ',(A2)+      ;print spaces
00001A26  14FC 0020               1780      MOVE.B  #' ',(A2)+      ;print spaces
00001A2A  14FC 0020               1781      MOVE.B  #' ',(A2)+      ;print spaces
00001A2E  14FC 0020               1782      MOVE.B  #' ',(A2)+      ;print spaces
00001A32                          1783  
00001A32                          1784  
00001A32                          1785  
00001A32  3406                    1786      MOVE.W  D6,D2
00001A34  E94A                    1787      LSL.W   #4,D2
00001A36  E04A                    1788      LSR.W   #8,D2
00001A38  E84A                    1789      LSR.W   #4,D2
00001A3A  1002                    1790      MOVE.B  D2,D0
00001A3C  B07C 0000               1791      CMP.W   #0,D0
00001A40  6700 001A               1792      BEQ     _BRA
00001A44                          1793  
00001A44                          1794  
00001A44                          1795  
00001A44                          1796  
00001A44  B07C 0004               1797      CMP.W   #4,D0   ;see if it's a BCC
00001A48  6700 0022               1798      BEQ     _BCC
00001A4C                          1799  
00001A4C  B07C 000D               1800      CMP.W   #$D,D0   ;see if it's a BLT
00001A50  6700 002A               1801      BEQ     _BLT
00001A54                          1802  
00001A54  B07C 000C               1803      CMP.W   #$C,D0   ;see if it's a BGE
00001A58  6300 0032               1804      BLS     _BGE
00001A5C                          1805  
00001A5C                          1806  
00001A5C                          1807  
00001A5C                          1808  _BRA
00001A5C  14FC 0042               1809      MOVE.B  #'B',(A2)+      ;print B
00001A60  14FC 0052               1810      MOVE.B  #'R',(A2)+      ;print R
00001A64  14FC 0041               1811      MOVE.B  #'A',(A2)+      ;print A
00001A68  6000 0032               1812      BRA     displacementDecode
00001A6C                          1813  
00001A6C                          1814  
00001A6C                          1815  
00001A6C                          1816  _BCC
00001A6C  14FC 0042               1817      MOVE.B  #'B',(A2)+      ;print B
00001A70  14FC 0043               1818      MOVE.B  #'C',(A2)+      ;print C
00001A74  14FC 0043               1819      MOVE.B  #'C',(A2)+      ;print C
00001A78  6000 0022               1820      BRA     displacementDecode
00001A7C                          1821  
00001A7C                          1822  
00001A7C                          1823  
00001A7C                          1824  _BLT
00001A7C  14FC 0042               1825      MOVE.B  #'B',(A2)+      ;print B
00001A80  14FC 004C               1826      MOVE.B  #'L',(A2)+      ;print L
00001A84  14FC 0054               1827      MOVE.B  #'T',(A2)+      ;print T
00001A88  6000 0012               1828      BRA     displacementDecode
00001A8C                          1829  
00001A8C                          1830  
00001A8C                          1831  
00001A8C                          1832  _BGE
00001A8C  14FC 0042               1833      MOVE.B  #'B',(A2)+      ;print B
00001A90  14FC 0047               1834      MOVE.B  #'G',(A2)+      ;print G
00001A94  14FC 0045               1835      MOVE.B  #'E',(A2)+      ;print E
00001A98  6000 0002               1836      BRA     displacementDecode
00001A9C                          1837  
00001A9C                          1838  displacementDecode
00001A9C  14FC 0020               1839      MOVE.B  #' ',(A2)+      ;print spaces
00001AA0  14FC 0020               1840      MOVE.B  #' ',(A2)+      ;print spaces
00001AA4  14FC 0020               1841      MOVE.B  #' ',(A2)+      ;print spaces
00001AA8  14FC 0020               1842      MOVE.B  #' ',(A2)+      ;print spaces
00001AAC  14FC 0020               1843      MOVE.B  #' ',(A2)+      ;print spaces
00001AB0  1A3C 0003               1844      MOVE.B  #3,D5           ;counter for output
00001AB4                          1845  
00001AB4  4240                    1846      CLR     D0
00001AB6  1006                    1847      MOVE.B  D6,D0
00001AB8                          1848  
00001AB8  B03C 0000               1849      CMP.B   #$00, D0
00001ABC  6700 001E               1850      BEQ     _16_bitD
00001AC0                          1851  
00001AC0  B03C 00FF               1852      CMP.B   #$FF, D0
00001AC4  6700 002A               1853      BEQ     _32_bitD
00001AC8                          1854  
00001AC8                          1855      
00001AC8  14FC 0024               1856      MOVE.B  #'$',(A2)+
00001ACC  DAC0                    1857      ADDA    D0,A5
00001ACE  4284                    1858      CLR.L   D4
00001AD0  380D                    1859      MOVE.W  A5,D4
00001AD2  4EB9 00001AFE           1860      JSR     print_Address
00001AD8  6000 1FFE               1861      BRA     printCode
00001ADC                          1862      
00001ADC                          1863  
00001ADC                          1864  _16_bitD
00001ADC  2004                    1865      MOVE.L  D4,D0
00001ADE  E088                    1866      LSR.L   #8,D0
00001AE0  E088                    1867      LSR.L   #8,D0
00001AE2                          1868      *MULU    #8,D0
00001AE2                          1869      *MOVE.B  #'$',(A2)+
00001AE2  DAC0                    1870      ADDA    D0,A5
00001AE4  4284                    1871      CLR.L     D4
00001AE6  380D                    1872      MOVE.W  A5,D4
00001AE8  4EB8 11EA               1873      JSR     IA000
00001AEC  6000 1FEA               1874      BRA     printCode
00001AF0                          1875  
00001AF0                          1876  _32_bitD
00001AF0  2004                    1877      MOVE.L  D4,D0
00001AF2  4EB8 1252               1878      JSR     IA001
00001AF6  6000 1FE0               1879      BRA     printCode
00001AFA                          1880  
00001AFA                          1881  
00001AFA                          1882  
00001AFA  6000 1FDC               1883      BRA     printCode
00001AFE                          1884  
00001AFE                          1885  print_Address
00001AFE                          1886  
00001AFE  3600                    1887      MOVE.W  D0,D3
00001B00  E04B                    1888      LSR.W   #8,D3
00001B02  E84B                    1889      LSR.W   #4,D3
00001B04  C6FC 0008               1890      MULU.W  #8,D3
00001B08  4DF8 1472               1891      LEA     numTable,A6
00001B0C  4EB6 3000               1892      JSR     (A6,D3)
00001B10                          1893  
00001B10  4243                    1894      CLR     D3
00001B12  3600                    1895      MOVE.W  D0,D3
00001B14  E94B                    1896      LSL.W   #4,D3
00001B16  E04B                    1897      LSR.W   #8,D3
00001B18  E84B                    1898      LSR.W   #4,D3
00001B1A  C6FC 0008               1899      MULU.W  #8,D3
00001B1E  4DF8 1472               1900      LEA     numTable,A6
00001B22  4EB6 3000               1901      JSR     (A6,D3)
00001B26                          1902  
00001B26  4243                    1903      CLR     D3
00001B28  3600                    1904      MOVE.W  D0,D3
00001B2A  E14B                    1905      LSL.W   #8,D3
00001B2C  E04B                    1906      LSR.W   #8,D3
00001B2E  E84B                    1907      LSR.W   #4,D3
00001B30  C6FC 0008               1908      MULU.W  #8,D3
00001B34  4DF8 1472               1909      LEA     numTable,A6
00001B38  4EB6 3000               1910      JSR     (A6,D3)
00001B3C                          1911  
00001B3C  4243                    1912      CLR     D3
00001B3E  3600                    1913      MOVE.W  D0,D3
00001B40  E94B                    1914      LSL.W   #4,D3
00001B42  E14B                    1915      LSL.W   #8,D3
00001B44  E04B                    1916      LSR.W   #8,D3
00001B46  E84B                    1917      LSR.W   #4,D3
00001B48  C6FC 0008               1918      MULU.W  #8,D3
00001B4C  4DF8 1472               1919      LEA     numTable,A6
00001B50  4EB6 3000               1920      JSR     (A6,D3)
00001B54  4E75                    1921      RTS
00001B56                          1922  
00001B56                          1923  
00001B56                          1924  
00001B56                          1925      
00001B56                          1926  
00001B56                          1927  
00001B56                          1928  
00001B56                          1929  
00001B56                          1930  
00001B56                          1931  
00001B56                          1932  
00001B56                          1933  
00001B56                          1934  
00001B56                          1935  
00001B56                          1936  
00001B56                          1937  
00001B56                          1938  
00001B56                          1939  
00001B56                          1940  
00001B56                          1941  -------------------- end include --------------------
00001B56                          1942      INCLUDE 'op0001.x68'    MOVE.B MOVEA.B
00001B56                          1943  
00001B56                          1944  
00001B56                          1945  
00001B56                          1946  
00001B56                          1947  
00001B56                          1948  
00001B56                          1949  
00001B56                          1950  
00001B56                          1951  
00001B56                          1952  
00001B56                          1953  
00001B56                          1954  
00001B56                          1955  
00001B56                          1956  
00001B56                          1957  
00001B56                          1958  
00001B56                          1959  
00001B56                          1960  
00001B56                          1961  
00001B56                          1962  
00001B56                          1963  
00001B56                          1964  
00001B56                          1965  
00001B56                          1966  
00001B56                          1967  op0001
00001B56                          1968     
00001B56  14FC 0020               1969      MOVE.B  #' ',(A2)+      ;print spaces
00001B5A  14FC 0020               1970      MOVE.B  #' ',(A2)+      ;print spaces
00001B5E  14FC 0020               1971      MOVE.B  #' ',(A2)+      ;print spaces
00001B62  14FC 0020               1972      MOVE.B  #' ',(A2)+      ;print spaces
00001B66  14FC 004D               1973      MOVE.B  #'M',(A2)+      ;print M
00001B6A  14FC 004F               1974      MOVE.B  #'O',(A2)+      ;print O
00001B6E  14FC 0056               1975      MOVE.B  #'V',(A2)+      ;print V
00001B72  14FC 0045               1976      MOVE.B  #'E',(A2)+      PRINT  E
00001B76  14FC 002E               1977      MOVE.B  #'.',(A2)+
00001B7A  14FC 0042               1978      MOVE.B  #'B',(A2)+
00001B7E  14FC 0020               1979      MOVE.B  #' ',(A2)+
00001B82  14FC 0020               1980      MOVE.B  #' ',(A2)+
00001B86                          1981  
00001B86  4EB8 156A               1982      JSR     get_3to5_bit
00001B8A                          1983  
00001B8A  4EB8 1552               1984      JSR     get_0to2_bit
00001B8E                          1985  
00001B8E                          1986  
00001B8E  B43C 0007               1987      CMP.B   #7,D2
00001B92  6700 0012               1988      BEQ     immAb0001
00001B96                          1989  
00001B96                          1990  desDecode0001   
00001B96  14FC 002C               1991      MOVE.B  #',',(A2)+  comma between operands
00001B9A                          1992  
00001B9A  4EB8 1584               1993      JSR     get_6to8_bit
00001B9E                          1994  
00001B9E  4EB8 159E               1995      JSR     get_9to11_bit
00001BA2                          1996  
00001BA2                          1997  
00001BA2                          1998  
00001BA2                          1999  
00001BA2  6000 1F34               2000      BRA     printCode
00001BA6                          2001  
00001BA6                          2002  immAb0001
00001BA6                          2003  
00001BA6  4DF8 11A2               2004      LEA     immAbTable, A6
00001BAA  C2FC 0008               2005      MULU    #8,D1
00001BAE  4EB6 1000               2006      JSR     (A6,D1)
00001BB2  60E2                    2007      BRA     desDecode0001
00001BB4                          2008  
00001BB4                          2009  
00001BB4                          2010  
00001BB4                          2011  
00001BB4                          2012  
00001BB4                          2013  
00001BB4                          2014  
00001BB4                          2015  
00001BB4                          2016  
00001BB4                          2017  
00001BB4                          2018  -------------------- end include --------------------
00001BB4                          2019      INCLUDE 'op0011.x68'    MOVE.W, MOVEA.W
00001BB4                          2020  op0011
00001BB4                          2021  
00001BB4                          2022  
00001BB4                          2023  
00001BB4                          2024  
00001BB4  7E02                    2025      MOVE.L  #2,D7       ;data is not error
00001BB6  14FC 0020               2026      MOVE.B  #' ',(A2)+      ;print spaces
00001BBA  14FC 0020               2027      MOVE.B  #' ',(A2)+      ;print spaces
00001BBE  14FC 0020               2028      MOVE.B  #' ',(A2)+      ;print spaces
00001BC2  14FC 0020               2029      MOVE.B  #' ',(A2)+      ;print spaces
00001BC6  4242                    2030      CLR     D2
00001BC8  4241                    2031      CLR     D1
00001BCA  3406                    2032      MOVE.W  D6,D2       MOVE the original machine code to D2 to play with
00001BCC  EF4A                    2033      LSL.W   #7,D2       BIT* **** **** 0000
00001BCE  E04A                    2034      LSR.W   #8,D2       0000 0000 BIT* ****
00001BD0  EA4A                    2035      LSR.W   #5,D2       0000 0000 0000 0BIT
00001BD2  B43C 0001               2036      CMP.B   #1,D2
00001BD6  6700 0026               2037      BEQ     MoveA_W
00001BDA  6600 0002               2038      BNE     Move_W
00001BDE                          2039  
00001BDE                          2040  Move_W          
00001BDE  14FC 004D               2041      MOVE.B  #'M',(A2)+      ;print M
00001BE2  14FC 004F               2042      MOVE.B  #'O',(A2)+      ;print O
00001BE6  14FC 0056               2043      MOVE.B  #'V',(A2)+      ;print V
00001BEA  14FC 0045               2044      MOVE.B  #'E',(A2)+      PRINT  E
00001BEE  14FC 002E               2045      MOVE.B  #'.',(A2)+
00001BF2  14FC 0057               2046      MOVE.B  #'W',(A2)+
00001BF6  14FC 0020               2047      MOVE.B  #' ',(A2)+
00001BFA  6000 0022               2048      BRA     decode0011
00001BFE                          2049  
00001BFE                          2050  MoveA_W
00001BFE  14FC 004D               2051      MOVE.B  #'M',(A2)+      ;print M
00001C02  14FC 004F               2052      MOVE.B  #'O',(A2)+      ;print O
00001C06  14FC 0056               2053      MOVE.B  #'V',(A2)+      ;print V
00001C0A  14FC 0045               2054      MOVE.B  #'E',(A2)+      PRINT  E
00001C0E  14FC 0041               2055      MOVE.B  #'A',(A2)+      PRINT  E
00001C12  14FC 002E               2056      MOVE.B  #'.',(A2)+
00001C16  14FC 0057               2057      MOVE.B  #'W',(A2)+
00001C1A  6000 0002               2058      BRA     decode0011
00001C1E                          2059  
00001C1E                          2060  decode0011
00001C1E  14FC 0020               2061      MOVE.B  #' ',(A2)+
00001C22                          2062  
00001C22  4EB8 156A               2063      JSR     get_3to5_bit
00001C26                          2064  
00001C26  4EB8 1552               2065      JSR     get_0to2_bit
00001C2A                          2066  
00001C2A                          2067  
00001C2A  B43C 0007               2068      CMP.B   #7,D2
00001C2E  6700 0012               2069      BEQ     immAb0011
00001C32                          2070  
00001C32                          2071  desDecode0011   
00001C32  14FC 002C               2072      MOVE.B  #',',(A2)+  comma between operands
00001C36                          2073  
00001C36  4EB8 1584               2074      JSR     get_6to8_bit
00001C3A                          2075  
00001C3A  4EB8 159E               2076      JSR     get_9to11_bit
00001C3E                          2077  
00001C3E                          2078  
00001C3E                          2079  
00001C3E                          2080  
00001C3E  6000 1E98               2081      BRA     printCode
00001C42                          2082  
00001C42                          2083  immAb0011
00001C42                          2084  
00001C42  B27C 0004               2085      CMP     #4,D1      if immediate data
00001C46  6700 0012               2086      BEQ     adjustimmAb0011
00001C4A                          2087  immAbJump0011            
00001C4A  4DF8 11A2               2088      LEA     immAbTable, A6
00001C4E  C2FC 0008               2089      MULU    #8,D1
00001C52  4EB6 1000               2090      JSR     (A6,D1)
00001C56  6000 1E80               2091      BRA     printCode
00001C5A                          2092  adjustimmAb0011
00001C5A  4241                    2093      CLR     D1
00001C5C  123C 0003               2094      MOVE.B  #3,D1         immdiateData WORD always
00001C60  60E8                    2095      BRA     immAbJump0011
00001C62                          2096  
00001C62                          2097  
00001C62                          2098  
00001C62                          2099  
00001C62                          2100  
00001C62                          2101  
00001C62                          2102  
00001C62                          2103  
00001C62                          2104  
00001C62                          2105  -------------------- end include --------------------
00001C62                          2106      INCLUDE 'op0010.x68'    MOVE.L, MOVEA.L
00001C62                          2107  op0010
00001C62                          2108  
00001C62                          2109  
00001C62                          2110  
00001C62                          2111  
00001C62  7E02                    2112      MOVE.L  #2,D7       ;data is not error
00001C64  14FC 0020               2113      MOVE.B  #' ',(A2)+      ;print spaces
00001C68  14FC 0020               2114      MOVE.B  #' ',(A2)+      ;print spaces
00001C6C  14FC 0020               2115      MOVE.B  #' ',(A2)+      ;print spaces
00001C70  14FC 0020               2116      MOVE.B  #' ',(A2)+      ;print spaces
00001C74  4242                    2117      CLR     D2
00001C76  4241                    2118      CLR     D1
00001C78  3406                    2119      MOVE.W  D6,D2       MOVE the original machine code to D2 to play with
00001C7A  EF4A                    2120      LSL.W   #7,D2       BIT* **** **** 0000
00001C7C  E04A                    2121      LSR.W   #8,D2       0000 0000 BIT* ****
00001C7E  EA4A                    2122      LSR.W   #5,D2       0000 0000 0000 0BIT
00001C80  B43C 0001               2123      CMP.B   #1,D2
00001C84  6700 0026               2124      BEQ     MoveA_L
00001C88  6600 0002               2125      BNE     Move_L
00001C8C                          2126  
00001C8C                          2127  Move_L
00001C8C  14FC 004D               2128      MOVE.B  #'M',(A2)+      ;print M
00001C90  14FC 004F               2129      MOVE.B  #'O',(A2)+      ;print O
00001C94  14FC 0056               2130      MOVE.B  #'V',(A2)+      ;print V
00001C98  14FC 0045               2131      MOVE.B  #'E',(A2)+      PRINT  E
00001C9C  14FC 002E               2132      MOVE.B  #'.',(A2)+
00001CA0  14FC 004C               2133      MOVE.B  #'L',(A2)+
00001CA4  14FC 0020               2134      MOVE.B  #' ',(A2)+
00001CA8  6000 0022               2135      BRA     decode0010
00001CAC                          2136  
00001CAC                          2137  MoveA_L
00001CAC  14FC 004D               2138      MOVE.B  #'M',(A2)+      ;print M
00001CB0  14FC 004F               2139      MOVE.B  #'O',(A2)+      ;print O
00001CB4  14FC 0056               2140      MOVE.B  #'V',(A2)+      ;print V
00001CB8  14FC 0045               2141      MOVE.B  #'E',(A2)+      PRINT  E
00001CBC  14FC 0041               2142      MOVE.B  #'A',(A2)+      PRINT  E
00001CC0  14FC 002E               2143      MOVE.B  #'.',(A2)+
00001CC4  14FC 004C               2144      MOVE.B  #'L',(A2)+
00001CC8  6000 0002               2145      BRA     decode0010
00001CCC                          2146  
00001CCC                          2147  decode0010
00001CCC  14FC 0020               2148      MOVE.B  #' ',(A2)+
00001CD0                          2149  
00001CD0  4EB8 156A               2150      JSR     get_3to5_bit
00001CD4                          2151  
00001CD4  4EB8 1552               2152      JSR     get_0to2_bit
00001CD8                          2153  
00001CD8                          2154  
00001CD8  B43C 0007               2155      CMP.B   #7,D2
00001CDC  6700 0012               2156      BEQ     immAb0010
00001CE0                          2157  
00001CE0                          2158  desDecode0010   
00001CE0  14FC 002C               2159      MOVE.B  #',',(A2)+  comma between operands
00001CE4                          2160  
00001CE4  4EB8 1584               2161      JSR     get_6to8_bit
00001CE8                          2162  
00001CE8  4EB8 159E               2163      JSR     get_9to11_bit
00001CEC                          2164  
00001CEC                          2165  
00001CEC                          2166  
00001CEC                          2167  
00001CEC  6000 1DEA               2168      BRA     printCode
00001CF0                          2169  
00001CF0                          2170  immAb0010
00001CF0                          2171  
00001CF0  B27C 0004               2172      CMP     #4,D1      if immediate data
00001CF4  6700 0012               2173      BEQ     adjustimmAb0010
00001CF8                          2174  immAbJump0010            
00001CF8  4DF8 11A2               2175      LEA     immAbTable, A6
00001CFC  C2FC 0008               2176      MULU    #8,D1
00001D00  4EB6 1000               2177      JSR     (A6,D1)
00001D04  6000 1DD2               2178      BRA     printCode
00001D08                          2179  adjustimmAb0010
00001D08  4241                    2180      CLR     D1
00001D0A  123C 0002               2181      MOVE.B  #2,D1         immdiateData Long always
00001D0E  60E8                    2182      BRA     immAbJump0010
00001D10                          2183  
00001D10                          2184  
00001D10                          2185  
00001D10                          2186  
00001D10                          2187  
00001D10                          2188  
00001D10                          2189  
00001D10                          2190  
00001D10                          2191  
00001D10                          2192  
00001D10                          2193  -------------------- end include --------------------
00001D10                          2194  
00001D10                          2195      INCLUDE 'op1101.x68'    ADD,ADDA
00001D10                          2196  op1101 
00001D10                          2197      ;ADD, ADDA
00001D10                          2198  
00001D10                          2199      ; we need to determine what its size is (B,W,L) putting the data in D6
00001D10  4EB8 1672               2200      JSR   WordOrLong ; WordOrLong decodes the OPMODE field and stores the output into D3 where
00001D14                          2201      ; we use to decode and branch
00001D14                          2202      *-now D3 contains the OPMODE FIELD telling us wether this is
00001D14                          2203      *-a LONG or a WORD
00001D14  14FC 0020               2204      MOVE.B  #' ',(A2)+
00001D18  14FC 0020               2205      MOVE.B  #' ',(A2)+
00001D1C  14FC 0020               2206      MOVE.B  #' ',(A2)+
00001D20  14FC 0020               2207      MOVE.B  #' ',(A2)+
00001D24                          2208  
00001D24                          2209      *-now we need to decipher if its any of the adds
00001D24  B63C 0000               2210      CMP.B   #hex_0,D3   is this ADD.B
00001D28  6700 003A               2211      BEQ add_B           ;<EA> -> Dn
00001D2C                          2212  
00001D2C  B63C 0001               2213      CMP.B   #hex_1,D3   is it ADD.W
00001D30  6700 004E               2214      BEQ add_W       ;<EA> ->Dn
00001D34                          2215  
00001D34  B63C 0002               2216      CMP.B   #hex_2,D3   is it ADD.L
00001D38  6700 0062               2217      BEQ add_L ;<EA> ->Dn
00001D3C                          2218      
00001D3C  B63C 0003               2219      CMP.B   #hex_3,D3
00001D40  6700 0174               2220      BEQ adda_W
00001D44                          2221      
00001D44  B63C 0004               2222      CMP.B   #hex_4,D3
00001D48  6700 00C2               2223      BEQ add_B_EA Dn -> EA
00001D4C                          2224      
00001D4C  B63C 0005               2225      CMP.B   #hex_5,D3
00001D50  6700 00D6               2226      BEQ add_W_EA Dn ->EA
00001D54                          2227      
00001D54                          2228  
00001D54  B63C 0006               2229      CMP.B   #hex_6,D3
00001D58  6700 00EA               2230      BEQ add_L_EA Dn - >EA
00001D5C                          2231  
00001D5C  B63C 0007               2232      CMP.B   #hex_7,D3
00001D60  6700 0174               2233      BEQ adda_L
00001D64                          2234  
00001D64                          2235  
00001D64                          2236  
00001D64                          2237  add_B
00001D64  14FC 0041               2238      MOVE.B  #'A',(A2)+
00001D68  14FC 0044               2239      MOVE.B  #'D',(A2)+
00001D6C  14FC 0044               2240      MOVE.B  #'D',(A2)+
00001D70  14FC 002E               2241      MOVE.B  #'.',(A2)+
00001D74  14FC 0042               2242      MOVE.B  #'B',(A2)+
00001D78  1E3C 0000               2243      MOVE.B  #0,D7           Byte Size
00001D7C  6000 003A               2244      BRA     decodeAddEADn
00001D80                          2245  
00001D80                          2246  add_W   
00001D80  14FC 0041               2247      MOVE.B  #'A',(A2)+
00001D84  14FC 0044               2248      MOVE.B  #'D',(A2)+
00001D88  14FC 0044               2249      MOVE.B  #'D',(A2)+
00001D8C  14FC 002E               2250      MOVE.B  #'.',(A2)+
00001D90  14FC 0057               2251      MOVE.B  #'W',(A2)+
00001D94  1E3C 0001               2252      MOVE.B  #1,D7           Word Size
00001D98  6000 001E               2253      BRA     decodeAddEADn
00001D9C                          2254  
00001D9C                          2255  add_L   
00001D9C  14FC 0041               2256      MOVE.B  #'A',(A2)+
00001DA0  14FC 0044               2257      MOVE.B  #'D',(A2)+
00001DA4  14FC 0044               2258      MOVE.B  #'D',(A2)+
00001DA8  14FC 002E               2259      MOVE.B  #'.',(A2)+
00001DAC  14FC 004C               2260      MOVE.B  #'L',(A2)+
00001DB0  1E3C 0002               2261      MOVE.B  #2,D7           Long Size
00001DB4  6000 0002               2262      BRA     decodeAddEADn
00001DB8                          2263  
00001DB8                          2264  decodeAddEADn
00001DB8  14FC 0020               2265      MOVE.B  #' ',(A2)+
00001DBC  14FC 0020               2266      MOVE.B  #' ',(A2)+
00001DC0  14FC 0020               2267      MOVE.B  #' ',(A2)+
00001DC4  14FC 0020               2268      MOVE.B  #' ',(A2)+
00001DC8                          2269  
00001DC8  4EB8 156A               2270      JSR     get_3to5_bit
00001DCC                          2271  
00001DCC  4EB8 1552               2272      JSR     get_0to2_bit
00001DD0                          2273  
00001DD0                          2274  
00001DD0  B43C 0007               2275      CMP.B   #7,D2
00001DD4  6700 FF1A               2276      BEQ     immAb0010
00001DD8                          2277  
00001DD8                          2278  desDecodeAddEADn   
00001DD8  14FC 002C               2279      MOVE.B  #',',(A2)+  comma between operands
00001DDC                          2280  
00001DDC  4241                    2281      CLR     D1
00001DDE  123C 0000               2282      MOVE.B  #0,D1           Always Dn format
00001DE2  4DF8 1350               2283      LEA     modeTable,A6
00001DE6  4EB6 1000               2284      JSR     (A6,D1)
00001DEA                          2285  
00001DEA  4EB8 159E               2286      JSR     get_9to11_bit
00001DEE                          2287  
00001DEE                          2288  
00001DEE                          2289  
00001DEE                          2290  
00001DEE  6000 1CE8               2291      BRA     printCode
00001DF2                          2292  
00001DF2                          2293  immAbAddEADn
00001DF2                          2294  
00001DF2  B27C 0004               2295      CMP     #4,D1      if immediate data
00001DF6  6700 0010               2296      BEQ     adjustimmAbAddEADn
00001DFA                          2297  immAbJumpAddEADn
00001DFA  4DF8 11A2               2298      LEA     immAbTable, A6
00001DFE  C2FC 0008               2299      MULU    #8,D1
00001E02  4EB6 1000               2300      JSR     (A6,D1)
00001E06  60D0                    2301      BRA     desDecodeAddEADn
00001E08                          2302  adjustimmAbAddEADn
00001E08  9207                    2303      SUB.B   D7,D1
00001E0A  60EE                    2304      BRA     immAbJumpAddEADn
00001E0C                          2305  
00001E0C                          2306  
00001E0C                          2307  
00001E0C                          2308  
00001E0C                          2309  
00001E0C                          2310  add_B_EA
00001E0C  14FC 0041               2311      MOVE.B  #'A',(A2)+
00001E10  14FC 0044               2312      MOVE.B  #'D',(A2)+
00001E14  14FC 0044               2313      MOVE.B  #'D',(A2)+
00001E18  14FC 002E               2314      MOVE.B  #'.',(A2)+
00001E1C  14FC 0042               2315      MOVE.B  #'B',(A2)+
00001E20  1E3C 0000               2316      MOVE.B  #0,D7           Byte Size
00001E24  6000 003A               2317      BRA     decodeAddDnEA
00001E28                          2318  
00001E28                          2319  add_W_EA   
00001E28  14FC 0041               2320      MOVE.B  #'A',(A2)+
00001E2C  14FC 0044               2321      MOVE.B  #'D',(A2)+
00001E30  14FC 0044               2322      MOVE.B  #'D',(A2)+
00001E34  14FC 002E               2323      MOVE.B  #'.',(A2)+
00001E38  14FC 0057               2324      MOVE.B  #'W',(A2)+
00001E3C  1E3C 0001               2325      MOVE.B  #1,D7           Word Size
00001E40  6000 001E               2326      BRA     decodeAddDnEA
00001E44                          2327  
00001E44                          2328  add_L_EA   
00001E44  14FC 0041               2329      MOVE.B  #'A',(A2)+
00001E48  14FC 0044               2330      MOVE.B  #'D',(A2)+
00001E4C  14FC 0044               2331      MOVE.B  #'D',(A2)+
00001E50  14FC 002E               2332      MOVE.B  #'.',(A2)+
00001E54  14FC 004C               2333      MOVE.B  #'L',(A2)+
00001E58  1E3C 0002               2334      MOVE.B  #2,D7           Long Size
00001E5C  6000 0002               2335      BRA     decodeAddDnEA
00001E60                          2336  
00001E60                          2337  decodeAddDnEA
00001E60  14FC 0020               2338      MOVE.B  #' ',(A2)+
00001E64  14FC 0020               2339      MOVE.B  #' ',(A2)+
00001E68  14FC 0020               2340      MOVE.B  #' ',(A2)+
00001E6C  14FC 0020               2341      MOVE.B  #' ',(A2)+
00001E70                          2342  
00001E70  4241                    2343      CLR     D1
00001E72  123C 0000               2344      MOVE.B  #0,D1           Always Dn format
00001E76  4DF8 1350               2345      LEA     modeTable,A6
00001E7A  4EB6 1000               2346      JSR     (A6,D1)
00001E7E                          2347  
00001E7E  4EB8 159E               2348      JSR     get_9to11_bit
00001E82                          2349  
00001E82                          2350  
00001E82  B43C 0007               2351      CMP.B   #7,D2
00001E86  6700 FE68               2352      BEQ     immAb0010
00001E8A                          2353  
00001E8A  14FC 002C               2354      MOVE.B  #',',(A2)+  comma between operands
00001E8E                          2355  
00001E8E  4EB8 156A               2356      JSR     get_3to5_bit
00001E92                          2357  
00001E92  4EB8 1552               2358      JSR     get_0to2_bit
00001E96                          2359  
00001E96                          2360  
00001E96                          2361  
00001E96                          2362  
00001E96  6000 1C40               2363      BRA     printCode
00001E9A                          2364  
00001E9A                          2365  immAbAddDnEA
00001E9A                          2366  
00001E9A  B27C 0004               2367      CMP     #4,D1      if immediate data
00001E9E  6700 0012               2368      BEQ     adjustimmAbAddDnEA
00001EA2                          2369  immAbJumpAddDnEA
00001EA2  4DF8 11A2               2370      LEA     immAbTable, A6
00001EA6  C2FC 0008               2371      MULU    #8,D1
00001EAA  4EB6 1000               2372      JSR     (A6,D1)
00001EAE  6000 1C28               2373      BRA     printCode
00001EB2                          2374  adjustimmAbAddDnEA
00001EB2  9207                    2375      SUB.B   D7,D1
00001EB4  60EC                    2376      BRA     immAbJumpAddDnEA
00001EB6                          2377  
00001EB6                          2378  
00001EB6                          2379  
00001EB6                          2380  
00001EB6                          2381  
00001EB6                          2382  adda_W  
00001EB6  14FC 0041               2383      MOVE.B  #'A',(A2)+
00001EBA  14FC 0044               2384      MOVE.B  #'D',(A2)+
00001EBE  14FC 0044               2385      MOVE.B  #'D',(A2)+
00001EC2  14FC 0041               2386      MOVE.B  #'A',(A2)+
00001EC6  14FC 002E               2387      MOVE.B  #'.',(A2)+
00001ECA  14FC 0057               2388      MOVE.B  #'W',(A2)+
00001ECE  1E3C 0001               2389      MOVE.B  #1,D7           Word Size
00001ED2  6000 0022               2390      BRA     decodeAdda
00001ED6                          2391  
00001ED6                          2392  adda_L  
00001ED6  14FC 0041               2393      MOVE.B  #'A',(A2)+
00001EDA  14FC 0044               2394      MOVE.B  #'D',(A2)+
00001EDE  14FC 0044               2395      MOVE.B  #'D',(A2)+
00001EE2  14FC 0041               2396      MOVE.B  #'A',(A2)+
00001EE6  14FC 002E               2397      MOVE.B  #'.',(A2)+
00001EEA  14FC 004C               2398      MOVE.B  #'L',(A2)+
00001EEE  1E3C 0002               2399      MOVE.B  #2,D7           Long Size
00001EF2  6000 0002               2400      BRA     decodeAdda
00001EF6                          2401  
00001EF6                          2402  decodeAdda
00001EF6  14FC 0020               2403      MOVE.B  #' ',(A2)+
00001EFA  14FC 0020               2404      MOVE.B  #' ',(A2)+
00001EFE  14FC 0020               2405      MOVE.B  #' ',(A2)+
00001F02  14FC 0020               2406      MOVE.B  #' ',(A2)+
00001F06                          2407  
00001F06  4EB8 156A               2408      JSR     get_3to5_bit
00001F0A                          2409  
00001F0A  4EB8 1552               2410      JSR     get_0to2_bit
00001F0E                          2411  
00001F0E                          2412  
00001F0E  B43C 0007               2413      CMP.B   #7,D2
00001F12  6700 001C               2414      BEQ     immAbAdda
00001F16                          2415  
00001F16                          2416  desdecodeAdda   
00001F16  14FC 002C               2417      MOVE.B  #',',(A2)+  comma between operands
00001F1A                          2418  
00001F1A  4241                    2419      CLR     D1
00001F1C  123C 0008               2420      MOVE.B  #8,D1           Always An format
00001F20  4DF8 1350               2421      LEA     modeTable,A6
00001F24  4EB6 1000               2422      JSR     (A6,D1)
00001F28                          2423  
00001F28  4EB8 159E               2424      JSR     get_9to11_bit
00001F2C                          2425  
00001F2C                          2426  
00001F2C                          2427  
00001F2C                          2428  
00001F2C  6000 1BAA               2429      BRA     printCode
00001F30                          2430  
00001F30                          2431  immAbAdda
00001F30                          2432  
00001F30  B27C 0004               2433      CMP     #4,D1      if immediate data
00001F34  6700 0010               2434      BEQ     adjustimmAbAdda
00001F38                          2435  immAbJumpAdda
00001F38  4DF8 11A2               2436      LEA     immAbTable, A6
00001F3C  C2FC 0008               2437      MULU    #8,D1
00001F40  4EB6 1000               2438      JSR     (A6,D1)
00001F44  60D0                    2439      BRA     desdecodeAdda
00001F46                          2440  adjustimmAbAdda
00001F46  9207                    2441      SUB.B   D7,D1
00001F48  60EE                    2442      BRA     immAbJumpAdda
00001F4A                          2443  
00001F4A                          2444  
00001F4A                          2445  
00001F4A                          2446  
00001F4A                          2447  
00001F4A                          2448  
00001F4A                          2449  
00001F4A                          2450  
00001F4A                          2451  
00001F4A                          2452  
00001F4A                          2453  
00001F4A                          2454  
00001F4A                          2455  
00001F4A                          2456  
00001F4A                          2457  
00001F4A                          2458  
00001F4A                          2459  
00001F4A                          2460  
00001F4A                          2461  
00001F4A                          2462  
00001F4A                          2463  
00001F4A                          2464  
00001F4A                          2465  -------------------- end include --------------------
00001F4A                          2466      INCLUDE 'op1001.x68'    SUB, SUBA
00001F4A                          2467  op1001
00001F4A                          2468  
00001F4A                          2469  
00001F4A                          2470      
00001F4A                          2471      ; we need to determine what its size is (B,W,L) putting the data in D6
00001F4A  4EB8 1672               2472      JSR   WordOrLong ; WordOrLong decodes the OPMODE field and stores the output into D3 where
00001F4E                          2473      ; we use to decode and branch
00001F4E                          2474      *-now D3 contains the OPMODE FIELD telling us wether this is
00001F4E                          2475      *-a LONG or a WORD
00001F4E  14FC 0020               2476      MOVE.B  #' ',(A2)+
00001F52  14FC 0020               2477      MOVE.B  #' ',(A2)+
00001F56  14FC 0020               2478      MOVE.B  #' ',(A2)+
00001F5A  14FC 0020               2479      MOVE.B  #' ',(A2)+
00001F5E                          2480      *-now we need to decipher if its any of the subs
00001F5E  B63C 0000               2481      CMP.B   #hex_0,D3 is this SUB.B
00001F62  6700 002A               2482      BEQ sub_B   ;<EA> -> Dn
00001F66                          2483      
00001F66  B63C 0001               2484      CMP.B   #hex_1,D3   is it SUB.W
00001F6A  6700 003E               2485      BEQ sub_W ;<EA> ->Dn
00001F6E                          2486      
00001F6E  B63C 0002               2487      CMP.B   #hex_2,D3   is it SUB.L
00001F72  6700 0052               2488      BEQ sub_L ;<EA> ->Dn
00001F76                          2489      
00001F76                          2490  
00001F76                          2491  
00001F76                          2492  
00001F76  B63C 0004               2493      CMP.B   #hex_4,D3
00001F7A  6700 00BA               2494      BEQ sub_B_EA Dn -> EA
00001F7E                          2495      
00001F7E  B63C 0005               2496      CMP.B   #hex_5,D3
00001F82  6700 00CE               2497      BEQ sub_W_EA Dn ->EA
00001F86                          2498      
00001F86                          2499      
00001F86  B63C 0006               2500      CMP.B   #hex_6,D3
00001F8A  6700 00E2               2501      BEQ sub_L_EA Dn - >EA
00001F8E                          2502  
00001F8E                          2503  
00001F8E                          2504  
00001F8E                          2505  
00001F8E                          2506  
00001F8E                          2507  
00001F8E                          2508  sub_B
00001F8E  14FC 0053               2509      MOVE.B  #'S',(A2)+
00001F92  14FC 0055               2510      MOVE.B  #'U',(A2)+
00001F96  14FC 0042               2511      MOVE.B  #'B',(A2)+
00001F9A  14FC 002E               2512      MOVE.B  #'.',(A2)+
00001F9E  14FC 0042               2513      MOVE.B  #'B',(A2)+
00001FA2  1E3C 0000               2514      MOVE.B  #0,D7           Byte Size
00001FA6  6000 003A               2515      BRA     decodeSubEADn
00001FAA                          2516  
00001FAA                          2517  sub_W   
00001FAA  14FC 0053               2518      MOVE.B  #'S',(A2)+
00001FAE  14FC 0055               2519      MOVE.B  #'U',(A2)+
00001FB2  14FC 0042               2520      MOVE.B  #'B',(A2)+
00001FB6  14FC 002E               2521      MOVE.B  #'.',(A2)+
00001FBA  14FC 0057               2522      MOVE.B  #'W',(A2)+
00001FBE  1E3C 0001               2523      MOVE.B  #1,D7           Word Size
00001FC2  6000 001E               2524      BRA     decodeSubEADn
00001FC6                          2525  
00001FC6                          2526  sub_L   
00001FC6  14FC 0053               2527      MOVE.B  #'S',(A2)+
00001FCA  14FC 0055               2528      MOVE.B  #'U',(A2)+
00001FCE  14FC 0042               2529      MOVE.B  #'B',(A2)+
00001FD2  14FC 002E               2530      MOVE.B  #'.',(A2)+
00001FD6  14FC 004C               2531      MOVE.B  #'L',(A2)+
00001FDA  1E3C 0002               2532      MOVE.B  #2,D7           Word Size
00001FDE  6000 0002               2533      BRA     decodeSubEADn
00001FE2                          2534  
00001FE2                          2535  decodeSubEADn
00001FE2  14FC 0020               2536      MOVE.B  #' ',(A2)+
00001FE6  14FC 0020               2537      MOVE.B  #' ',(A2)+
00001FEA  14FC 0020               2538      MOVE.B  #' ',(A2)+
00001FEE  14FC 0020               2539      MOVE.B  #' ',(A2)+
00001FF2                          2540  
00001FF2  4EB8 156A               2541      JSR     get_3to5_bit
00001FF6                          2542  
00001FF6  4EB8 1552               2543      JSR     get_0to2_bit
00001FFA                          2544  
00001FFA                          2545  
00001FFA  B43C 0007               2546      CMP.B   #7,D2
00001FFE  6700 FCF0               2547      BEQ     immAb0010
00002002                          2548  
00002002                          2549  desDecodeSubEADn   
00002002  14FC 002C               2550      MOVE.B  #',',(A2)+  comma between operands
00002006                          2551  
00002006  4241                    2552      CLR     D1
00002008  123C 0000               2553      MOVE.B  #0,D1           Always Dn format
0000200C  4DF8 1350               2554      LEA     modeTable,A6
00002010  4EB6 1000               2555      JSR     (A6,D1)
00002014                          2556  
00002014  4EB8 159E               2557      JSR     get_9to11_bit
00002018                          2558  
00002018                          2559  
00002018                          2560  
00002018                          2561  
00002018  6000 1ABE               2562      BRA     printCode
0000201C                          2563  
0000201C                          2564  immAbSubEADn
0000201C                          2565  
0000201C  B27C 0004               2566      CMP     #4,D1      if immediate data
00002020  6700 0010               2567      BEQ     adjustimmAbSubEADn
00002024                          2568  immAbJumpSubEADn
00002024  4DF8 11A2               2569      LEA     immAbTable, A6
00002028  C2FC 0008               2570      MULU    #8,D1
0000202C  4EB6 1000               2571      JSR     (A6,D1)
00002030  60D0                    2572      BRA     desDecodeSubEADn
00002032                          2573  adjustimmAbSubEADn
00002032  9207                    2574      SUB.B   D7,D1
00002034  60EE                    2575      BRA     immAbJumpSubEADn
00002036                          2576  
00002036                          2577  
00002036                          2578  
00002036                          2579  
00002036                          2580  
00002036                          2581  sub_B_EA
00002036  14FC 0053               2582      MOVE.B  #'S',(A2)+
0000203A  14FC 0055               2583      MOVE.B  #'U',(A2)+
0000203E  14FC 0042               2584      MOVE.B  #'B',(A2)+
00002042  14FC 002E               2585      MOVE.B  #'.',(A2)+
00002046  14FC 0042               2586      MOVE.B  #'B',(A2)+
0000204A  1E3C 0000               2587      MOVE.B  #0,D7           Byte Size
0000204E  6000 003A               2588      BRA     decodeSubDnEA
00002052                          2589  
00002052                          2590  sub_W_EA   
00002052  14FC 0053               2591      MOVE.B  #'S',(A2)+
00002056  14FC 0055               2592      MOVE.B  #'U',(A2)+
0000205A  14FC 0042               2593      MOVE.B  #'B',(A2)+
0000205E  14FC 002E               2594      MOVE.B  #'.',(A2)+
00002062  14FC 0057               2595      MOVE.B  #'W',(A2)+
00002066  1E3C 0001               2596      MOVE.B  #1,D7           Word Size
0000206A  6000 001E               2597      BRA     decodeSubDnEA
0000206E                          2598  
0000206E                          2599  sub_L_EA   
0000206E  14FC 0053               2600      MOVE.B  #'S',(A2)+
00002072  14FC 0055               2601      MOVE.B  #'U',(A2)+
00002076  14FC 0042               2602      MOVE.B  #'B',(A2)+
0000207A  14FC 002E               2603      MOVE.B  #'.',(A2)+
0000207E  14FC 004C               2604      MOVE.B  #'L',(A2)+
00002082  1E3C 0002               2605      MOVE.B  #2,D7           Word Size
00002086  6000 0002               2606      BRA     decodeSubDnEA
0000208A                          2607  
0000208A                          2608  decodeSubDnEA
0000208A  14FC 0020               2609      MOVE.B  #' ',(A2)+
0000208E  14FC 0020               2610      MOVE.B  #' ',(A2)+
00002092  14FC 0020               2611      MOVE.B  #' ',(A2)+
00002096  14FC 0020               2612      MOVE.B  #' ',(A2)+
0000209A                          2613  
0000209A  4241                    2614      CLR     D1
0000209C  123C 0000               2615      MOVE.B  #0,D1           Always Dn format
000020A0  4DF8 1350               2616      LEA     modeTable,A6
000020A4  4EB6 1000               2617      JSR     (A6,D1)
000020A8                          2618  
000020A8  4EB8 159E               2619      JSR     get_9to11_bit
000020AC                          2620  
000020AC                          2621  
000020AC  B43C 0007               2622      CMP.B   #7,D2
000020B0  6700 FC3E               2623      BEQ     immAb0010
000020B4                          2624  
000020B4  14FC 002C               2625      MOVE.B  #',',(A2)+  comma between operands
000020B8                          2626  
000020B8  4EB8 156A               2627      JSR     get_3to5_bit
000020BC                          2628  
000020BC  4EB8 1552               2629      JSR     get_0to2_bit
000020C0                          2630  
000020C0                          2631  
000020C0                          2632  
000020C0                          2633  
000020C0  6000 1A16               2634      BRA     printCode
000020C4                          2635  
000020C4                          2636  immAbSubDnEA
000020C4                          2637  
000020C4  B27C 0004               2638      CMP     #4,D1      if immediate data
000020C8  6700 0012               2639      BEQ     adjustimmAbSubDnEA
000020CC                          2640  immAbJumpSubDnEA
000020CC  4DF8 11A2               2641      LEA     immAbTable, A6
000020D0  C2FC 0008               2642      MULU    #8,D1
000020D4  4EB6 1000               2643      JSR     (A6,D1)
000020D8  6000 19FE               2644      BRA     printCode
000020DC                          2645  adjustimmAbSubDnEA
000020DC  9207                    2646      SUB.B   D7,D1
000020DE  60EC                    2647      BRA     immAbJumpSubDnEA
000020E0                          2648  
000020E0                          2649  
000020E0                          2650  
000020E0                          2651  
000020E0                          2652  
000020E0                          2653  suba_W  ;subA.W
000020E0                          2654      *-maybe error checking
000020E0                          2655      *-we know its subA.W so print it to our buffer
000020E0                          2656      *-ex subA.W D2,D7
000020E0                          2657      
000020E0  14FC 0020               2658      MOVE.B  #' ',(A2)+
000020E4  14FC 0020               2659      MOVE.B  #' ',(A2)+
000020E8  14FC 0020               2660      MOVE.B  #' ',(A2)+
000020EC  14FC 0020               2661      MOVE.B  #' ',(A2)+
000020F0  14FC 0053               2662      MOVE.B  #'S',(A2)+
000020F4  14FC 0055               2663      MOVE.B  #'U',(A2)+
000020F8  14FC 0042               2664      MOVE.B  #'B',(A2)+
000020FC  14FC 0041               2665      MOVE.B  #'A',(A2)+
00002100  14FC 002E               2666      MOVE.B  #'.',(A2)+
00002104  14FC 0057               2667      MOVE.B  #'W',(A2)+
00002108                          2668      *-always allow 4 spaces
00002108  14FC 0020               2669      MOVE.B  #' ',(A2)+
0000210C  14FC 0020               2670      MOVE.B  #' ',(A2)+
00002110  14FC 0020               2671      MOVE.B  #' ',(A2)+
00002114                          2672      
00002114                          2673      * MachineCode: 0001 **** **** **BI T***
00002114                          2674  
00002114                          2675      *-insert immediate subressing here
00002114  4242                    2676      CLR     D2
00002116  4241                    2677      CLR     D1
00002118  1406                    2678      MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
0000211A  E50A                    2679      LSL.B   #2,D2       **** **** BIT* **00
0000211C  EA0A                    2680      LSR.B   #5,D2       **** **** 0000 0BIT
0000211E  C4FC 0008               2681      MULU    #8,D2       value adjusted for jumping
00002122  4DF8 1350               2682      LEA     modeTable,A6 Load the table into A6
00002126  4EB6 2000               2683      JSR     (A6,D2)     Jump to subroutine of value at D0
0000212A                          2684  
0000212A                          2685  
0000212A                          2686   * MachineCode: 0001 **** **** **** *BIT
0000212A                          2687  
0000212A                          2688      
0000212A  1206                    2689      MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
0000212C  EB09                    2690      LSL.B   #5,D1       **** **** BIT0 0000
0000212E  EA09                    2691      LSR.B   #5,D1       **** **** 0000 0BIT
00002130  C2FC 0008               2692      MULU    #8,D1       value adjusted for jumping
00002134  4FF8 1402               2693      LEA     regNumTable ,A7 Load the table into A7
00002138  4EB7 1000               2694      JSR     (A7,D1)     Jump to subroutine of value at D1
0000213C  B23C 0020               2695      CMP.B   #32,D1         ; #imm => #XX 3 spaces
00002140                          2696      ;BEQ.W   immediateData   ;branch to immediateData
00002140                          2697      
00002140  14FC 002C               2698      MOVE.B  #',',(A2)+
00002144  14FC 0041               2699      MOVE.B  #'A',(A2)+
00002148                          2700  
00002148                          2701  
00002148                          2702  
00002148                          2703  
00002148  4241                    2704      CLR     D1
0000214A  3206                    2705      MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
0000214C  E949                    2706      LSL.W   #4,D1       BIT* **** **** 0000
0000214E  E049                    2707      LSR.W   #8,D1       0000 0000 BIT* ****
00002150  EA49                    2708      LSR.W   #5,D1       0000 0000 0000 0BIT
00002152  C2FC 0008               2709      MULU    #8,D1       value adjusted for jumping
00002156  4FF8 1472               2710      LEA     numTable ,A7 Load the table into A7
0000215A  4EB7 1000               2711      JSR     (A7,D1)     Jump to subroutine of value at D1
0000215E                          2712  
0000215E                          2713      
0000215E                          2714      
0000215E                          2715  
0000215E                          2716  
0000215E                          2717  
0000215E                          2718  
0000215E                          2719  
0000215E                          2720  
0000215E                          2721  
0000215E                          2722  
0000215E                          2723  
0000215E                          2724  
0000215E                          2725  
0000215E                          2726  
0000215E                          2727  
0000215E                          2728  
0000215E                          2729  
0000215E  6000 1978               2730      BRA printCode
00002162                          2731  
00002162                          2732  suba_L  ;subA.L
00002162                          2733      *-maybe error checking
00002162                          2734      *-we know its subA.L so print it to our buffer
00002162                          2735      *-ex subA.L D2,D7
00002162                          2736      
00002162  14FC 0020               2737      MOVE.B  #' ',(A2)+
00002166  14FC 0020               2738      MOVE.B  #' ',(A2)+
0000216A  14FC 0020               2739      MOVE.B  #' ',(A2)+
0000216E  14FC 0020               2740      MOVE.B  #' ',(A2)+
00002172  14FC 0053               2741      MOVE.B  #'S',(A2)+
00002176  14FC 0055               2742      MOVE.B  #'U',(A2)+
0000217A  14FC 0042               2743      MOVE.B  #'B',(A2)+
0000217E  14FC 0041               2744      MOVE.B  #'A',(A2)+
00002182  14FC 002E               2745      MOVE.B  #'.',(A2)+
00002186  14FC 004C               2746      MOVE.B  #'L',(A2)+
0000218A                          2747      *-always allow 4 spaces
0000218A  14FC 0020               2748      MOVE.B  #' ',(A2)+
0000218E  14FC 0020               2749      MOVE.B  #' ',(A2)+
00002192  14FC 0020               2750      MOVE.B  #' ',(A2)+
00002196                          2751      
00002196                          2752      * MachineCode: 0001 **** **** **BI T***
00002196                          2753  
00002196                          2754      *-insert immediate subressing here
00002196  4242                    2755      CLR     D2
00002198  4241                    2756      CLR     D1
0000219A  1406                    2757      MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
0000219C  E50A                    2758      LSL.B   #2,D2       **** **** BIT* **00
0000219E  EA0A                    2759      LSR.B   #5,D2       **** **** 0000 0BIT
000021A0  C4FC 0008               2760      MULU    #8,D2       value adjusted for jumping
000021A4  4DF8 1350               2761      LEA     modeTable,A6 Load the table into A6
000021A8  4EB6 2000               2762      JSR     (A6,D2)     Jump to subroutine of value at D0
000021AC                          2763  
000021AC                          2764  
000021AC                          2765   * MachineCode: 0001 **** **** **** *BIT
000021AC                          2766  
000021AC                          2767      
000021AC  1206                    2768      MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
000021AE  EB09                    2769      LSL.B   #5,D1       **** **** BIT0 0000
000021B0  EA09                    2770      LSR.B   #5,D1       **** **** 0000 0BIT
000021B2  C2FC 0008               2771      MULU    #8,D1       value adjusted for jumping
000021B6  4FF8 1402               2772      LEA     regNumTable ,A7 Load the table into A7
000021BA  4EB7 1000               2773      JSR     (A7,D1)     Jump to subroutine of value at D1
000021BE  B23C 0020               2774      CMP.B   #32,D1         ; #imm => #XX 3 spaces
000021C2                          2775      ;BEQ.W   immediateData   ;branch to immediateData
000021C2                          2776      
000021C2  14FC 002C               2777      MOVE.B  #',',(A2)+
000021C6  14FC 0041               2778      MOVE.B  #'A',(A2)+
000021CA                          2779  
000021CA                          2780  
000021CA                          2781  
000021CA                          2782  
000021CA  4241                    2783      CLR     D1
000021CC  3206                    2784      MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
000021CE  E949                    2785      LSL.W   #4,D1       BIT* **** **** 0000
000021D0  E049                    2786      LSR.W   #8,D1       0000 0000 BIT* ****
000021D2  EA49                    2787      LSR.W   #5,D1       0000 0000 0000 0BIT
000021D4  C2FC 0008               2788      MULU    #8,D1       value adjusted for jumping
000021D8  4FF8 1472               2789      LEA     numTable ,A7 Load the table into A7
000021DC  4EB7 1000               2790      JSR     (A7,D1)     Jump to subroutine of value at D1
000021E0                          2791  
000021E0                          2792      
000021E0                          2793      
000021E0                          2794  
000021E0                          2795  
000021E0                          2796  
000021E0                          2797  
000021E0                          2798  
000021E0                          2799  
000021E0                          2800  
000021E0                          2801  
000021E0                          2802  
000021E0                          2803  
000021E0                          2804  
000021E0                          2805  
000021E0                          2806  
000021E0                          2807  
000021E0                          2808  
000021E0  6000 18F6               2809      BRA printCode
000021E4                          2810  
000021E4                          2811  
000021E4                          2812  
000021E4                          2813  
000021E4                          2814  
000021E4                          2815  
000021E4                          2816  
000021E4                          2817  
000021E4                          2818  
000021E4                          2819  
000021E4                          2820  
000021E4                          2821  -------------------- end include --------------------
000021E4                          2822      INCLUDE 'op1000.x68'    DIVU
000021E4                          2823  op1000 *-DIVU.W OR
000021E4  14FC 0020               2824      MOVE.B  #' ',(A2)+  ;print some spaces
000021E8  14FC 0020               2825      MOVE.B  #' ',(A2)+
000021EC  14FC 0020               2826      MOVE.B  #' ',(A2)+
000021F0  14FC 0020               2827      MOVE.B  #' ',(A2)+
000021F4                          2828  
000021F4  4EB8 1672               2829      JSR WordOrLong
000021F8                          2830  
000021F8  B63C 0001               2831      CMP.B   #$01,D3
000021FC  6700 00C2               2832      BEQ     or_W    EA,Dn
00002200                          2833      
00002200  B63C 0002               2834      CMP.B   #$02,D3
00002204  6700 00D2               2835      BEQ     or_L    EA,Dn
00002208                          2836      
00002208  B63C 0000               2837      CMP.B   #$00,D3
0000220C  6700 009A               2838      BEQ     or_B    EA,Dn
00002210                          2839      
00002210  B63C 0004               2840      CMP.B   #$04,D3
00002214  6700 0130               2841      BEQ     or_B_EA Dn,EA
00002218                          2842      
00002218  B63C 0005               2843      CMP.B   #$05,D3
0000221C  6700 0140               2844      BEQ     or_W_EA Dn,EA
00002220                          2845      
00002220  B63C 0006               2846      CMP.B   #$06,D3
00002224  6700 0150               2847      BEQ     or_L_EA Dn,EA
00002228                          2848      
00002228                          2849  
00002228  B63C 0003               2850      CMP.B   #$03,D3
0000222C  6700 0002               2851      BEQ     divu_W
00002230                          2852  
00002230                          2853  divu_W
00002230                          2854      ;do something effective
00002230  4243                    2855      CLR     D3          ;clear D3
00002232  3606                    2856      MOVE.W  D6,D3       ;copy data to D3
00002234                          2857      ;MOVE.L  #1,D7       ;size of data is word
00002234                          2858  
00002234                          2859      ;Print/store DIVU.W here
00002234  14FC 0044               2860      MOVE.B  #'D',(A2)+  ;print D
00002238  14FC 0049               2861      MOVE.B  #'I',(A2)+  ;print I
0000223C  14FC 0056               2862      MOVE.B  #'V',(A2)+  ;print V
00002240  14FC 0055               2863      MOVE.B  #'U',(A2)+  ;print U
00002244  14FC 002E               2864      MOVE.B  #'.',(A2)+  ;ptint .
00002248  14FC 0057               2865      MOVE.B  #'W',(A2)+  ;print W
0000224C  14FC 0020               2866      MOVE.B  #' ',(A2)+  ;print some spaces
00002250  14FC 0020               2867      MOVE.B  #' ',(A2)+
00002254  14FC 0020               2868      MOVE.B  #' ',(A2)+
00002258  14FC 0020               2869      MOVE.B  #' ',(A2)+
0000225C  1A3C 000A               2870      MOVE.B  #10,D5      ;counter for output
00002260                          2871  
00002260  4EB8 156A               2872      JSR     get_3to5_bit
00002264                          2873  
00002264  4EB8 1552               2874      JSR     get_0to2_bit
00002268                          2875  
00002268                          2876  
00002268  B43C 0007               2877      CMP.B   #7,D2
0000226C  6700 001C               2878      BEQ     immAbDIVU_W
00002270                          2879  
00002270                          2880  desDecodeDIVU_W   
00002270  14FC 002C               2881      MOVE.B  #',',(A2)+  comma between operands
00002274                          2882  
00002274  4241                    2883      CLR     D1
00002276  4DF8 1350               2884      LEA     modeTable,A6
0000227A  123C 0000               2885      MOVE.B  #0,D1       Always Dn format
0000227E  4EB6 1000               2886      JSR     (A6,D1)
00002282                          2887  
00002282  4EB8 159E               2888      JSR     get_9to11_bit
00002286                          2889  
00002286                          2890  
00002286                          2891  
00002286                          2892  
00002286  6000 1850               2893      BRA     printCode
0000228A                          2894  
0000228A                          2895  immAbDIVU_W
0000228A                          2896  
0000228A  B27C 0004               2897      CMP     #4,D1      if immediate data
0000228E  6700 0010               2898      BEQ     adjustimmAbDIVU_W
00002292                          2899  immAbJumpDIVU_W            
00002292  4DF8 11A2               2900      LEA     immAbTable, A6
00002296  C2FC 0008               2901      MULU    #8,D1
0000229A  4EB6 1000               2902      JSR     (A6,D1)
0000229E  60D0                    2903      BRA     desDecodeDIVU_W
000022A0                          2904  adjustimmAbDIVU_W
000022A0  4241                    2905      CLR     D1
000022A2  123C 0003               2906      MOVE.B  #3,D1         immdiateData WORD always
000022A6  60EA                    2907      BRA     immAbJumpDIVU_W
000022A8                          2908  
000022A8                          2909  
000022A8                          2910  
000022A8                          2911  
000022A8                          2912  
000022A8                          2913  or_B
000022A8  14FC 004F               2914      MOVE.B  #'O',(A2)+
000022AC  14FC 0052               2915      MOVE.B  #'R',(A2)+
000022B0  14FC 002E               2916      MOVE.B  #'.',(A2)+
000022B4  14FC 0042               2917      MOVE.B  #'B',(A2)+
000022B8  1E3C 0000               2918      MOVE.B  #0,D7       byte size
000022BC  6000 0032               2919      BRA     decodeOReaDn
000022C0                          2920  
000022C0                          2921  or_W
000022C0  14FC 004F               2922      MOVE.B  #'O',(A2)+
000022C4  14FC 0052               2923      MOVE.B  #'R',(A2)+
000022C8  14FC 002E               2924      MOVE.B  #'.',(A2)+
000022CC  14FC 0057               2925      MOVE.B  #'W',(A2)+
000022D0  1E3C 0001               2926      MOVE.B  #1,D7       Word Size
000022D4  6000 001A               2927      BRA     decodeOReaDn
000022D8                          2928  
000022D8                          2929  or_L
000022D8  14FC 004F               2930      MOVE.B  #'O',(A2)+
000022DC  14FC 0052               2931      MOVE.B  #'R',(A2)+
000022E0  14FC 002E               2932      MOVE.B  #'.',(A2)+
000022E4  14FC 004C               2933      MOVE.B  #'L',(A2)+
000022E8  1E3C 0002               2934      MOVE.B  #2,D7       Long Size
000022EC  6000 0002               2935      BRA     decodeOReaDn
000022F0                          2936  
000022F0                          2937  decodeOReaDn
000022F0  14FC 0020               2938      MOVE.B  #' ',(A2)+
000022F4  14FC 0020               2939      MOVE.B  #' ',(A2)+
000022F8  14FC 0020               2940      MOVE.B  #' ',(A2)+
000022FC  14FC 0020               2941      MOVE.B  #' ',(A2)+
00002300                          2942  
00002300  4EB8 156A               2943      JSR     get_3to5_bit
00002304                          2944  
00002304  4EB8 1552               2945      JSR     get_0to2_bit
00002308                          2946  
00002308                          2947  
00002308  B43C 0007               2948      CMP.B   #7,D2
0000230C  6700 F9E2               2949      BEQ     immAb0010
00002310                          2950  
00002310                          2951  desDecodeOReaDn   
00002310  14FC 002C               2952      MOVE.B  #',',(A2)+  comma between operands
00002314                          2953  
00002314  4241                    2954      CLR     D1
00002316  4DF8 1350               2955      LEA     modeTable,A6
0000231A  123C 0000               2956      MOVE.B  #0,D1       Always Dn format
0000231E  4EB6 1000               2957      JSR     (A6,D1)
00002322                          2958  
00002322  4EB8 159E               2959      JSR     get_9to11_bit
00002326                          2960  
00002326                          2961  
00002326                          2962  
00002326                          2963  
00002326  6000 17B0               2964      BRA     printCode
0000232A                          2965  
0000232A                          2966  immAbOReaDn
0000232A                          2967  
0000232A  B27C 0004               2968      CMP     #4,D1      if immediate data
0000232E  6700 0010               2969      BEQ     adjustimmAbOReaDn
00002332                          2970  immAbJumpOReaDn            
00002332  4DF8 11A2               2971      LEA     immAbTable, A6
00002336  C2FC 0008               2972      MULU    #8,D1
0000233A  4EB6 1000               2973      JSR     (A6,D1)
0000233E  60D0                    2974      BRA     desDecodeOReaDn
00002340                          2975  adjustimmAbOReaDn
00002340  9247                    2976      SUB     D7,D1
00002342  6000 F9B4               2977      BRA     immAbJump0010
00002346                          2978  
00002346                          2979  
00002346                          2980  
00002346                          2981  
00002346                          2982  
00002346                          2983  or_B_EA
00002346  14FC 004F               2984      MOVE.B  #'O',(A2)+
0000234A  14FC 0052               2985      MOVE.B  #'R',(A2)+
0000234E  14FC 002E               2986      MOVE.B  #'.',(A2)+
00002352  14FC 0042               2987      MOVE.B  #'B',(A2)+
00002356  1E3C 0000               2988      MOVE.B  #0,D7       byte size
0000235A  6000 0032               2989      BRA     decodeORDnea
0000235E                          2990  
0000235E                          2991  or_W_EA
0000235E  14FC 004F               2992      MOVE.B  #'O',(A2)+
00002362  14FC 0052               2993      MOVE.B  #'R',(A2)+
00002366  14FC 002E               2994      MOVE.B  #'.',(A2)+
0000236A  14FC 0057               2995      MOVE.B  #'W',(A2)+
0000236E  1E3C 0001               2996      MOVE.B  #1,D7       Word Size
00002372  6000 001A               2997      BRA     decodeORDnea
00002376                          2998  
00002376                          2999  or_L_EA
00002376  14FC 004F               3000      MOVE.B  #'O',(A2)+
0000237A  14FC 0052               3001      MOVE.B  #'R',(A2)+
0000237E  14FC 002E               3002      MOVE.B  #'.',(A2)+
00002382  14FC 004C               3003      MOVE.B  #'L',(A2)+
00002386  1E3C 0002               3004      MOVE.B  #2,D7       Long Size
0000238A  6000 0002               3005      BRA     decodeORDnea
0000238E                          3006  
0000238E                          3007  decodeORDnea
0000238E  14FC 0020               3008      MOVE.B  #' ',(A2)+
00002392  14FC 0020               3009      MOVE.B  #' ',(A2)+
00002396  14FC 0020               3010      MOVE.B  #' ',(A2)+
0000239A  14FC 0020               3011      MOVE.B  #' ',(A2)+
0000239E                          3012  
0000239E  4241                    3013      CLR     D1
000023A0  4DF8 1350               3014      LEA     modeTable,A6
000023A4  123C 0000               3015      MOVE.B  #0,D1       Always Dn format
000023A8  4EB6 1000               3016      JSR     (A6,D1)
000023AC                          3017  
000023AC  4EB8 159E               3018      JSR     get_9to11_bit
000023B0                          3019  
000023B0  14FC 002C               3020      MOVE.B  #',',(A2)+  comma between operands
000023B4                          3021  
000023B4  4EB8 156A               3022      JSR     get_3to5_bit
000023B8                          3023  
000023B8  4EB8 1552               3024      JSR     get_0to2_bit
000023BC                          3025  
000023BC                          3026  
000023BC  B43C 0007               3027      CMP.B   #7,D2
000023C0  6700 F92E               3028      BEQ     immAb0010
000023C4                          3029  
000023C4                          3030  
000023C4                          3031  
000023C4                          3032  
000023C4  6000 1712               3033      BRA     printCode
000023C8                          3034  
000023C8                          3035  immAbORDnea
000023C8                          3036  
000023C8  B27C 0004               3037      CMP     #4,D1      if immediate data
000023CC  6700 0012               3038      BEQ     adjustimmAbORDnea
000023D0                          3039  immAbJumpORDnea            
000023D0  4DF8 11A2               3040      LEA     immAbTable, A6
000023D4  C2FC 0008               3041      MULU    #8,D1
000023D8  4EB6 1000               3042      JSR     (A6,D1)
000023DC  6000 16FA               3043      BRA     printCode
000023E0                          3044  adjustimmAbORDnea
000023E0  9247                    3045      SUB     D7,D1
000023E2  6000 F914               3046      BRA     immAbJump0010
000023E6                          3047  
000023E6                          3048  
000023E6                          3049  
000023E6                          3050  
000023E6                          3051  
000023E6                          3052      
000023E6                          3053      
000023E6                          3054      
000023E6                          3055      
000023E6                          3056      
000023E6                          3057  
000023E6                          3058  
000023E6                          3059  
000023E6                          3060  
000023E6                          3061  
000023E6                          3062  
000023E6                          3063  
000023E6                          3064  
000023E6                          3065  
000023E6                          3066  
000023E6                          3067  -------------------- end include --------------------
000023E6                          3068      INCLUDE 'op0111.x68'    MOVEQ
000023E6                          3069  op0111
000023E6                          3070      *- MOVE Q
000023E6  4243                    3071      CLR     D3          ;clear D3
000023E8  1606                    3072      MOVE.B  D6,D3       ;copy data to D3
000023EA                          3073      ;MOVE.L  #2,D7       ;size of data is long
000023EA                          3074      
000023EA                          3075  
000023EA  14FC 0020               3076      MOVE.B  #' ',(A2)+  ;print some spaces
000023EE  14FC 0020               3077      MOVE.B  #' ',(A2)+
000023F2  14FC 0020               3078      MOVE.B  #' ',(A2)+
000023F6  14FC 0020               3079      MOVE.B  #' ',(A2)+
000023FA  14FC 004D               3080      MOVE.B  #'M',(A2)+  ;print M
000023FE  14FC 004F               3081      MOVE.B  #'O',(A2)+  ;print O
00002402  14FC 0056               3082      MOVE.B  #'V',(A2)+  ;print V
00002406  14FC 0045               3083      MOVE.B  #'E',(A2)+  ;print E
0000240A  14FC 0051               3084      MOVE.B  #'Q',(A2)+  ;ptint Q
0000240E  14FC 0020               3085      MOVE.B  #' ',(A2)+  ;
00002412  14FC 0020               3086      MOVE.B  #' ',(A2)+  ;print some spaces
00002416  14FC 0020               3087      MOVE.B  #' ',(A2)+
0000241A  14FC 0023               3088      MOVE.B  #'#',(A2)+  ;print #
0000241E  14FC 0024               3089      MOVE.B  #'$',(A2)+  ;print
00002422                          3090      *-REMEMBER MOVEQ TAKES ONLY A BTYE OF DATA
00002422                          3091  
00002422                          3092      ;MOVE.B  #12,D5      ;counter for output
00002422  E80B                    3093      LSR.B   #4,D3       *-get bit 4 to 7 and jump with it DATA
00002424  C6FC 0008               3094      MULU.W  #8,D3       ;gotta get ready to jump
00002428  4DF8 1472               3095      LEA     numTable,A6 ;load table
0000242C  4EB6 3000               3096      JSR     (A6,D3)     ;branch to grab number
00002430                          3097  
00002430  4243                    3098      CLR     D3          ;clear D3
00002432  1606                    3099      MOVE.B  D6,D3       ;copy data to D3
00002434  E90B                    3100      LSL.B   #4,D3       ;get the biut 0 - 3 with it DATA to print BYTE SIZE
00002436  E80B                    3101      LSR.B   #4,D3
00002438  C6FC 0008               3102      MULU.W  #8,D3       ;gotta get ready to jump
0000243C  4DF8 1472               3103      LEA     numTable,A6 ;load table
00002440  4EB6 3000               3104      JSR     (A6,D3)     ;branch to grab number
00002444                          3105  
00002444  14FC 002C               3106      MOVE.B  #',',(A2)+  ;print ,
00002448                          3107  
00002448  4281                    3108      CLR.L   D1
0000244A  123C 0000               3109      MOVE.B  #0,D1
0000244E  4DF8 1350               3110      LEA     modeTable,A6
00002452  4EB6 1000               3111      JSR     (A6,D1)
00002456                          3112  
00002456  4EB8 159E               3113      JSR     get_9to11_bit
0000245A                          3114  
0000245A                          3115  
0000245A                          3116  
0000245A                          3117  
0000245A  6000 167C               3118      BRA     printCode
0000245E                          3119  
0000245E                          3120  
0000245E                          3121  
0000245E                          3122  
0000245E                          3123  
0000245E                          3124  
0000245E                          3125  
0000245E                          3126  
0000245E                          3127  
0000245E                          3128  -------------------- end include --------------------
0000245E                          3129      
0000245E                          3130      INCLUDE 'op0000.x68'    ADDI
0000245E                          3131  op0000  ;ADDI
0000245E                          3132      **----------------------------------------
0000245E                          3133      *decode what type of opcode/size it is
0000245E                          3134      *- using decode0000 there will only be a couple static options in D3 to compare
0000245E                          3135      *-D3:
0000245E                          3136      *-#$18 -> ANDI.B
0000245E                          3137      *-#$19 ->ANDI.W
0000245E                          3138      *-#$1A -> ANDI.L
0000245E                          3139  
0000245E  4EB9 00002638           3140      JSR decode0000
00002464                          3141  
00002464  14FC 0020               3142      MOVE.B  #' ',(A2)+  ;print
00002468  14FC 0020               3143      MOVE.B  #' ',(A2)+  ;print
0000246C  14FC 0020               3144      MOVE.B  #' ',(A2)+  ;print
00002470  14FC 0020               3145      MOVE.B  #' ',(A2)+  ;print
00002474                          3146  
00002474  B63C 0018               3147      CMP.B   #$18,D3     ;see if it's a ADDI.B
00002478  6700 0030               3148      BEQ     addi_B
0000247C                          3149  
0000247C  B63C 0019               3150      CMP.B   #$19,D3     ;see if it's a ADDI.W
00002480  6700 004E               3151      BEQ     addi_W
00002484  B63C 001A               3152      CMP.B   #$1A,D3     ;see if it's a ADDI.L
00002488  6700 006C               3153      BEQ     addi_L
0000248C                          3154  
0000248C  B63C 0010               3155      CMP.B   #$10,D3 SUBI.B  #$66,(A2)+
00002490  6700 00E4               3156      BEQ     subi_B_
00002494                          3157      
00002494  B63C 0011               3158      CMP.B   #$11,D3 SUBI.W  #$66,(A2)+
00002498  6700 0100               3159      BEQ     subi_W_
0000249C                          3160      
0000249C  B63C 0012               3161      CMP.B   #$12,D3 SUBI.L  #$66,(A2)+
000024A0  6700 011C               3162      BEQ     subi_L_
000024A4                          3163  
000024A4  4EB9 00003AEE           3164      JSR finish
000024AA                          3165  
000024AA                          3166  
000024AA                          3167  
000024AA                          3168  addi_B
000024AA  1606                    3169      MOVE.B  D6, D3 [ 0000 0000 [USES] [USES] ] D6 ->d3
000024AC                          3170      *- GET the register Value [ 0000 0XXX ]
000024AC                          3171  
000024AC                          3172  
000024AC                          3173  
000024AC                          3174      *-immediate data not allowed here
000024AC                          3175  
000024AC                          3176      *-Because we know this is ADDi.B we know that out data following this opcode
000024AC                          3177      *-is of size B, so we can now grab that data, look at it and print it out
000024AC                          3178      
000024AC                          3179      *temporary store out data in memory
000024AC                          3180      
000024AC                          3181      *-MOVE machine code into temp D2
000024AC  3406                    3182      MOVE.W  D6,D2
000024AE                          3183      ;MOVEA.W D6,A5       ; BUGGG LOOK BELOW WHWERE DO WE STORE OUR ABS IMM DATA IN ????
000024AE                          3184      *MOVE.W  (A4)+,D6 ;i forgot where we store our data in memory
000024AE                          3185      ;MOVE.W  D6,D3   Move the data back into D3 to play with
000024AE                          3186      
000024AE                          3187      *-MOVE the word/bytte data at D4 into D3
000024AE                          3188      ;MOVE.W  D4,D3
000024AE  14FC 0041               3189      MOVE.B  #'A',(A2)+  ;print A
000024B2  14FC 0044               3190      MOVE.B  #'D',(A2)+  ;print D
000024B6  14FC 0044               3191      MOVE.B  #'D',(A2)+  ;print
000024BA  14FC 0049               3192      MOVE.B  #'I',(A2)+  ;print
000024BE  14FC 002E               3193      MOVE.B  #'.',(A2)+  ;print
000024C2  14FC 0042               3194      MOVE.B  #'B',(A2)+  ;print
000024C6  4247                    3195      CLR     D7
000024C8  1E3C 0000               3196      MOVE.B  #0,D7       Byte size
000024CC  6000 0050               3197      BRA     ADDIdecode
000024D0                          3198  
000024D0                          3199  addi_W
000024D0                          3200  
000024D0  1606                    3201      MOVE.B  D6, D3
000024D2  3406                    3202      MOVE.W  D6,D2
000024D4                          3203      *MOVE.W  (A4)+,D6
000024D4                          3204  
000024D4  14FC 0041               3205      MOVE.B  #'A',(A2)+  ;print A
000024D8  14FC 0044               3206      MOVE.B  #'D',(A2)+  ;print D
000024DC  14FC 0044               3207      MOVE.B  #'D',(A2)+  ;print
000024E0  14FC 0049               3208      MOVE.B  #'I',(A2)+  ;print
000024E4  14FC 002E               3209      MOVE.B  #'.',(A2)+  ;print
000024E8  14FC 0057               3210      MOVE.B  #'W',(A2)+  ;print
000024EC  4247                    3211      CLR     D7
000024EE  1E3C 0001               3212      MOVE.B  #1,D7       Word size
000024F2  6000 002A               3213      BRA     ADDIdecode
000024F6                          3214  
000024F6                          3215  addi_L
000024F6                          3216  
000024F6  1606                    3217      MOVE.B  D6, D3 [ 0000 0000 [USES] [USES] ] D6 ->d3
000024F8                          3218      *- GET the register Value [ 0000 0XXX ]
000024F8  EB0B                    3219      LSL.B   #5,D3
000024FA  EA0B                    3220      LSR.B   #5,D3       got it here
000024FC                          3221      
000024FC                          3222      *-immediate data not allowed here
000024FC                          3223  
000024FC                          3224      *-Because we know this is ADDi.B we know that out data following this opcode
000024FC                          3225      *-is of size B, so we can now grab that data, look at it and print it out
000024FC                          3226      
000024FC                          3227      *temporary store out data in memory
000024FC                          3228      ;MOVEA.W D6,A5       ; BUGGG LOOK BELOW WHWERE DO WE STORE OUR ABS IMM DATA IN ????
000024FC                          3229      ;MOVE.W  (A4)+,D6 ;i forgot where we store our data in memory
000024FC                          3230      *MOVE.L  (A4)+,D3 ;throw away just need to increment pointer here
000024FC                          3231      ;MOVE.L  D5,D3   Move the data back into D3 to play with
000024FC                          3232  
000024FC                          3233  
000024FC                          3234  
000024FC  14FC 0041               3235      MOVE.B  #'A',(A2)+  ;print A
00002500  14FC 0044               3236      MOVE.B  #'D',(A2)+  ;print D
00002504  14FC 0044               3237      MOVE.B  #'D',(A2)+  ;print
00002508  14FC 0049               3238      MOVE.B  #'I',(A2)+  ;print
0000250C  14FC 002E               3239      MOVE.B  #'.',(A2)+  ;print
00002510  14FC 004C               3240      MOVE.B  #'L',(A2)+  ;print
00002514  4247                    3241      CLR     D7
00002516  1E3C 0002               3242      MOVE.B  #2,D7       Long size
0000251A  6000 0002               3243      BRA     ADDIdecode
0000251E                          3244  
0000251E                          3245  ADDIdecode 
0000251E  14FC 0020               3246      MOVE.B  #' ',(A2)+  ;print
00002522  14FC 0020               3247      MOVE.B  #' ',(A2)+  ;print
00002526  14FC 0023               3248      MOVE.B  #'#',(A2)+  ;print
0000252A                          3249      *MOVE.B  #'$',(A2)+  ;print
0000252A                          3250  
0000252A  BE3C 0002               3251      CMP.B   #2,D7
0000252E  6700 000A               3252      BEQ     printLongADDI
00002532  4EB8 11EA               3253      JSR     IA000
00002536  6000 000A               3254      BRA     EAdecodeADDI
0000253A                          3255  printLongADDI
0000253A  4EB8 1252               3256      JSR     IA001
0000253E  6000 0002               3257      BRA     EAdecodeADDI
00002542                          3258  
00002542                          3259  EAdecodeADDI
00002542  14FC 002C               3260      MOVE.B  #',',(A2)+
00002546                          3261  
00002546  4EB8 156A               3262      JSR get_3to5_bit
0000254A                          3263  
0000254A  4EB8 1552               3264      JSR get_0to2_bit
0000254E                          3265  
0000254E                          3266  
0000254E  B43C 0007               3267      CMP.B   #7,D2
00002552  6700 0006               3268      BEQ     immAbADDI
00002556                          3269  
00002556                          3270  
00002556                          3271  
00002556                          3272  
00002556  6000 1580               3273      BRA printCode
0000255A                          3274  
0000255A                          3275  immAbADDI
0000255A                          3276  
0000255A  B27C 0004               3277      CMP     #4,D1      if immediate data
0000255E  6700 0012               3278      BEQ     adjustimmAbADDI
00002562                          3279  immAbJumpADDI
00002562  4DF8 11A2               3280      LEA     immAbTable, A6
00002566  C2FC 0008               3281      MULU    #8,D1
0000256A  4EB6 1000               3282      JSR     (A6,D1)
0000256E  6000 1568               3283      BRA     printCode
00002572                          3284  adjustimmAbADDI
00002572  9207                    3285      SUB.B   D7,D1
00002574  60EC                    3286      BRA     immAbJumpADDI
00002576                          3287  
00002576                          3288  
00002576                          3289  
00002576                          3290  
00002576                          3291  
00002576                          3292  subi_B_
00002576  3406                    3293      MOVE.W  D6,D2
00002578                          3294      ;MOVEA.W D6,A5       ; BUGGG LOOK BELOW WHWERE DO WE STORE OUR ABS IMM DATA IN ????
00002578  3C1C                    3295      MOVE.W  (A4)+,D6 ;i forgot where we store our data in memory
0000257A  14FC 0053               3296      MOVE.B  #'S',(A2)+  ;print
0000257E  14FC 0055               3297      MOVE.B  #'U',(A2)+  ;print
00002582  14FC 0042               3298      MOVE.B  #'B',(A2)+  ;print
00002586  14FC 0049               3299      MOVE.B  #'I',(A2)+  ;print
0000258A  14FC 002E               3300      MOVE.B  #'.',(A2)+  ;print
0000258E  14FC 0042               3301      MOVE.B  #'B',(A2)+  ;print
00002592  1E3C 0000               3302      MOVE.B  #0,D7       Byte size
00002596  6000 0048               3303      BRA     SUBIdecode
0000259A                          3304  
0000259A                          3305  subi_W_
0000259A  3406                    3306      MOVE.W  D6,D2
0000259C                          3307      ;MOVEA.W D6,A5       ; BUGGG LOOK BELOW WHWERE DO WE STORE OUR ABS IMM DATA IN ????
0000259C  3C1C                    3308      MOVE.W  (A4)+,D6 ;i forgot where we store our data in memory
0000259E  14FC 0053               3309      MOVE.B  #'S',(A2)+  ;print
000025A2  14FC 0055               3310      MOVE.B  #'U',(A2)+  ;print
000025A6  14FC 0042               3311      MOVE.B  #'B',(A2)+  ;print
000025AA  14FC 0049               3312      MOVE.B  #'I',(A2)+  ;print
000025AE  14FC 002E               3313      MOVE.B  #'.',(A2)+  ;print
000025B2  14FC 0057               3314      MOVE.B  #'W',(A2)+  ;print
000025B6  1E3C 0001               3315      MOVE.B  #1,D7       Word size
000025BA  6000 0024               3316      BRA     SUBIdecode
000025BE                          3317  
000025BE                          3318  subi_L_
000025BE  261C                    3319      MOVE.L  (A4)+,D3 ;throw away just need to increment pointer here
000025C0  14FC 0053               3320      MOVE.B  #'S',(A2)+  ;print
000025C4  14FC 0055               3321      MOVE.B  #'U',(A2)+  ;print
000025C8  14FC 0042               3322      MOVE.B  #'B',(A2)+  ;print
000025CC  14FC 0049               3323      MOVE.B  #'I',(A2)+  ;print
000025D0  14FC 002E               3324      MOVE.B  #'.',(A2)+  ;print
000025D4  14FC 004C               3325      MOVE.B  #'L',(A2)+  ;print
000025D8  1E3C 0002               3326      MOVE.B  #2,D7       Long size
000025DC  6000 0002               3327      BRA     SUBIdecode
000025E0                          3328  
000025E0                          3329  SUBIdecode 
000025E0  14FC 0020               3330      MOVE.B  #' ',(A2)+  ;print
000025E4  14FC 0020               3331      MOVE.B  #' ',(A2)+  ;print
000025E8  14FC 0023               3332      MOVE.B  #'#',(A2)+  ;print
000025EC                          3333      *MOVE.B  #'$',(A2)+  ;print
000025EC                          3334  
000025EC  BE3C 0002               3335      CMP.B   #2,D7
000025F0  6700 000A               3336      BEQ     printLongSUBI
000025F4  4EB8 11EA               3337      JSR     IA000
000025F8                          3338  
000025F8  6000 000A               3339      BRA     EAdecodeSUBI
000025FC                          3340  printLongSUBI   
000025FC  4EB8 1252               3341      JSR     IA001
00002600                          3342  
00002600  6000 0002               3343      BRA     EAdecodeSUBI
00002604                          3344  
00002604                          3345  EAdecodeSUBI
00002604                          3346  
00002604  14FC 002C               3347      MOVE.B  #',',(A2)+
00002608                          3348  
00002608  4EB8 156A               3349      JSR get_3to5_bit
0000260C                          3350  
0000260C  4EB8 1552               3351      JSR get_0to2_bit
00002610                          3352  
00002610                          3353  
00002610  B43C 0007               3354      CMP.B   #7,D2
00002614  6700 0006               3355      BEQ     immAbSUBI
00002618                          3356  
00002618                          3357  
00002618                          3358  
00002618                          3359  
00002618  6000 14BE               3360      BRA printCode
0000261C                          3361  
0000261C                          3362  immAbSUBI
0000261C                          3363  
0000261C  B27C 0004               3364      CMP     #4,D1      if immediate data
00002620  6700 0012               3365      BEQ     adjustimmAbSUBI
00002624                          3366  immAbJumpSUBI
00002624  4DF8 11A2               3367      LEA     immAbTable, A6
00002628  C2FC 0008               3368      MULU    #8,D1
0000262C  4EB6 1000               3369      JSR     (A6,D1)
00002630  6000 14A6               3370      BRA     printCode
00002634                          3371  adjustimmAbSUBI
00002634  9207                    3372      SUB.B   D7,D1
00002636  60EC                    3373      BRA     immAbJumpSUBI
00002638                          3374  
00002638                          3375  
00002638                          3376  
00002638                          3377  decode0000
00002638                          3378      *-this will put the bits 6 - 10 however add zeros
00002638  4283                    3379      CLR.L   D3
0000263A  3606                    3380      MOVE.W  D6,D3
0000263C  C67C 0FF0               3381      AND.W   #$0FF0,D3   shortcut of zeroing the edges without shiting around
00002640                          3382      ;[ 0000 1111 1111 0000]
00002640                          3383      ;[ ZERO KEEP KEEP ZERO ]
00002640                          3384      ;[
00002640  EC4B                    3385      LSR.W   #6,D3   [ 0000 1111 11XX XXXX ] -> [ 0000 0000 0011 1111 ]
00002642  C67C 00FF               3386      AND.W   #$00FF,D3   Cancel out any trailing bits
00002646  4E75                    3387      RTS
00002648                          3388  
00002648                          3389  
00002648                          3390  
00002648                          3391  
00002648                          3392      
00002648                          3393  
00002648                          3394      
00002648                          3395  
00002648                          3396  
00002648                          3397  
00002648                          3398  
00002648                          3399  
00002648                          3400  
00002648                          3401  
00002648                          3402  
00002648                          3403  
00002648                          3404  
00002648                          3405  
00002648                          3406  
00002648                          3407  
00002648                          3408  -------------------- end include --------------------
00002648                          3409      INCLUDE 'op0101.x68'    SUBQ,ADDQ
00002648                          3410  op0101
00002648                          3411  
00002648                          3412  
00002648  4EB8 1672               3413      JSR WordOrLong
0000264C                          3414  
0000264C  B63C 0000               3415      CMP.B   #hex_0,D3    ;see if it's a ADDQ.B
00002650  6700 002A               3416      BEQ     addQ_B       ;branch
00002654  B63C 0001               3417      CMP.B   #hex_1,D3    ;see if it's a ADDQ.W
00002658  6700 004E               3418      BEQ     addQ_W       ;branch
0000265C  B63C 0002               3419      CMP.B   #hex_2,D3    ;see if it's a ADDQ.L
00002660  6700 0072               3420      BEQ     addQ_L       ;branch
00002664                          3421  
00002664  B63C 0004               3422      CMP.B  #hex_4,D3
00002668  6700 00EC               3423      BEQ    subQ_B
0000266C  B63C 0005               3424      CMP.B  #hex_5,D3
00002670  6700 0160               3425      BEQ    subQ_W
00002674  B63C 0006               3426      CMP.B  #hex_6,D3
00002678  6700 01D4               3427      BEQ    subQ_L
0000267C                          3428  
0000267C                          3429  addQ_B:
0000267C                          3430      *-get bit 9 to 11
0000267C                          3431      *-data field
0000267C                          3432      *-PRINT
0000267C  14FC 0020               3433      MOVE.B  #' ',(A2)+  ;print
00002680  14FC 0020               3434      MOVE.B  #' ',(A2)+  ;print
00002684  14FC 0020               3435      MOVE.B  #' ',(A2)+  ;print
00002688  14FC 0020               3436      MOVE.B  #' ',(A2)+  ;print
0000268C  14FC 0041               3437      MOVE.B  #'A',(A2)+  ;print
00002690  14FC 0044               3438      MOVE.B  #'D',(A2)+  ;print
00002694  14FC 0044               3439      MOVE.B  #'D',(A2)+  ;print
00002698  14FC 0051               3440      MOVE.B  #'Q',(A2)+  ;print
0000269C  14FC 002E               3441      MOVE.B  #'.',(A2)+  ;print
000026A0  14FC 0042               3442      MOVE.B  #'B',(A2)+  ;print
000026A4  6000 005A               3443      BRA     op0101decode
000026A8                          3444  
000026A8                          3445  addQ_W:
000026A8                          3446      *-get bit 9 to 11
000026A8                          3447      *-data field
000026A8                          3448      *-PRINT
000026A8  14FC 0020               3449      MOVE.B  #' ',(A2)+  ;print
000026AC  14FC 0020               3450      MOVE.B  #' ',(A2)+  ;print
000026B0  14FC 0020               3451      MOVE.B  #' ',(A2)+  ;print
000026B4  14FC 0020               3452      MOVE.B  #' ',(A2)+  ;print
000026B8  14FC 0041               3453      MOVE.B  #'A',(A2)+  ;print
000026BC  14FC 0044               3454      MOVE.B  #'D',(A2)+  ;print
000026C0  14FC 0044               3455      MOVE.B  #'D',(A2)+  ;print
000026C4  14FC 0051               3456      MOVE.B  #'Q',(A2)+  ;print
000026C8  14FC 002E               3457      MOVE.B  #'.',(A2)+  ;print
000026CC  14FC 0057               3458      MOVE.B  #'W',(A2)+  ;print
000026D0  6000 002E               3459      BRA     op0101decode
000026D4                          3460  
000026D4                          3461  addQ_L:
000026D4                          3462      *-get bit 9 to 11
000026D4                          3463      *-data field
000026D4                          3464      *-PRINT
000026D4  14FC 0020               3465      MOVE.B  #' ',(A2)+  ;print
000026D8  14FC 0020               3466      MOVE.B  #' ',(A2)+  ;print
000026DC  14FC 0020               3467      MOVE.B  #' ',(A2)+  ;print
000026E0  14FC 0020               3468      MOVE.B  #' ',(A2)+  ;print
000026E4  14FC 0041               3469      MOVE.B  #'A',(A2)+  ;print
000026E8  14FC 0044               3470      MOVE.B  #'D',(A2)+  ;print
000026EC  14FC 0044               3471      MOVE.B  #'D',(A2)+  ;print
000026F0  14FC 0051               3472      MOVE.B  #'Q',(A2)+  ;print
000026F4  14FC 002E               3473      MOVE.B  #'.',(A2)+  ;print
000026F8  14FC 004C               3474      MOVE.B  #'L',(A2)+  ;print
000026FC  6000 0002               3475      BRA     op0101decode
00002700                          3476  
00002700                          3477  op0101decode
00002700  14FC 0020               3478      MOVE.B  #' ',(A2)+  ;print
00002704  14FC 0020               3479      MOVE.B  #' ',(A2)+  ;print
00002708  14FC 0023               3480      MOVE.B  #'#',(A2)+  ;print
0000270C                          3481  
0000270C                          3482  
0000270C                          3483  
0000270C                          3484  
0000270C  4EB9 000028CE           3485      JSR get_bit_9_11_ADDQ
00002712                          3486  
00002712  C2FC 0008               3487      MULU    #8,D1       value adjusted for jumping
00002716  4DF8 1472               3488      LEA     NumTable ,A6 Load the table into A6
0000271A  4EB6 1000               3489      JSR     (A6,D1)     Jump to subroutine of value at D1
0000271E                          3490      
0000271E  14FC 002C               3491      MOVE.B  #',',(A2)+
00002722                          3492  
00002722  4EB8 156A               3493      JSR     get_3to5_bit
00002726                          3494  
00002726  4EB8 1552               3495      JSR     get_0to2_bit
0000272A                          3496  
0000272A                          3497  
0000272A  B43C 0007               3498      CMP.B   #7,D2
0000272E  6700 F5C0               3499      BEQ     immAb0010
00002732                          3500  
00002732  4EB8 156A               3501      JSR     get_3to5_bit
00002736                          3502  
00002736  4EB8 1552               3503      JSR     get_0to2_bit
0000273A                          3504  
0000273A                          3505  
0000273A  B43C 0007               3506      CMP.B   #7,D2
0000273E  6700 F5B0               3507      BEQ     immAb0010
00002742                          3508  
00002742                          3509  
00002742                          3510  
00002742                          3511  
00002742  6000 1394               3512      BRA     printCode
00002746                          3513  
00002746                          3514  immAb0101
00002746                          3515  
00002746  4DF8 11A2               3516      LEA     immAbTable, A6
0000274A  C2FC 0008               3517      MULU    #8,D1
0000274E  4EB6 1000               3518      JSR     (A6,D1)
00002752  6000 1384               3519      BRA     printCode
00002756                          3520  
00002756                          3521  
00002756                          3522  
00002756                          3523  
00002756                          3524  
00002756                          3525      
00002756                          3526  subQ_B:
00002756                          3527      *-get bit 9 to 11
00002756                          3528      *-data field
00002756                          3529      *-PRINT
00002756  14FC 0020               3530      MOVE.B  #' ',(A2)+  ;print
0000275A  14FC 0020               3531      MOVE.B  #' ',(A2)+  ;print
0000275E  14FC 0020               3532      MOVE.B  #' ',(A2)+  ;print
00002762  14FC 0020               3533      MOVE.B  #' ',(A2)+  ;print
00002766  14FC 0053               3534      MOVE.B  #'S',(A2)+  ;print
0000276A  14FC 0055               3535      MOVE.B  #'U',(A2)+  ;print
0000276E  14FC 0042               3536      MOVE.B  #'B',(A2)+  ;print
00002772  14FC 0051               3537      MOVE.B  #'Q',(A2)+  ;print
00002776  14FC 002E               3538      MOVE.B  #'.',(A2)+  ;print
0000277A  14FC 0042               3539      MOVE.B  #'B',(A2)+  ;print
0000277E  14FC 0020               3540      MOVE.B  #' ',(A2)+  ;print
00002782  14FC 0020               3541      MOVE.B  #' ',(A2)+  ;print
00002786  14FC 0023               3542      MOVE.B  #'#',(A2)+  ;print
0000278A                          3543  
0000278A                          3544  
0000278A                          3545  
0000278A                          3546  
0000278A                          3547  
0000278A                          3548  
0000278A  4EB9 000028CE           3549      JSR get_bit_9_11_ADDQ
00002790  C2FC 0008               3550      MULU    #8,D1       value adjusted for jumping
00002794  4DF8 1472               3551      LEA     NumTable ,A6 Load the table into A6
00002798  4EB6 1000               3552      JSR     (A6,D1)     Jump to subroutine of value at D1
0000279C                          3553      
0000279C  14FC 002C               3554      MOVE.B  #',',(A2)+
000027A0                          3555  
000027A0                          3556  
000027A0                          3557  
000027A0                          3558  
000027A0  4242                    3559      CLR     D2
000027A2  4241                    3560      CLR     D1
000027A4  1406                    3561      MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
000027A6  E50A                    3562      LSL.B   #2,D2       **** **** BIT* **00
000027A8  EA0A                    3563      LSR.B   #5,D2       **** **** 0000 0BIT
000027AA  1002                    3564      MOVE.B  D2,D0
000027AC  C0FC 0008               3565      MULU    #8,D0       value adjusted for jumping
000027B0  4DF8 1350               3566      LEA     modeTable,A6 Load the table into A6
000027B4  4EB6 0000               3567      JSR     (A6,D0)     Jump to subroutine of value at D0
000027B8                          3568  
000027B8                          3569  
000027B8                          3570  
000027B8                          3571      
000027B8  1206                    3572      MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
000027BA  EB09                    3573      LSL.B   #5,D1       **** **** BIT0 0000
000027BC  EA09                    3574      LSR.B   #5,D1       **** **** 0000 0BIT
000027BE  1001                    3575      MOVE.B  D1,D0
000027C0  C0FC 0008               3576      MULU    #8,D0       value adjusted for jumping
000027C4  4DF8 1402               3577      LEA     regNumTable ,A6 Load the table into A6
000027C8  4EB6 0000               3578      JSR     (A6,D0)     Jump to subroutine of value at D1
000027CC                          3579  
000027CC  4EB9 00003AD8           3580      JSR printCode
000027D2                          3581  
000027D2                          3582  
000027D2                          3583  
000027D2                          3584  
000027D2                          3585  subQ_W:
000027D2                          3586      *-get bit 9 to 11
000027D2                          3587      *-data field
000027D2                          3588      *-PRINT
000027D2  14FC 0020               3589      MOVE.B  #' ',(A2)+  ;print
000027D6  14FC 0020               3590      MOVE.B  #' ',(A2)+  ;print
000027DA  14FC 0020               3591      MOVE.B  #' ',(A2)+  ;print
000027DE  14FC 0020               3592      MOVE.B  #' ',(A2)+  ;print
000027E2  14FC 0053               3593      MOVE.B  #'S',(A2)+  ;print
000027E6  14FC 0055               3594      MOVE.B  #'U',(A2)+  ;print
000027EA  14FC 0042               3595      MOVE.B  #'B',(A2)+  ;print
000027EE  14FC 0051               3596      MOVE.B  #'Q',(A2)+  ;print
000027F2  14FC 002E               3597      MOVE.B  #'.',(A2)+  ;print
000027F6  14FC 0057               3598      MOVE.B  #'W',(A2)+  ;print
000027FA  14FC 0020               3599      MOVE.B  #' ',(A2)+  ;print
000027FE  14FC 0020               3600      MOVE.B  #' ',(A2)+  ;print
00002802  14FC 0023               3601      MOVE.B  #'#',(A2)+  ;print
00002806                          3602  
00002806                          3603  
00002806                          3604  
00002806                          3605  
00002806                          3606  
00002806                          3607  
00002806  4EB9 000028CE           3608      JSR get_bit_9_11_ADDQ
0000280C  C2FC 0008               3609      MULU    #8,D1       value adjusted for jumping
00002810  4DF8 1472               3610      LEA     NumTable ,A6 Load the table into A6
00002814  4EB6 1000               3611      JSR     (A6,D1)     Jump to subroutine of value at D1
00002818                          3612      
00002818  14FC 002C               3613      MOVE.B  #',',(A2)+
0000281C                          3614  
0000281C                          3615  
0000281C                          3616  
0000281C                          3617  
0000281C  4242                    3618      CLR     D2
0000281E  4241                    3619      CLR     D1
00002820  1406                    3620      MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
00002822  E50A                    3621      LSL.B   #2,D2       **** **** BIT* **00
00002824  EA0A                    3622      LSR.B   #5,D2       **** **** 0000 0BIT
00002826  1002                    3623      MOVE.B  D2,D0
00002828  C0FC 0008               3624      MULU    #8,D0       value adjusted for jumping
0000282C  4DF8 1350               3625      LEA     modeTable,A6 Load the table into A6
00002830  4EB6 0000               3626      JSR     (A6,D0)     Jump to subroutine of value at D0
00002834                          3627  
00002834                          3628  
00002834                          3629  
00002834                          3630      
00002834  1206                    3631      MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
00002836  EB09                    3632      LSL.B   #5,D1       **** **** BIT0 0000
00002838  EA09                    3633      LSR.B   #5,D1       **** **** 0000 0BIT
0000283A  1001                    3634      MOVE.B  D1,D0
0000283C  C0FC 0008               3635      MULU    #8,D0       value adjusted for jumping
00002840  4DF8 1402               3636      LEA     regNumTable ,A6 Load the table into A6
00002844  4EB6 0000               3637      JSR     (A6,D0)     Jump to subroutine of value at D1
00002848                          3638  
00002848  4EB9 00003AD8           3639      JSR printCode
0000284E                          3640  
0000284E                          3641  
0000284E                          3642  
0000284E                          3643  subQ_L:
0000284E                          3644      *-get bit 9 to 11
0000284E                          3645      *-data field
0000284E                          3646      *-PRINT
0000284E  14FC 0020               3647      MOVE.B  #' ',(A2)+  ;print
00002852  14FC 0020               3648      MOVE.B  #' ',(A2)+  ;print
00002856  14FC 0020               3649      MOVE.B  #' ',(A2)+  ;print
0000285A  14FC 0020               3650      MOVE.B  #' ',(A2)+  ;print
0000285E  14FC 0053               3651      MOVE.B  #'S',(A2)+  ;print
00002862  14FC 0055               3652      MOVE.B  #'U',(A2)+  ;print
00002866  14FC 0042               3653      MOVE.B  #'B',(A2)+  ;print
0000286A  14FC 0051               3654      MOVE.B  #'Q',(A2)+  ;print
0000286E  14FC 002E               3655      MOVE.B  #'.',(A2)+  ;print
00002872  14FC 004C               3656      MOVE.B  #'L',(A2)+  ;print
00002876  14FC 0020               3657      MOVE.B  #' ',(A2)+  ;print
0000287A  14FC 0020               3658      MOVE.B  #' ',(A2)+  ;print
0000287E  14FC 0023               3659      MOVE.B  #'#',(A2)+  ;print
00002882                          3660  
00002882                          3661  
00002882                          3662  
00002882                          3663  
00002882                          3664  
00002882                          3665  
00002882  4EB9 000028CE           3666      JSR get_bit_9_11_ADDQ
00002888  C2FC 0008               3667      MULU    #8,D1       value adjusted for jumping
0000288C  4DF8 1472               3668      LEA     NumTable ,A6 Load the table into A6
00002890  4EB6 1000               3669      JSR     (A6,D1)     Jump to subroutine of value at D1
00002894                          3670      
00002894  14FC 002C               3671      MOVE.B  #',',(A2)+
00002898                          3672  
00002898                          3673  
00002898                          3674  
00002898                          3675  
00002898  4242                    3676      CLR     D2
0000289A  4241                    3677      CLR     D1
0000289C  1406                    3678      MOVE.B  D6,D2       MOVE the original machine code to D2 to play with
0000289E  E50A                    3679      LSL.B   #2,D2       **** **** BIT* **00
000028A0  EA0A                    3680      LSR.B   #5,D2       **** **** 0000 0BIT
000028A2  1002                    3681      MOVE.B  D2,D0
000028A4  C0FC 0008               3682      MULU    #8,D0       value adjusted for jumping
000028A8  4DF8 1350               3683      LEA     modeTable,A6 Load the table into A6
000028AC  4EB6 0000               3684      JSR     (A6,D0)     Jump to subroutine of value at D0
000028B0                          3685  
000028B0                          3686  
000028B0                          3687  
000028B0                          3688      
000028B0  1206                    3689      MOVE.B  D6, D1      MOVE the original machine code to D1 to play with
000028B2  EB09                    3690      LSL.B   #5,D1       **** **** BIT0 0000
000028B4  EA09                    3691      LSR.B   #5,D1       **** **** 0000 0BIT
000028B6  1001                    3692      MOVE.B  D1,D0
000028B8  C0FC 0008               3693      MULU    #8,D0       value adjusted for jumping
000028BC  4DF8 1402               3694      LEA     regNumTable ,A6 Load the table into A6
000028C0  4EB6 0000               3695      JSR     (A6,D0)     Jump to subroutine of value at D1
000028C4                          3696  
000028C4  4EB9 00003AD8           3697      JSR printCode
000028CA                          3698  
000028CA                          3699  
000028CA                          3700  
000028CA                          3701  addd_8
000028CA  5001                    3702      add.b   #8,D1
000028CC  4E75                    3703      RTS
000028CE                          3704  
000028CE                          3705  get_bit_9_11_ADDQ:
000028CE                          3706      *-get bit 9 _11 which is immediate datae, and check if its zero
000028CE                          3707      *-if so add 8 ZERO repersents 8 in ADDQ
000028CE  3206                    3708      MOVE.W  D6,D1       MOVE the original machine code to D1 to play with
000028D0  E949                    3709      LSL.W   #4,D1       BIT* **** **** 0000
000028D2  E049                    3710      LSR.W   #8,D1       0000 0000 BIT* ****
000028D4  EA49                    3711      LSR.W   #5,D1       0000 0000 0000 0BIT
000028D6  B23C 0000               3712      CMP.B   #0,D1
000028DA  67EE                    3713      BEQ     addd_8
000028DC  4E75                    3714      RTS
000028DE                          3715  
000028DE                          3716   
000028DE                          3717  
000028DE                          3718  
000028DE                          3719  
000028DE                          3720  
000028DE                          3721  
000028DE                          3722  -------------------- end include --------------------
000028DE                          3723      INCLUDE 'op1110.x68'    ROR,ROL,ASR,ASL,LSL,LSR
000028DE                          3724  
000028DE                          3725  op1110:
000028DE                          3726      ;ASR,LSL,,ROR
000028DE  4EB9 00003862           3727      JSR get_shift_size
000028E4  B63C 0003               3728      CMP.B   #$03,D3     ;see if it's a ASR.W [Mem Shift]
000028E8  6700 0192               3729      BEQ     _asrMS
000028EC  B63C 000F               3730      CMP.B   #$0F,D3     ;see if it's a LSL.W [Mem Shift]
000028F0  6700 020E               3731      BEQ     _lslMS
000028F4  B63C 001B               3732      CMP.B   #$1B,D3     ;see if it's a ROR.W [Mem Shift]
000028F8  6700 0248               3733      BEQ     _rorMS
000028FC  B63C 001F               3734      CMP.B   #$1F,D3     ;see if it's a ROL.W [Mem Shift]
00002900  6700 0282               3735      BEQ     _rolMS     
00002904  B63C 000B               3736      CMP.B   #$0B,D3
00002908  6700 0130               3737      BEQ     _lsrMS
0000290C                          3738      
0000290C  B63C 0007               3739      CMP.B   #$07,D3     ASL,W memory
00002910  6700 01AC               3740      BEQ     _aslMS
00002914  4EB9 00003852           3741      JSR get_shift_normal    
0000291A  B63C 0024               3742              CMP.B   #$24,D3     ;ASL.B  Dn,Dn
0000291E  6700 06C6               3743              BEQ     aslB_RN
00002922  B63C 002C               3744               CMP.B  #$2C,D3     ASL.W   Dn,Dn
00002926  6700 076C               3745               BEQ    aslW_RN
0000292A                          3746               
0000292A  B63C 0034               3747               CMP.B  #$34,D3
0000292E  6700 085C               3748               BEQ    aslL_RN     ASL.L   Dn,Dn
00002932                          3749               
00002932                          3750               
00002932                          3751               *--IMM addressing
00002932  B63C 0020               3752               CMP.B  #$20,D3     ASL.B Imm,Dn
00002936  6700 0712               3753               BEQ    aslB_IN 
0000293A                          3754               
0000293A  B63C 0028               3755               CMP.B  #$28,D3     ASL.W   Imm,Dn
0000293E  6700 07B8               3756               BEQ    aslW_IN
00002942                          3757               
00002942  B63C 0030               3758               CMP.B  #$30,D3     ASL.L   imm,Dn
00002946  6700 07FA               3759               BEQ    aslL_IN
0000294A                          3760               
0000294A                          3761               
0000294A  B63C 0004               3762              CMP.B   #$04,D3     ; ASR.B Dn
0000294E  6700 08A0               3763              BEQ     asrB_RN   
00002952  B63C 0000               3764              CMP.B   #$00,D3     ; ASR.B Immidiate
00002956  6700 08FC               3765              BEQ     asrB_IN      
0000295A                          3766  
0000295A                          3767    
0000295A  B63C 000C               3768              CMP.B   #$0C,D3     ; ASR.W Dn
0000295E  6700 093E               3769              BEQ     asrW_RN          
00002962  B63C 0008               3770              CMP.B   #$08,D3     ; ASR.W Immidiate
00002966  6700 099A               3771              BEQ     asrW_IN          
0000296A                          3772  
0000296A                          3773  
0000296A  B63C 0014               3774              CMP.B   #$14,D3     ; ASR.L Dn
0000296E  6700 09DC               3775              BEQ     asrL_RN            
00002972  B63C 0010               3776              CMP.B   #$10,D3     ; ASR.L Immidiate
00002976  6700 0A38               3777              BEQ     asrL_IN
0000297A                          3778              
0000297A                          3779              
0000297A  B63C 0025               3780              CMP.B   #$25,D3     ; LSL.B Dn
0000297E  6700 0A7A               3781              BEQ     lslB_RN      
00002982                          3782  
00002982  B63C 0021               3783              CMP.B   #$21,D3     ; LSL.B Immidiate
00002986  6700 0AD6               3784              BEQ     lslB_IN      
0000298A                          3785  
0000298A                          3786  
0000298A  B63C 002D               3787              CMP.B   #$2D,D3     ; LSL.W Dn
0000298E  6700 0B18               3788              BEQ     lslW_RN          
00002992  B63C 0029               3789              CMP.B   #$29,D3     ; LSL.W Immidiate
00002996  6700 0B74               3790              BEQ     lslW_IN          
0000299A                          3791  
0000299A                          3792  
0000299A  B63C 0035               3793              CMP.B   #$35,D3     ; LSL.L Dn
0000299E  6700 0BB6               3794              BEQ     lslL_RN            
000029A2                          3795  
000029A2  B63C 0031               3796              CMP.B   #$31,D3     ; LSL.L Immidiate
000029A6  6700 0C12               3797              BEQ     lslL_IN
000029AA                          3798              
000029AA                          3799  
000029AA  B63C 0001               3800              CMP.B   #$01,D3 LSR.B Immidiate
000029AE  6700 0CB8               3801              BEQ     lsrB_IN
000029B2  B63C 0005               3802              CMP.B   #$05,D3 LSR.B   Dn
000029B6  6700 0C4C               3803              BEQ     lsrB_RN 
000029BA                          3804              
000029BA  B63C 0009               3805              CMP.B   #$09,D3 LSR.W   Immidiate
000029BE  6700 0D56               3806              BEQ     lsrW_IN
000029C2  B63C 000D               3807              CMP.B   #$0D,D3 LSR.W   DN
000029C6  6700 0CEA               3808              BEQ     lsrW_RN
000029CA                          3809              
000029CA  B63C 0011               3810              CMP.B   #$11,D3 LSR.L   Immidiate
000029CE  6700 0DF4               3811              BEQ     lsrL_IN 
000029D2                          3812              
000029D2  B63C 0015               3813              CMP.B   #$15,D3 LSR.L   Dn
000029D6  6700 0D88               3814              BEQ     lsrL_RN
000029DA                          3815              
000029DA  B63C 0007               3816              CMP.B   #$07,D3     ; ROR.B Dn            
000029DE  6700 01F2               3817              BEQ     rorB_RN  
000029E2  B63C 0003               3818              CMP.B   #$03,D3     ; ROR.B Immidiate
000029E6  6700 024E               3819              BEQ     rorB_IN      
000029EA                          3820      
000029EA  B63C 000B               3821              CMP.B   #$0B,D3     ; ROR.W Immidiate
000029EE  6700 0290               3822              BEQ     rorW_IN            
000029F2                          3823              
000029F2  B63C 000F               3824              CMP.B   #$0F,D3     ; ROR.W Dn
000029F6  6700 02D2               3825              BEQ     rorW_RN  
000029FA                          3826          
000029FA                          3827          
000029FA  B63C 0017               3828              CMP.B   #$17,D3     ; ROR.L Dn
000029FE  6700 032E               3829              BEQ     rorL_RN            
00002A02                          3830  
00002A02                          3831    
00002A02  B63C 0013               3832              CMP.B   #$13,D3     ; ROR.L Immidiate
00002A06  6700 038A               3833              BEQ     rorL_IN
00002A0A                          3834              
00002A0A  B63C 0027               3835              CMP.B   #$27,D3     ; ROL.B Dn
00002A0E  6700 03CC               3836              BEQ     rolB_RN      
00002A12  B63C 0023               3837      CMP.B   #$23,D3     ; ROL.B Immidiate
00002A16  6700 0428               3838      BEQ     rolB_IN      
00002A1A                          3839  
00002A1A                          3840  
00002A1A  B63C 002F               3841      CMP.B   #$2F,D3     ; ROL.W Dn
00002A1E  6700 046A               3842      BEQ     rolW_RN          
00002A22  B63C 002B               3843      CMP.B   #$2B,D3     ; ROL.W Immidiate
00002A26  6700 04C6               3844      BEQ     rolW_IN        
00002A2A                          3845  
00002A2A  B63C 0037               3846      CMP.B   #$37,D3     ; ROL.L Dn
00002A2E  6700 0508               3847      BEQ     rolL_RN            
00002A32  B63C 0033               3848      CMP.B   #$33,D3     ; ROL.L Immidiate
00002A36  6700 0564               3849      BEQ     rolL_IN
00002A3A                          3850                    
00002A3A                          3851  _lsrMS
00002A3A  1606                    3852      MOVE.B  D6,D3       ;copy data to D3
00002A3C                          3853      ;Print/store ASR here
00002A3C  14FC 0020               3854      MOVE.B  #' ',(A2)+  
00002A40  14FC 0020               3855      MOVE.B  #' ',(A2)+
00002A44  14FC 0020               3856      MOVE.B  #' ',(A2)+
00002A48  14FC 0020               3857      MOVE.B  #' ',(A2)+    
00002A4C  14FC 004C               3858      MOVE.B  #'L',(A2)+  ;print L
00002A50  14FC 0053               3859      MOVE.B  #'S',(A2)+  ;print S
00002A54  14FC 0052               3860      MOVE.B  #'R',(A2)+  ;print R
00002A58  14FC 002E               3861      MOVE.B  #'.',(A2)+  ;
00002A5C  14FC 0057               3862      MOVE.B  #'W',(A2)+  ;
00002A60  14FC 0020               3863      MOVE.B  #' ',(A2)+  ;
00002A64  14FC 0020               3864      MOVE.B  #' ',(A2)+  ;print some spaces    
00002A68  4EB8 156A               3865      JSR     get_3to5_bit   ;puts bits 3-5 ONLY in D3 
00002A6C  4EB8 1552               3866      JSR     get_0to2_bit
00002A70  B43C 0007               3867              CMP.B   #7,D2
00002A74  6700 014C               3868              BEQ     immAb1110
00002A78  6000 105E               3869      BRA     printCode
00002A7C                          3870  _asrMS
00002A7C  1606                    3871      MOVE.B  D6,D3       ;copy data to D3
00002A7E                          3872      ;Print/store ASR here
00002A7E  14FC 0020               3873      MOVE.B  #' ',(A2)+  
00002A82  14FC 0020               3874      MOVE.B  #' ',(A2)+
00002A86  14FC 0020               3875      MOVE.B  #' ',(A2)+
00002A8A  14FC 0020               3876      MOVE.B  #' ',(A2)+    
00002A8E  14FC 0041               3877      MOVE.B  #'A',(A2)+  ;print A
00002A92  14FC 0053               3878      MOVE.B  #'S',(A2)+  ;print S
00002A96  14FC 0052               3879      MOVE.B  #'R',(A2)+  ;print R
00002A9A  14FC 002E               3880      MOVE.B  #'.',(A2)+  ;
00002A9E  14FC 0057               3881      MOVE.B  #'W',(A2)+  ;
00002AA2  14FC 0020               3882      MOVE.B  #' ',(A2)+  ;
00002AA6  14FC 0020               3883      MOVE.B  #' ',(A2)+  ;print some spaces    
00002AAA  4EB8 156A               3884      JSR     get_3to5_bit   ;puts bits 3-5 ONLY in D3 
00002AAE  4EB8 1552               3885      JSR     get_0to2_bit
00002AB2  B43C 0007               3886              CMP.B   #7,D2
00002AB6  6700 010A               3887              BEQ     immAb1110
00002ABA  6000 101C               3888      BRA     printCode
00002ABE                          3889      
00002ABE                          3890      
00002ABE                          3891  _aslMS
00002ABE  1606                    3892      MOVE.B  D6,D3       ;copy data to D3
00002AC0                          3893      ;Print/store ASR here
00002AC0  14FC 0020               3894      MOVE.B  #' ',(A2)+  
00002AC4  14FC 0020               3895      MOVE.B  #' ',(A2)+
00002AC8  14FC 0020               3896      MOVE.B  #' ',(A2)+
00002ACC  14FC 0020               3897      MOVE.B  #' ',(A2)+    
00002AD0  14FC 0041               3898      MOVE.B  #'A',(A2)+  ;print A
00002AD4  14FC 0053               3899      MOVE.B  #'S',(A2)+  ;print S
00002AD8  14FC 004C               3900      MOVE.B  #'L',(A2)+  ;print R
00002ADC  14FC 002E               3901      MOVE.B  #'.',(A2)+  ;
00002AE0  14FC 0057               3902      MOVE.B  #'W',(A2)+  ;
00002AE4  14FC 0020               3903      MOVE.B  #' ',(A2)+  ;
00002AE8  14FC 0020               3904      MOVE.B  #' ',(A2)+  ;print some spaces    
00002AEC  4EB8 156A               3905      JSR     get_3to5_bit   ;puts bits 3-5 ONLY in D3 
00002AF0  4EB8 1552               3906      JSR     get_0to2_bit
00002AF4  B43C 0007               3907              CMP.B   #7,D2
00002AF8  6700 00C8               3908              BEQ     immAb1110
00002AFC  6000 0FDA               3909      BRA     printCode
00002B00                          3910      
00002B00                          3911  _lslMS
00002B00  1606                    3912      MOVE.B  D6,D3       ;copy data to D3
00002B02                          3913      ;Print/store ASR here
00002B02  14FC 0020               3914      MOVE.B  #' ',(A2)+  
00002B06  14FC 0020               3915      MOVE.B  #' ',(A2)+
00002B0A  14FC 0020               3916      MOVE.B  #' ',(A2)+
00002B0E  14FC 0020               3917      MOVE.B  #' ',(A2)+    
00002B12  14FC 004C               3918      MOVE.B  #'L',(A2)+  ;print L
00002B16  14FC 0053               3919      MOVE.B  #'S',(A2)+  ;print S
00002B1A  14FC 004C               3920      MOVE.B  #'L',(A2)+  ;print L
00002B1E  14FC 002E               3921      MOVE.B  #'.',(A2)+  ;
00002B22  14FC 0057               3922      MOVE.B  #'W',(A2)+  ;
00002B26  14FC 0020               3923      MOVE.B  #' ',(A2)+  ;
00002B2A  14FC 0020               3924      MOVE.B  #' ',(A2)+  ;print some spaces    
00002B2E  4EB8 156A               3925      JSR     get_3to5_bit   ;puts bits 3-5 ONLY in D3 
00002B32  4EB8 1552               3926      JSR     get_0to2_bit
00002B36  B43C 0007               3927              CMP.B   #7,D2
00002B3A  6700 0086               3928              BEQ     immAb1110
00002B3E  6000 0F98               3929      BRA     printCode
00002B42                          3930  
00002B42                          3931  _rorMS
00002B42  1606                    3932      MOVE.B  D6,D3       ;copy data to D3
00002B44                          3933      ;Print/store ASR here
00002B44  14FC 0020               3934      MOVE.B  #' ',(A2)+  
00002B48  14FC 0020               3935      MOVE.B  #' ',(A2)+
00002B4C  14FC 0020               3936      MOVE.B  #' ',(A2)+
00002B50  14FC 0020               3937      MOVE.B  #' ',(A2)+   
00002B54  14FC 0052               3938      MOVE.B  #'R',(A2)+  ;print A
00002B58  14FC 004F               3939      MOVE.B  #'O',(A2)+  ;print S
00002B5C  14FC 0052               3940      MOVE.B  #'R',(A2)+  ;print R
00002B60  14FC 002E               3941      MOVE.B  #'.',(A2)+  ;
00002B64  14FC 0057               3942      MOVE.B  #'W',(A2)+  ;
00002B68  14FC 0020               3943      MOVE.B  #' ',(A2)+  ;
00002B6C  14FC 0020               3944      MOVE.B  #' ',(A2)+  ;print some spaces      
00002B70  4EB8 156A               3945      JSR     get_3to5_bit   ;puts bits 3-5 ONLY in D3
00002B74  4EB8 1552               3946      JSR     get_0to2_bit 
00002B78  B43C 0007               3947              CMP.B   #7,D2
00002B7C  6700 0044               3948              BEQ     immAb1110
00002B80  6000 0F56               3949      BRA     printCode
00002B84                          3950      
00002B84                          3951  _rolMS
00002B84  1606                    3952      MOVE.B  D6,D3       ;copy data to D3
00002B86                          3953      ;Print/store ASR here
00002B86  14FC 0020               3954      MOVE.B  #' ',(A2)+  
00002B8A  14FC 0020               3955      MOVE.B  #' ',(A2)+
00002B8E  14FC 0020               3956      MOVE.B  #' ',(A2)+
00002B92  14FC 0020               3957      MOVE.B  #' ',(A2)+   
00002B96  14FC 0052               3958      MOVE.B  #'R',(A2)+  ;print A
00002B9A  14FC 004F               3959      MOVE.B  #'O',(A2)+  ;print S
00002B9E  14FC 004C               3960      MOVE.B  #'L',(A2)+  ;print R
00002BA2  14FC 002E               3961      MOVE.B  #'.',(A2)+  ;
00002BA6  14FC 0057               3962      MOVE.B  #'W',(A2)+  ;
00002BAA  14FC 0020               3963      MOVE.B  #' ',(A2)+  ;print some spaces     
00002BAE  4EB8 156A               3964      JSR     get_3to5_bit   ;puts bits 3-5 ONLY in D3 
00002BB2  4EB8 1552               3965      JSR     get_0to2_bit
00002BB6  B43C 0007               3966              CMP.B   #7,D2
00002BBA  6700 0006               3967              BEQ     immAb1110
00002BBE  6000 0F18               3968      BRA     printCode
00002BC2                          3969  immAb1110
00002BC2  4DF8 11A2               3970      LEA     immAbTable, A6
00002BC6  C2FC 0008               3971      MULU    #8,D1
00002BCA  4EB6 1000               3972      JSR     (A6,D1)
00002BCE  6000 0F08               3973      BRA     printCode        
00002BD2                          3974      
00002BD2                          3975     
00002BD2                          3976  rorB_RN
00002BD2                          3977      *-ROR.B D1,D2 dataregister ea
00002BD2  14FC 0020               3978      MOVE.B  #' ',(A2)+  ;print some spaces 
00002BD6  14FC 0020               3979      MOVE.B  #' ',(A2)+
00002BDA  14FC 0020               3980      MOVE.B  #' ',(A2)+
00002BDE  14FC 0020               3981      MOVE.B  #' ',(A2)+
00002BE2  14FC 0052               3982      MOVE.B  #'R',(A2)+  ;print R
00002BE6  14FC 004F               3983      MOVE.B  #'O',(A2)+  ;print O
00002BEA  14FC 0052               3984      MOVE.B  #'R',(A2)+  ;print R
00002BEE  14FC 002E               3985      MOVE.B  #'.',(A2)+  ;print .
00002BF2  14FC 0042               3986      MOVE.B  #'B',(A2)+  ;print B
00002BF6  14FC 0020               3987      MOVE.B  #' ',(A2)+  ;
00002BFA  14FC 0020               3988      MOVE.B  #' ',(A2)+  ;print some spaces 
00002BFE  14FC 0020               3989      MOVE.B  #' ',(A2)+
00002C02                          3990  
00002C02  14FC 0044               3991      MOVE.B  #'D',(A2)+ 
00002C06  4EB9 00003846           3992      JSR get_bit_9_11
00002C0C  4DF8 1472               3993      LEA numTable,A6     load numtable
00002C10  C6FC 0008               3994      MULU    #8,D3   prepare for the jump
00002C14  4EB6 3000               3995      JSR     (A6,D3) get the register number
00002C18                          3996      
00002C18  14FC 002C               3997      MOVE.B  #',',(A2)+
00002C1C                          3998      
00002C1C  14FC 0044               3999      MOVE.B  #'D',(A2)+
00002C20  4EB9 0000383C           4000      JSR     get_bit_0_2
00002C26                          4001      
00002C26  4DF8 1472               4002      LEA     numTable,A6
00002C2A  C6FC 0008               4003      MULU    #8,D3
00002C2E  4EB6 3000               4004      JSR     (A6,D3)     get the register number
00002C32                          4005      
00002C32  6000 0EA4               4006      BRA printCode
00002C36                          4007      
00002C36                          4008      
00002C36                          4009  rorB_IN
00002C36                          4010      *-ROR.B #,D2 immediate addressing
00002C36  14FC 0020               4011      MOVE.B  #' ',(A2)+  ;print some spaces 
00002C3A  14FC 0020               4012      MOVE.B  #' ',(A2)+
00002C3E  14FC 0020               4013      MOVE.B  #' ',(A2)+
00002C42  14FC 0020               4014      MOVE.B  #' ',(A2)+
00002C46  14FC 0052               4015      MOVE.B  #'R',(A2)+  ;print R
00002C4A  14FC 004F               4016      MOVE.B  #'O',(A2)+  ;print O
00002C4E  14FC 0052               4017      MOVE.B  #'R',(A2)+  ;print R
00002C52  14FC 002E               4018      MOVE.B  #'.',(A2)+  ;print .
00002C56  14FC 0042               4019      MOVE.B  #'B',(A2)+  ;print B
00002C5A  14FC 0020               4020      MOVE.B  #' ',(A2)+  ;
00002C5E  14FC 0020               4021      MOVE.B  #' ',(A2)+  ;print some spaces 
00002C62  14FC 0020               4022      MOVE.B  #' ',(A2)+
00002C66  14FC 0023               4023      MOVE.B  #'#',(A2)+  ;print #
00002C6A                          4024      
00002C6A  4EB9 00003846           4025      JSR get_bit_9_11
00002C70  B63C 0000               4026      CMP.B   #0,D3  *-check if value is 8
00002C74  6600 0BB6               4027      BNE shift_Not_8
00002C78  14FC 0038               4028      MOVE.B  #'8',(A2)+
00002C7C  6000 0B90               4029      BRA     shift_complete
00002C80                          4030      
00002C80                          4031  rorW_IN
00002C80                          4032      *-immeidiate data from ROR.W
00002C80                          4033          *-ROR.W #,D2 immediate addressing
00002C80  14FC 0020               4034      MOVE.B  #' ',(A2)+  ;print some spaces 
00002C84  14FC 0020               4035      MOVE.B  #' ',(A2)+
00002C88  14FC 0020               4036      MOVE.B  #' ',(A2)+
00002C8C  14FC 0020               4037      MOVE.B  #' ',(A2)+
00002C90  14FC 0052               4038      MOVE.B  #'R',(A2)+  ;print R
00002C94  14FC 004F               4039      MOVE.B  #'O',(A2)+  ;print O
00002C98  14FC 0052               4040      MOVE.B  #'R',(A2)+  ;print R
00002C9C  14FC 002E               4041      MOVE.B  #'.',(A2)+  ;print .
00002CA0  14FC 0057               4042      MOVE.B  #'W',(A2)+  ;print W
00002CA4  14FC 0020               4043      MOVE.B  #' ',(A2)+  ;
00002CA8  14FC 0020               4044      MOVE.B  #' ',(A2)+  ;print some spaces 
00002CAC  14FC 0020               4045      MOVE.B  #' ',(A2)+
00002CB0  14FC 0023               4046      MOVE.B  #'#',(A2)+  ;print #
00002CB4                          4047      
00002CB4  4EB9 00003846           4048      JSR get_bit_9_11    get the bits for the immidate data
00002CBA  B63C 0000               4049      CMP.B   #0,D3       check if its zero, meaning a move of 8
00002CBE  6600 0B6C               4050      BNE     shift_Not_8     not 8(zero) move to get the value and print reg number
00002CC2  14FC 0038               4051      MOVE.B  #'8',(A2)+
00002CC6  6000 0B46               4052      BRA     shift_complete
00002CCA                          4053      
00002CCA                          4054  
00002CCA                          4055  rorW_RN
00002CCA                          4056      *-Register data from ROR.W
00002CCA  14FC 0020               4057      MOVE.B  #' ',(A2)+  ;print some spaces 
00002CCE  14FC 0020               4058      MOVE.B  #' ',(A2)+
00002CD2  14FC 0020               4059      MOVE.B  #' ',(A2)+
00002CD6  14FC 0020               4060      MOVE.B  #' ',(A2)+
00002CDA  14FC 0052               4061      MOVE.B  #'R',(A2)+  ;print R
00002CDE  14FC 004F               4062      MOVE.B  #'O',(A2)+  ;print O
00002CE2  14FC 0052               4063      MOVE.B  #'R',(A2)+  ;print R
00002CE6  14FC 002E               4064      MOVE.B  #'.',(A2)+  ;print .
00002CEA  14FC 0057               4065      MOVE.B  #'W',(A2)+  ;print W
00002CEE  14FC 0020               4066      MOVE.B  #' ',(A2)+  ;
00002CF2  14FC 0020               4067      MOVE.B  #' ',(A2)+  ;print some spaces 
00002CF6  14FC 0020               4068      MOVE.B  #' ',(A2)+  ;print 
00002CFA                          4069      
00002CFA  14FC 0044               4070      MOVE.B  #'D',(A2)+
00002CFE  4EB9 00003846           4071      JSR get_bit_9_11
00002D04                          4072      
00002D04  4DF8 1472               4073      LEA     numTable,A6
00002D08  C6FC 0008               4074      MULU    #8,D3
00002D0C  4EB6 3000               4075      JSR     (A6,D3)
00002D10                          4076      
00002D10  14FC 002C               4077      MOVE.B  #',',(A2)+
00002D14  14FC 0044               4078      MOVE.B  #'D',(A2)+
00002D18                          4079      
00002D18  4EB9 0000383C           4080      JSR     get_bit_0_2
00002D1E                          4081      
00002D1E  4DF8 1472               4082      LEA     numTable,A6
00002D22  C6FC 0008               4083      MULU    #8,D3
00002D26  4EB6 3000               4084      JSR     (A6,D3)
00002D2A                          4085      
00002D2A  6000 0DAC               4086      BRA printCode
00002D2E                          4087      
00002D2E                          4088  rorL_RN
00002D2E                          4089      *-ROR.L #,D#
00002D2E  14FC 0020               4090      MOVE.B  #' ',(A2)+  ;print some spaces 
00002D32  14FC 0020               4091      MOVE.B  #' ',(A2)+
00002D36  14FC 0020               4092      MOVE.B  #' ',(A2)+
00002D3A  14FC 0020               4093      MOVE.B  #' ',(A2)+
00002D3E  14FC 0052               4094      MOVE.B  #'R',(A2)+  ;print R
00002D42  14FC 004F               4095      MOVE.B  #'O',(A2)+  ;print O
00002D46  14FC 0052               4096      MOVE.B  #'R',(A2)+  ;print R
00002D4A  14FC 002E               4097      MOVE.B  #'.',(A2)+  ;print .
00002D4E  14FC 004C               4098      MOVE.B  #'L',(A2)+  ;print L
00002D52  14FC 0020               4099      MOVE.B  #' ',(A2)+  ;
00002D56  14FC 0020               4100      MOVE.B  #' ',(A2)+  ;print some spaces 
00002D5A  14FC 0020               4101      MOVE.B  #' ',(A2)+  ;print 
00002D5E                          4102      
00002D5E  14FC 0044               4103      MOVE.B  #'D',(A2)+
00002D62  4EB9 00003846           4104      JSR get_bit_9_11
00002D68                          4105      
00002D68  4DF8 1472               4106      LEA     numTable,A6
00002D6C  C6FC 0008               4107      MULU    #8,D3
00002D70  4EB6 3000               4108      JSR     (A6,D3)
00002D74                          4109      
00002D74  14FC 002C               4110      MOVE.B  #',',(A2)+
00002D78  14FC 0044               4111      MOVE.B  #'D',(A2)+
00002D7C                          4112      
00002D7C  4EB9 0000383C           4113      JSR     get_bit_0_2
00002D82                          4114      
00002D82  4DF8 1472               4115      LEA     numTable,A6
00002D86  C6FC 0008               4116      MULU    #8,D3
00002D8A  4EB6 3000               4117      JSR     (A6,D3)
00002D8E                          4118      
00002D8E  6000 0D48               4119      BRA printCode
00002D92                          4120      
00002D92                          4121  rorL_IN
00002D92                          4122      *-Immediate addressing for ROR.L    #,D2
00002D92                          4123      
00002D92                          4124  
00002D92  14FC 0020               4125      MOVE.B  #' ',(A2)+  ;print some spaces 
00002D96  14FC 0020               4126      MOVE.B  #' ',(A2)+
00002D9A  14FC 0020               4127      MOVE.B  #' ',(A2)+
00002D9E  14FC 0020               4128      MOVE.B  #' ',(A2)+
00002DA2  14FC 0052               4129      MOVE.B  #'R',(A2)+  ;print R
00002DA6  14FC 004F               4130      MOVE.B  #'O',(A2)+  ;print O
00002DAA  14FC 0052               4131      MOVE.B  #'R',(A2)+  ;print R
00002DAE  14FC 002E               4132      MOVE.B  #'.',(A2)+  ;print .
00002DB2  14FC 004C               4133      MOVE.B  #'L',(A2)+  ;print L
00002DB6  14FC 0020               4134      MOVE.B  #' ',(A2)+  ;
00002DBA  14FC 0020               4135      MOVE.B  #' ',(A2)+  ;print some spaces 
00002DBE  14FC 0020               4136      MOVE.B  #' ',(A2)+
00002DC2  14FC 0023               4137      MOVE.B  #'#',(A2)+  ;print #
00002DC6                          4138      
00002DC6  4EB9 00003846           4139      JSR get_bit_9_11    get the bits for the immidate data
00002DCC  B63C 0000               4140      CMP.B   #0,D3       check if its zero, meaning a move of 8
00002DD0  6600 0A5A               4141      BNE     shift_Not_8     not 8(zero) move to get the value and print reg number
00002DD4  14FC 0038               4142      MOVE.B  #'8',(A2)+
00002DD8  6000 0A34               4143      BRA     shift_complete
00002DDC                          4144      
00002DDC                          4145      
00002DDC                          4146  rolB_RN
00002DDC                          4147      *-ROL.B D1,D2 dataregister ea
00002DDC  14FC 0020               4148      MOVE.B  #' ',(A2)+  ;print some spaces 
00002DE0  14FC 0020               4149      MOVE.B  #' ',(A2)+
00002DE4  14FC 0020               4150      MOVE.B  #' ',(A2)+
00002DE8  14FC 0020               4151      MOVE.B  #' ',(A2)+
00002DEC  14FC 0052               4152      MOVE.B  #'R',(A2)+  ;print R
00002DF0  14FC 004F               4153      MOVE.B  #'O',(A2)+  ;print O
00002DF4  14FC 004C               4154      MOVE.B  #'L',(A2)+  ;print L
00002DF8  14FC 002E               4155      MOVE.B  #'.',(A2)+  ;print .
00002DFC  14FC 0042               4156      MOVE.B  #'B',(A2)+  ;print B
00002E00  14FC 0020               4157      MOVE.B  #' ',(A2)+  ;
00002E04  14FC 0020               4158      MOVE.B  #' ',(A2)+  ;print some spaces 
00002E08  14FC 0020               4159      MOVE.B  #' ',(A2)+
00002E0C                          4160  
00002E0C  14FC 0044               4161      MOVE.B  #'D',(A2)+ 
00002E10  4EB9 00003846           4162      JSR get_bit_9_11
00002E16  4DF8 1472               4163      LEA numTable,A6     load numtable
00002E1A  C6FC 0008               4164      MULU    #8,D3   prepare for the jump
00002E1E  4EB6 3000               4165      JSR     (A6,D3) get the register number
00002E22                          4166      
00002E22  14FC 002C               4167      MOVE.B  #',',(A2)+
00002E26                          4168      
00002E26  14FC 0044               4169      MOVE.B  #'D',(A2)+
00002E2A  4EB9 0000383C           4170      JSR     get_bit_0_2
00002E30                          4171      
00002E30  4DF8 1472               4172      LEA     numTable,A6
00002E34  C6FC 0008               4173      MULU    #8,D3
00002E38  4EB6 3000               4174      JSR     (A6,D3)     get the register number
00002E3C                          4175      
00002E3C  6000 0C9A               4176      BRA printCode
00002E40                          4177      
00002E40                          4178      
00002E40                          4179  rolB_IN
00002E40                          4180      *-ROR.B #,D2 immediate addressing
00002E40  14FC 0020               4181      MOVE.B  #' ',(A2)+  ;print some spaces 
00002E44  14FC 0020               4182      MOVE.B  #' ',(A2)+
00002E48  14FC 0020               4183      MOVE.B  #' ',(A2)+
00002E4C  14FC 0020               4184      MOVE.B  #' ',(A2)+
00002E50  14FC 0052               4185      MOVE.B  #'R',(A2)+  ;print R
00002E54  14FC 004F               4186      MOVE.B  #'O',(A2)+  ;print O
00002E58  14FC 004C               4187      MOVE.B  #'L',(A2)+  ;print L
00002E5C  14FC 002E               4188      MOVE.B  #'.',(A2)+  ;print .
00002E60  14FC 0042               4189      MOVE.B  #'B',(A2)+  ;print B
00002E64  14FC 0020               4190      MOVE.B  #' ',(A2)+  ;
00002E68  14FC 0020               4191      MOVE.B  #' ',(A2)+  ;print some spaces 
00002E6C  14FC 0020               4192      MOVE.B  #' ',(A2)+
00002E70  14FC 0023               4193      MOVE.B  #'#',(A2)+  ;print #
00002E74                          4194      
00002E74  4EB9 00003846           4195      JSR get_bit_9_11
00002E7A  B63C 0000               4196      CMP.B   #0,D3  *-check if value is 8
00002E7E  6600 09AC               4197      BNE shift_Not_8
00002E82  14FC 0038               4198      MOVE.B  #'8',(A2)+
00002E86  6000 0986               4199      BRA     shift_complete
00002E8A                          4200      
00002E8A                          4201  
00002E8A                          4202  
00002E8A                          4203  rolW_RN
00002E8A                          4204      *-ROL.W D1,D2 dataregister ea
00002E8A  14FC 0020               4205      MOVE.B  #' ',(A2)+  ;print some spaces 
00002E8E  14FC 0020               4206      MOVE.B  #' ',(A2)+
00002E92  14FC 0020               4207      MOVE.B  #' ',(A2)+
00002E96  14FC 0020               4208      MOVE.B  #' ',(A2)+
00002E9A  14FC 0052               4209      MOVE.B  #'R',(A2)+  ;print R
00002E9E  14FC 004F               4210      MOVE.B  #'O',(A2)+  ;print O
00002EA2  14FC 004C               4211      MOVE.B  #'L',(A2)+  ;print L
00002EA6  14FC 002E               4212      MOVE.B  #'.',(A2)+  ;print .
00002EAA  14FC 0057               4213      MOVE.B  #'W',(A2)+  ;print W
00002EAE  14FC 0020               4214      MOVE.B  #' ',(A2)+  ;
00002EB2  14FC 0020               4215      MOVE.B  #' ',(A2)+  ;print some spaces 
00002EB6  14FC 0020               4216      MOVE.B  #' ',(A2)+
00002EBA                          4217  
00002EBA  14FC 0044               4218      MOVE.B  #'D',(A2)+ 
00002EBE  4EB9 00003846           4219      JSR get_bit_9_11
00002EC4  4DF8 1472               4220      LEA numTable,A6     load numtable
00002EC8  C6FC 0008               4221      MULU    #8,D3   prepare for the jump
00002ECC  4EB6 3000               4222      JSR     (A6,D3) get the register number
00002ED0                          4223      
00002ED0  14FC 002C               4224      MOVE.B  #',',(A2)+
00002ED4                          4225      
00002ED4  14FC 0044               4226      MOVE.B  #'D',(A2)+
00002ED8  4EB9 0000383C           4227      JSR     get_bit_0_2
00002EDE                          4228      
00002EDE  4DF8 1472               4229      LEA     numTable,A6
00002EE2  C6FC 0008               4230      MULU    #8,D3
00002EE6  4EB6 3000               4231      JSR     (A6,D3)     get the register number
00002EEA                          4232      
00002EEA  6000 0BEC               4233      BRA printCode
00002EEE                          4234      
00002EEE                          4235      
00002EEE                          4236  rolW_IN
00002EEE                          4237      *-ROR.W #,D2 immediate addressing
00002EEE  14FC 0020               4238      MOVE.B  #' ',(A2)+  ;print some spaces 
00002EF2  14FC 0020               4239      MOVE.B  #' ',(A2)+
00002EF6  14FC 0020               4240      MOVE.B  #' ',(A2)+
00002EFA  14FC 0020               4241      MOVE.B  #' ',(A2)+
00002EFE  14FC 0052               4242      MOVE.B  #'R',(A2)+  ;print R
00002F02  14FC 004F               4243      MOVE.B  #'O',(A2)+  ;print O
00002F06  14FC 004C               4244      MOVE.B  #'L',(A2)+  ;print L
00002F0A  14FC 002E               4245      MOVE.B  #'.',(A2)+  ;print .
00002F0E  14FC 0057               4246      MOVE.B  #'W',(A2)+  ;print W
00002F12  14FC 0020               4247      MOVE.B  #' ',(A2)+  ;
00002F16  14FC 0020               4248      MOVE.B  #' ',(A2)+  ;print some spaces 
00002F1A  14FC 0020               4249      MOVE.B  #' ',(A2)+
00002F1E  14FC 0023               4250      MOVE.B  #'#',(A2)+  ;print #
00002F22                          4251      
00002F22  4EB9 00003846           4252      JSR get_bit_9_11
00002F28  B63C 0000               4253      CMP.B   #0,D3  *-check if value is 8
00002F2C  6600 08FE               4254      BNE shift_Not_8
00002F30  14FC 0038               4255      MOVE.B  #'8',(A2)+
00002F34  6000 08D8               4256      BRA     shift_complete
00002F38                          4257  
00002F38                          4258    
00002F38                          4259  rolL_RN
00002F38                          4260      *-ROL.L D1,D2 dataregister ea
00002F38  14FC 0020               4261      MOVE.B  #' ',(A2)+  ;print some spaces 
00002F3C  14FC 0020               4262      MOVE.B  #' ',(A2)+
00002F40  14FC 0020               4263      MOVE.B  #' ',(A2)+
00002F44  14FC 0020               4264      MOVE.B  #' ',(A2)+
00002F48  14FC 0052               4265      MOVE.B  #'R',(A2)+  ;print R
00002F4C  14FC 004F               4266      MOVE.B  #'O',(A2)+  ;print O
00002F50  14FC 004C               4267      MOVE.B  #'L',(A2)+  ;print L
00002F54  14FC 002E               4268      MOVE.B  #'.',(A2)+  ;print .
00002F58  14FC 004C               4269      MOVE.B  #'L',(A2)+  ;print L
00002F5C  14FC 0020               4270      MOVE.B  #' ',(A2)+  ;
00002F60  14FC 0020               4271      MOVE.B  #' ',(A2)+  ;print some spaces 
00002F64  14FC 0020               4272      MOVE.B  #' ',(A2)+
00002F68                          4273  
00002F68  14FC 0044               4274      MOVE.B  #'D',(A2)+ 
00002F6C  4EB9 00003846           4275      JSR get_bit_9_11
00002F72  4DF8 1472               4276      LEA numTable,A6     load numtable
00002F76  C6FC 0008               4277      MULU    #8,D3   prepare for the jump
00002F7A  4EB6 3000               4278      JSR     (A6,D3) get the register number
00002F7E                          4279      
00002F7E  14FC 002C               4280      MOVE.B  #',',(A2)+
00002F82                          4281      
00002F82  14FC 0044               4282      MOVE.B  #'D',(A2)+
00002F86  4EB9 0000383C           4283      JSR     get_bit_0_2
00002F8C                          4284      
00002F8C  4DF8 1472               4285      LEA     numTable,A6
00002F90  C6FC 0008               4286      MULU    #8,D3
00002F94  4EB6 3000               4287      JSR     (A6,D3)     get the register number
00002F98                          4288      
00002F98  6000 0B3E               4289      BRA printCode
00002F9C                          4290      
00002F9C                          4291      
00002F9C                          4292  rolL_IN
00002F9C                          4293      *-ROR.B #,D2 immediate addressing
00002F9C  14FC 0020               4294      MOVE.B  #' ',(A2)+  ;print some spaces 
00002FA0  14FC 0020               4295      MOVE.B  #' ',(A2)+
00002FA4  14FC 0020               4296      MOVE.B  #' ',(A2)+
00002FA8  14FC 0020               4297      MOVE.B  #' ',(A2)+
00002FAC  14FC 0052               4298      MOVE.B  #'R',(A2)+  ;print R
00002FB0  14FC 004F               4299      MOVE.B  #'O',(A2)+  ;print O
00002FB4  14FC 004C               4300      MOVE.B  #'L',(A2)+  ;print L
00002FB8  14FC 002E               4301      MOVE.B  #'.',(A2)+  ;print .
00002FBC  14FC 004C               4302      MOVE.B  #'L',(A2)+  ;print L
00002FC0  14FC 0020               4303      MOVE.B  #' ',(A2)+  ;
00002FC4  14FC 0020               4304      MOVE.B  #' ',(A2)+  ;print some spaces 
00002FC8  14FC 0020               4305      MOVE.B  #' ',(A2)+
00002FCC  14FC 0023               4306      MOVE.B  #'#',(A2)+  ;print #
00002FD0                          4307      
00002FD0  4EB9 00003846           4308      JSR get_bit_9_11
00002FD6  B63C 0000               4309      CMP.B   #0,D3  *-check if value is 8
00002FDA  6600 0850               4310      BNE shift_Not_8
00002FDE  14FC 0038               4311      MOVE.B  #'8',(A2)+
00002FE2  6000 082A               4312      BRA     shift_complete
00002FE6                          4313      
00002FE6                          4314  
00002FE6                          4315  
00002FE6                          4316  aslB_RN
00002FE6                          4317      *ASR.B #,Dn
00002FE6                          4318      
00002FE6                          4319      
00002FE6  14FC 0020               4320      MOVE.B  #' ',(A2)+  ;print some spaces 
00002FEA  14FC 0020               4321      MOVE.B  #' ',(A2)+
00002FEE  14FC 0020               4322      MOVE.B  #' ',(A2)+
00002FF2  14FC 0020               4323      MOVE.B  #' ',(A2)+
00002FF6  14FC 0041               4324      MOVE.B  #'A',(A2)+  ;print A
00002FFA  14FC 0053               4325      MOVE.B  #'S',(A2)+  ;print S
00002FFE  14FC 004C               4326      MOVE.B  #'L',(A2)+  ;print R
00003002  14FC 002E               4327      MOVE.B  #'.',(A2)+  ;print .
00003006  14FC 0042               4328      MOVE.B  #'B',(A2)+  ;print 
0000300A  14FC 0020               4329      MOVE.B  #' ',(A2)+  ;
0000300E  14FC 0020               4330      MOVE.B  #' ',(A2)+  ;print some spaces 
00003012  14FC 0020               4331      MOVE.B  #' ',(A2)+
00003016  14FC 0044               4332      MOVE.B  #'D',(A2)+ 
0000301A  4EB9 00003846           4333      JSR     get_bit_9_11
00003020  4DF8 1472               4334      LEA     numTable,A6
00003024  C6FC 0008               4335      MULU    #8,D3
00003028  4EB6 3000               4336      JSR     (A6,D3)
0000302C                          4337      
0000302C  14FC 002C               4338      MOVE.B  #',',(A2)+
00003030  14FC 0044               4339      MOVE.B  #'D',(A2)+
00003034  4EB9 0000383C           4340      JSR get_bit_0_2
0000303A                          4341      
0000303A  4DF8 1472               4342      LEA     numTable,A6
0000303E  C6FC 0008               4343      MULU    #8,D3
00003042  4EB6 3000               4344      JSR     (A6,D3)
00003046                          4345      
00003046  6000 0A90               4346      BRA     printCode
0000304A                          4347      
0000304A                          4348      
0000304A                          4349  aslB_IN
0000304A                          4350      
0000304A  14FC 0020               4351      MOVE.B  #' ',(A2)+  ;print some spaces 
0000304E  14FC 0020               4352      MOVE.B  #' ',(A2)+
00003052  14FC 0020               4353      MOVE.B  #' ',(A2)+
00003056  14FC 0020               4354      MOVE.B  #' ',(A2)+
0000305A  14FC 0041               4355      MOVE.B  #'A',(A2)+  ;print A
0000305E  14FC 0053               4356      MOVE.B  #'S',(A2)+  ;print S
00003062  14FC 004C               4357      MOVE.B  #'L',(A2)+  ;print L
00003066  14FC 002E               4358      MOVE.B  #'.',(A2)+  ;print .
0000306A  14FC 0042               4359      MOVE.B  #'B',(A2)+  ;print 
0000306E  14FC 0020               4360      MOVE.B  #' ',(A2)+  ;
00003072  14FC 0020               4361      MOVE.B  #' ',(A2)+  ;print some spaces 
00003076  14FC 0020               4362      MOVE.B  #' ',(A2)+
0000307A  14FC 0023               4363      MOVE.B  #'#',(A2)+
0000307E                          4364      
0000307E  4EB9 00003846           4365      JSR     get_bit_9_11
00003084  B63C 0000               4366      CMP.B   #0,D3
00003088  6600 07A2               4367      BNE     shift_Not_8
0000308C  14FC 0038               4368      MOVE.B  #'8',(A2)+
00003090  6000 077C               4369      BRA     shift_complete
00003094                          4370   
00003094                          4371  aslW_RN
00003094                          4372      *ASR.B #,Dn
00003094                          4373      
00003094                          4374      
00003094  14FC 0020               4375      MOVE.B  #' ',(A2)+  ;print some spaces 
00003098  14FC 0020               4376      MOVE.B  #' ',(A2)+
0000309C  14FC 0020               4377      MOVE.B  #' ',(A2)+
000030A0  14FC 0020               4378      MOVE.B  #' ',(A2)+
000030A4  14FC 0041               4379      MOVE.B  #'A',(A2)+  ;print A
000030A8  14FC 0053               4380      MOVE.B  #'S',(A2)+  ;print S
000030AC  14FC 004C               4381      MOVE.B  #'L',(A2)+  ;print R
000030B0  14FC 002E               4382      MOVE.B  #'.',(A2)+  ;print .
000030B4  14FC 0057               4383      MOVE.B  #'W',(A2)+  ;print W
000030B8  14FC 0020               4384      MOVE.B  #' ',(A2)+  ;
000030BC  14FC 0020               4385      MOVE.B  #' ',(A2)+  ;print some spaces 
000030C0  14FC 0020               4386      MOVE.B  #' ',(A2)+
000030C4  14FC 0044               4387      MOVE.B  #'D',(A2)+ 
000030C8  4EB9 00003846           4388      JSR     get_bit_9_11
000030CE  4DF8 1472               4389      LEA     numTable,A6
000030D2  C6FC 0008               4390      MULU    #8,D3
000030D6  4EB6 3000               4391      JSR     (A6,D3)
000030DA                          4392      
000030DA  14FC 002C               4393      MOVE.B  #',',(A2)+
000030DE  14FC 0044               4394      MOVE.B  #'D',(A2)+
000030E2  4EB9 0000383C           4395      JSR get_bit_0_2
000030E8                          4396      
000030E8  4DF8 1472               4397      LEA     numTable,A6
000030EC  C6FC 0008               4398      MULU    #8,D3
000030F0  4EB6 3000               4399      JSR     (A6,D3)
000030F4                          4400      
000030F4  6000 09E2               4401      BRA     printCode
000030F8                          4402      
000030F8                          4403      
000030F8                          4404  aslW_IN
000030F8                          4405      
000030F8  14FC 0020               4406      MOVE.B  #' ',(A2)+  ;print some spaces 
000030FC  14FC 0020               4407      MOVE.B  #' ',(A2)+
00003100  14FC 0020               4408      MOVE.B  #' ',(A2)+
00003104  14FC 0020               4409      MOVE.B  #' ',(A2)+
00003108  14FC 0041               4410      MOVE.B  #'A',(A2)+  ;print A
0000310C  14FC 0053               4411      MOVE.B  #'S',(A2)+  ;print S
00003110  14FC 0052               4412      MOVE.B  #'R',(A2)+  ;print R
00003114  14FC 002E               4413      MOVE.B  #'.',(A2)+  ;print .
00003118  14FC 0057               4414      MOVE.B  #'W',(A2)+  ;print W
0000311C  14FC 0020               4415      MOVE.B  #' ',(A2)+  ;
00003120  14FC 0020               4416      MOVE.B  #' ',(A2)+  ;print some spaces 
00003124  14FC 0020               4417      MOVE.B  #' ',(A2)+
00003128  14FC 0023               4418      MOVE.B  #'#',(A2)+
0000312C                          4419      
0000312C  4EB9 00003846           4420      JSR     get_bit_9_11
00003132  B63C 0000               4421      CMP.B   #0,D3
00003136  6600 06F4               4422      BNE     shift_Not_8
0000313A  14FC 0038               4423      MOVE.B  #'8',(A2)+
0000313E  6000 06CE               4424      BRA     shift_complete
00003142                          4425  
00003142                          4426  
00003142                          4427  
00003142                          4428          
00003142                          4429  aslL_IN
00003142                          4430      
00003142  14FC 0020               4431      MOVE.B  #' ',(A2)+  ;print some spaces 
00003146  14FC 0020               4432      MOVE.B  #' ',(A2)+
0000314A  14FC 0020               4433      MOVE.B  #' ',(A2)+
0000314E  14FC 0020               4434      MOVE.B  #' ',(A2)+
00003152  14FC 0041               4435      MOVE.B  #'A',(A2)+  ;print A
00003156  14FC 0053               4436      MOVE.B  #'S',(A2)+  ;print S
0000315A  14FC 004C               4437      MOVE.B  #'L',(A2)+  ;print R
0000315E  14FC 002E               4438      MOVE.B  #'.',(A2)+  ;print .
00003162  14FC 004C               4439      MOVE.B  #'L',(A2)+  ;print W
00003166  14FC 0020               4440      MOVE.B  #' ',(A2)+  ;
0000316A  14FC 0020               4441      MOVE.B  #' ',(A2)+  ;print some spaces 
0000316E  14FC 0020               4442      MOVE.B  #' ',(A2)+
00003172  14FC 0023               4443      MOVE.B  #'#',(A2)+
00003176                          4444      
00003176  4EB9 00003846           4445      JSR     get_bit_9_11
0000317C  B63C 0000               4446      CMP.B   #0,D3
00003180  6600 06AA               4447      BNE     shift_Not_8
00003184  14FC 0038               4448      MOVE.B  #'8',(A2)+
00003188  6000 0684               4449      BRA     shift_complete
0000318C                          4450  
0000318C                          4451  
0000318C                          4452  aslL_RN
0000318C                          4453      *LSL.B #,Dn
0000318C                          4454      
0000318C                          4455      
0000318C  14FC 0020               4456      MOVE.B  #' ',(A2)+  ;print some spaces 
00003190  14FC 0020               4457      MOVE.B  #' ',(A2)+
00003194  14FC 0020               4458      MOVE.B  #' ',(A2)+
00003198  14FC 0020               4459      MOVE.B  #' ',(A2)+
0000319C  14FC 0041               4460      MOVE.B  #'A',(A2)+  ;print L
000031A0  14FC 0053               4461      MOVE.B  #'S',(A2)+  ;print S
000031A4  14FC 004C               4462      MOVE.B  #'L',(A2)+  ;print L
000031A8  14FC 002E               4463      MOVE.B  #'.',(A2)+  ;print .
000031AC  14FC 004C               4464      MOVE.B  #'L',(A2)+  ;print 
000031B0  14FC 0020               4465      MOVE.B  #' ',(A2)+  ;
000031B4  14FC 0020               4466      MOVE.B  #' ',(A2)+  ;print some spaces 
000031B8  14FC 0020               4467      MOVE.B  #' ',(A2)+
000031BC  14FC 0044               4468      MOVE.B  #'D',(A2)+ 
000031C0  4EB9 00003846           4469      JSR     get_bit_9_11
000031C6                          4470     
000031C6  4DF8 1472               4471      LEA     numTable,A6
000031CA  C6FC 0008               4472      MULU    #8,D3
000031CE  4EB6 3000               4473      JSR     (A6,D3)
000031D2                          4474      
000031D2  14FC 002C               4475      MOVE.B  #',',(A2)+
000031D6  14FC 0044               4476      MOVE.B  #'D',(A2)+
000031DA  4EB9 0000383C           4477      JSR get_bit_0_2
000031E0                          4478      
000031E0  4DF8 1472               4479      LEA     numTable,A6
000031E4  C6FC 0008               4480      MULU    #8,D3
000031E8  4EB6 3000               4481      JSR     (A6,D3)
000031EC                          4482      
000031EC  6000 08EA               4483      BRA     printCode
000031F0                          4484      *---------------------------------------------------
000031F0                          4485      
000031F0                          4486      
000031F0                          4487      
000031F0                          4488  asrB_RN
000031F0                          4489      *ASR.B #,Dn
000031F0                          4490      
000031F0                          4491      
000031F0  14FC 0020               4492      MOVE.B  #' ',(A2)+  ;print some spaces 
000031F4  14FC 0020               4493      MOVE.B  #' ',(A2)+
000031F8  14FC 0020               4494      MOVE.B  #' ',(A2)+
000031FC  14FC 0020               4495      MOVE.B  #' ',(A2)+
00003200  14FC 0041               4496      MOVE.B  #'A',(A2)+  ;print A
00003204  14FC 0053               4497      MOVE.B  #'S',(A2)+  ;print S
00003208  14FC 0052               4498      MOVE.B  #'R',(A2)+  ;print R
0000320C  14FC 002E               4499      MOVE.B  #'.',(A2)+  ;print .
00003210  14FC 0042               4500      MOVE.B  #'B',(A2)+  ;print W
00003214  14FC 0020               4501      MOVE.B  #' ',(A2)+  ;
00003218  14FC 0020               4502      MOVE.B  #' ',(A2)+  ;print some spaces 
0000321C  14FC 0020               4503      MOVE.B  #' ',(A2)+
00003220  14FC 0044               4504      MOVE.B  #'D',(A2)+ 
00003224  4EB9 00003846           4505      JSR     get_bit_9_11
0000322A  4DF8 1472               4506      LEA     numTable,A6
0000322E  C6FC 0008               4507      MULU    #8,D3
00003232  4EB6 3000               4508      JSR     (A6,D3)
00003236                          4509      
00003236  14FC 002C               4510      MOVE.B  #',',(A2)+
0000323A  14FC 0044               4511      MOVE.B  #'D',(A2)+
0000323E  4EB9 0000383C           4512      JSR get_bit_0_2
00003244                          4513      
00003244  4DF8 1472               4514      LEA     numTable,A6
00003248  C6FC 0008               4515      MULU    #8,D3
0000324C  4EB6 3000               4516      JSR     (A6,D3)
00003250                          4517      
00003250  6000 0886               4518      BRA     printCode
00003254                          4519      
00003254                          4520  asrB_IN
00003254                          4521      
00003254  14FC 0020               4522      MOVE.B  #' ',(A2)+  ;print some spaces 
00003258  14FC 0020               4523      MOVE.B  #' ',(A2)+
0000325C  14FC 0020               4524      MOVE.B  #' ',(A2)+
00003260  14FC 0020               4525      MOVE.B  #' ',(A2)+
00003264  14FC 0041               4526      MOVE.B  #'A',(A2)+  ;print A
00003268  14FC 0053               4527      MOVE.B  #'S',(A2)+  ;print S
0000326C  14FC 0052               4528      MOVE.B  #'R',(A2)+  ;print R
00003270  14FC 002E               4529      MOVE.B  #'.',(A2)+  ;print .
00003274  14FC 0042               4530      MOVE.B  #'B',(A2)+  ;print 
00003278  14FC 0020               4531      MOVE.B  #' ',(A2)+  ;
0000327C  14FC 0020               4532      MOVE.B  #' ',(A2)+  ;print some spaces 
00003280  14FC 0020               4533      MOVE.B  #' ',(A2)+
00003284  14FC 0023               4534      MOVE.B  #'#',(A2)+
00003288                          4535      
00003288  4EB9 00003846           4536      JSR     get_bit_9_11
0000328E  B63C 0000               4537      CMP.B   #0,D3
00003292  6600 0598               4538      BNE     shift_Not_8
00003296  14FC 0038               4539      MOVE.B  #'8',(A2)+
0000329A  6000 0572               4540      BRA     shift_complete
0000329E                          4541  
0000329E                          4542  
0000329E                          4543  
0000329E                          4544  asrW_RN
0000329E                          4545      *ASR.B #,Dn
0000329E                          4546      
0000329E                          4547      
0000329E  14FC 0020               4548      MOVE.B  #' ',(A2)+  ;print some spaces 
000032A2  14FC 0020               4549      MOVE.B  #' ',(A2)+
000032A6  14FC 0020               4550      MOVE.B  #' ',(A2)+
000032AA  14FC 0020               4551      MOVE.B  #' ',(A2)+
000032AE  14FC 0041               4552      MOVE.B  #'A',(A2)+  ;print A
000032B2  14FC 0053               4553      MOVE.B  #'S',(A2)+  ;print S
000032B6  14FC 0052               4554      MOVE.B  #'R',(A2)+  ;print R
000032BA  14FC 002E               4555      MOVE.B  #'.',(A2)+  ;print .
000032BE  14FC 0057               4556      MOVE.B  #'W',(A2)+  ;print W
000032C2  14FC 0020               4557      MOVE.B  #' ',(A2)+  ;
000032C6  14FC 0020               4558      MOVE.B  #' ',(A2)+  ;print some spaces 
000032CA  14FC 0020               4559      MOVE.B  #' ',(A2)+
000032CE  14FC 0044               4560      MOVE.B  #'D',(A2)+ 
000032D2  4EB9 00003846           4561      JSR     get_bit_9_11
000032D8  4DF8 1472               4562      LEA     numTable,A6
000032DC  C6FC 0008               4563      MULU    #8,D3
000032E0  4EB6 3000               4564      JSR     (A6,D3)
000032E4                          4565      
000032E4  14FC 002C               4566      MOVE.B  #',',(A2)+
000032E8  14FC 0044               4567      MOVE.B  #'D',(A2)+
000032EC  4EB9 0000383C           4568      JSR get_bit_0_2
000032F2                          4569      
000032F2  4DF8 1472               4570      LEA     numTable,A6
000032F6  C6FC 0008               4571      MULU    #8,D3
000032FA  4EB6 3000               4572      JSR     (A6,D3)
000032FE                          4573      
000032FE  6000 07D8               4574      BRA     printCode
00003302                          4575      
00003302                          4576      
00003302                          4577  asrW_IN
00003302                          4578      
00003302  14FC 0020               4579      MOVE.B  #' ',(A2)+  ;print some spaces 
00003306  14FC 0020               4580      MOVE.B  #' ',(A2)+
0000330A  14FC 0020               4581      MOVE.B  #' ',(A2)+
0000330E  14FC 0020               4582      MOVE.B  #' ',(A2)+
00003312  14FC 0041               4583      MOVE.B  #'A',(A2)+  ;print A
00003316  14FC 0053               4584      MOVE.B  #'S',(A2)+  ;print S
0000331A  14FC 0052               4585      MOVE.B  #'R',(A2)+  ;print R
0000331E  14FC 002E               4586      MOVE.B  #'.',(A2)+  ;print .
00003322  14FC 0057               4587      MOVE.B  #'W',(A2)+  ;print W
00003326  14FC 0020               4588      MOVE.B  #' ',(A2)+  ;
0000332A  14FC 0020               4589      MOVE.B  #' ',(A2)+  ;print some spaces 
0000332E  14FC 0020               4590      MOVE.B  #' ',(A2)+
00003332  14FC 0023               4591      MOVE.B  #'#',(A2)+
00003336                          4592      
00003336  4EB9 00003846           4593      JSR     get_bit_9_11
0000333C  B63C 0000               4594      CMP.B   #0,D3
00003340  6600 04EA               4595      BNE     shift_Not_8
00003344  14FC 0038               4596      MOVE.B  #'8',(A2)+
00003348  6000 04C4               4597      BRA     shift_complete
0000334C                          4598  
0000334C                          4599  
0000334C                          4600  
0000334C                          4601  
0000334C                          4602  asrL_RN
0000334C                          4603      *ASR.B #,Dn
0000334C                          4604      
0000334C                          4605      
0000334C  14FC 0020               4606      MOVE.B  #' ',(A2)+  ;print some spaces 
00003350  14FC 0020               4607      MOVE.B  #' ',(A2)+
00003354  14FC 0020               4608      MOVE.B  #' ',(A2)+
00003358  14FC 0020               4609      MOVE.B  #' ',(A2)+
0000335C  14FC 0041               4610      MOVE.B  #'A',(A2)+  ;print A
00003360  14FC 0053               4611      MOVE.B  #'S',(A2)+  ;print S
00003364  14FC 0052               4612      MOVE.B  #'R',(A2)+  ;print R
00003368  14FC 002E               4613      MOVE.B  #'.',(A2)+  ;print .
0000336C  14FC 004C               4614      MOVE.B  #'L',(A2)+  ;print W
00003370  14FC 0020               4615      MOVE.B  #' ',(A2)+  ;
00003374  14FC 0020               4616      MOVE.B  #' ',(A2)+  ;print some spaces 
00003378  14FC 0020               4617      MOVE.B  #' ',(A2)+
0000337C  14FC 0044               4618      MOVE.B  #'D',(A2)+ 
00003380  4EB9 00003846           4619      JSR     get_bit_9_11
00003386  4DF8 1472               4620      LEA     numTable,A6
0000338A  C6FC 0008               4621      MULU    #8,D3
0000338E  4EB6 3000               4622      JSR     (A6,D3)
00003392                          4623      
00003392  14FC 002C               4624      MOVE.B  #',',(A2)+
00003396  14FC 0044               4625      MOVE.B  #'D',(A2)+
0000339A  4EB9 0000383C           4626      JSR get_bit_0_2
000033A0                          4627      
000033A0  4DF8 1472               4628      LEA     numTable,A6
000033A4  C6FC 0008               4629      MULU    #8,D3
000033A8  4EB6 3000               4630      JSR     (A6,D3)
000033AC                          4631      
000033AC  6000 072A               4632      BRA     printCode
000033B0                          4633      
000033B0                          4634      
000033B0                          4635  asrL_IN
000033B0                          4636      
000033B0  14FC 0020               4637      MOVE.B  #' ',(A2)+  ;print some spaces 
000033B4  14FC 0020               4638      MOVE.B  #' ',(A2)+
000033B8  14FC 0020               4639      MOVE.B  #' ',(A2)+
000033BC  14FC 0020               4640      MOVE.B  #' ',(A2)+
000033C0  14FC 0041               4641      MOVE.B  #'A',(A2)+  ;print A
000033C4  14FC 0053               4642      MOVE.B  #'S',(A2)+  ;print S
000033C8  14FC 0052               4643      MOVE.B  #'R',(A2)+  ;print R
000033CC  14FC 002E               4644      MOVE.B  #'.',(A2)+  ;print .
000033D0  14FC 004C               4645      MOVE.B  #'L',(A2)+  ;print W
000033D4  14FC 0020               4646      MOVE.B  #' ',(A2)+  ;
000033D8  14FC 0020               4647      MOVE.B  #' ',(A2)+  ;print some spaces 
000033DC  14FC 0020               4648      MOVE.B  #' ',(A2)+
000033E0  14FC 0023               4649      MOVE.B  #'#',(A2)+
000033E4                          4650      
000033E4  4EB9 00003846           4651      JSR     get_bit_9_11
000033EA  B63C 0000               4652      CMP.B   #0,D3
000033EE  6600 043C               4653      BNE     shift_Not_8
000033F2  14FC 0038               4654      MOVE.B  #'8',(A2)+
000033F6  6000 0416               4655      BRA     shift_complete
000033FA                          4656  
000033FA                          4657  
000033FA                          4658  lslB_RN
000033FA                          4659      *LSL.B #,Dn
000033FA                          4660      
000033FA                          4661      
000033FA  14FC 0020               4662      MOVE.B  #' ',(A2)+  ;print some spaces 
000033FE  14FC 0020               4663      MOVE.B  #' ',(A2)+
00003402  14FC 0020               4664      MOVE.B  #' ',(A2)+
00003406  14FC 0020               4665      MOVE.B  #' ',(A2)+
0000340A  14FC 004C               4666      MOVE.B  #'L',(A2)+  ;print L
0000340E  14FC 0053               4667      MOVE.B  #'S',(A2)+  ;print S
00003412  14FC 004C               4668      MOVE.B  #'L',(A2)+  ;print L
00003416  14FC 002E               4669      MOVE.B  #'.',(A2)+  ;print .
0000341A  14FC 0042               4670      MOVE.B  #'B',(A2)+  ;print 
0000341E  14FC 0020               4671      MOVE.B  #' ',(A2)+  ;
00003422  14FC 0020               4672      MOVE.B  #' ',(A2)+  ;print some spaces 
00003426  14FC 0020               4673      MOVE.B  #' ',(A2)+
0000342A  14FC 0044               4674      MOVE.B  #'D',(A2)+ 
0000342E  4EB9 00003846           4675      JSR     get_bit_9_11
00003434                          4676     
00003434  4DF8 1472               4677      LEA     numTable,A6
00003438  C6FC 0008               4678      MULU    #8,D3
0000343C  4EB6 3000               4679      JSR     (A6,D3)
00003440                          4680      
00003440  14FC 002C               4681      MOVE.B  #',',(A2)+
00003444  14FC 0044               4682      MOVE.B  #'D',(A2)+
00003448  4EB9 0000383C           4683      JSR get_bit_0_2
0000344E                          4684      
0000344E  4DF8 1472               4685      LEA     numTable,A6
00003452  C6FC 0008               4686      MULU    #8,D3
00003456  4EB6 3000               4687      JSR     (A6,D3)
0000345A                          4688      
0000345A  6000 067C               4689      BRA     printCode
0000345E                          4690      
0000345E                          4691      
0000345E                          4692  lslB_IN
0000345E                          4693      
0000345E  14FC 0020               4694      MOVE.B  #' ',(A2)+  ;print some spaces 
00003462  14FC 0020               4695      MOVE.B  #' ',(A2)+
00003466  14FC 0020               4696      MOVE.B  #' ',(A2)+
0000346A  14FC 0020               4697      MOVE.B  #' ',(A2)+
0000346E  14FC 004C               4698      MOVE.B  #'L',(A2)+  ;print L
00003472  14FC 0053               4699      MOVE.B  #'S',(A2)+  ;print S
00003476  14FC 004C               4700      MOVE.B  #'L',(A2)+  ;print L
0000347A  14FC 002E               4701      MOVE.B  #'.',(A2)+  ;print .
0000347E  14FC 0042               4702      MOVE.B  #'B',(A2)+  ;print 
00003482  14FC 0020               4703      MOVE.B  #' ',(A2)+  ;
00003486  14FC 0020               4704      MOVE.B  #' ',(A2)+  ;print some spaces 
0000348A  14FC 0020               4705      MOVE.B  #' ',(A2)+
0000348E  14FC 0023               4706      MOVE.B  #'#',(A2)+
00003492                          4707      
00003492  4EB9 00003846           4708      JSR     get_bit_9_11
00003498  B63C 0000               4709      CMP.B   #0,D3
0000349C  6600 038E               4710      BNE     shift_Not_8
000034A0  14FC 0038               4711      MOVE.B  #'8',(A2)+
000034A4  6000 0368               4712      BRA     shift_complete
000034A8                          4713  
000034A8                          4714  
000034A8                          4715  
000034A8                          4716  
000034A8                          4717  
000034A8                          4718  lslW_RN
000034A8                          4719      *LSL.B #,Dn
000034A8                          4720      
000034A8                          4721      
000034A8  14FC 0020               4722      MOVE.B  #' ',(A2)+  ;print some spaces 
000034AC  14FC 0020               4723      MOVE.B  #' ',(A2)+
000034B0  14FC 0020               4724      MOVE.B  #' ',(A2)+
000034B4  14FC 0020               4725      MOVE.B  #' ',(A2)+
000034B8  14FC 004C               4726      MOVE.B  #'L',(A2)+  ;print L
000034BC  14FC 0053               4727      MOVE.B  #'S',(A2)+  ;print S
000034C0  14FC 004C               4728      MOVE.B  #'L',(A2)+  ;print L
000034C4  14FC 002E               4729      MOVE.B  #'.',(A2)+  ;print .
000034C8  14FC 0057               4730      MOVE.B  #'W',(A2)+  ;print 
000034CC  14FC 0020               4731      MOVE.B  #' ',(A2)+  ;
000034D0  14FC 0020               4732      MOVE.B  #' ',(A2)+  ;print some spaces 
000034D4  14FC 0020               4733      MOVE.B  #' ',(A2)+
000034D8  14FC 0044               4734      MOVE.B  #'D',(A2)+ 
000034DC  4EB9 00003846           4735      JSR     get_bit_9_11
000034E2                          4736     
000034E2  4DF8 1472               4737      LEA     numTable,A6
000034E6  C6FC 0008               4738      MULU    #8,D3
000034EA  4EB6 3000               4739      JSR     (A6,D3)
000034EE                          4740      
000034EE  14FC 002C               4741      MOVE.B  #',',(A2)+
000034F2  14FC 0044               4742      MOVE.B  #'D',(A2)+
000034F6  4EB9 0000383C           4743      JSR get_bit_0_2
000034FC                          4744      
000034FC  4DF8 1472               4745      LEA     numTable,A6
00003500  C6FC 0008               4746      MULU    #8,D3
00003504  4EB6 3000               4747      JSR     (A6,D3)
00003508                          4748      
00003508  6000 05CE               4749      BRA     printCode
0000350C                          4750      
0000350C                          4751      
0000350C                          4752  lslW_IN
0000350C                          4753      
0000350C  14FC 0020               4754      MOVE.B  #' ',(A2)+  ;print some spaces 
00003510  14FC 0020               4755      MOVE.B  #' ',(A2)+
00003514  14FC 0020               4756      MOVE.B  #' ',(A2)+
00003518  14FC 0020               4757      MOVE.B  #' ',(A2)+
0000351C  14FC 004C               4758      MOVE.B  #'L',(A2)+  ;print L
00003520  14FC 0053               4759      MOVE.B  #'S',(A2)+  ;print S
00003524  14FC 004C               4760      MOVE.B  #'L',(A2)+  ;print L
00003528  14FC 002E               4761      MOVE.B  #'.',(A2)+  ;print .
0000352C  14FC 0057               4762      MOVE.B  #'W',(A2)+  ;print 
00003530  14FC 0020               4763      MOVE.B  #' ',(A2)+  ;
00003534  14FC 0020               4764      MOVE.B  #' ',(A2)+  ;print some spaces 
00003538  14FC 0020               4765      MOVE.B  #' ',(A2)+
0000353C  14FC 0023               4766      MOVE.B  #'#',(A2)+
00003540                          4767      
00003540  4EB9 00003846           4768      JSR     get_bit_9_11
00003546  B63C 0000               4769      CMP.B   #0,D3
0000354A  6600 02E0               4770      BNE     shift_Not_8
0000354E  14FC 0038               4771      MOVE.B  #'8',(A2)+
00003552  6000 02BA               4772      BRA     shift_complete
00003556                          4773  
00003556                          4774  
00003556                          4775  
00003556                          4776  
00003556                          4777  
00003556                          4778  lslL_RN
00003556                          4779      *LSL.B #,Dn
00003556                          4780      
00003556                          4781      
00003556  14FC 0020               4782      MOVE.B  #' ',(A2)+  ;print some spaces 
0000355A  14FC 0020               4783      MOVE.B  #' ',(A2)+
0000355E  14FC 0020               4784      MOVE.B  #' ',(A2)+
00003562  14FC 0020               4785      MOVE.B  #' ',(A2)+
00003566  14FC 004C               4786      MOVE.B  #'L',(A2)+  ;print L
0000356A  14FC 0053               4787      MOVE.B  #'S',(A2)+  ;print S
0000356E  14FC 004C               4788      MOVE.B  #'L',(A2)+  ;print L
00003572  14FC 002E               4789      MOVE.B  #'.',(A2)+  ;print .
00003576  14FC 004C               4790      MOVE.B  #'L',(A2)+  ;print 
0000357A  14FC 0020               4791      MOVE.B  #' ',(A2)+  ;
0000357E  14FC 0020               4792      MOVE.B  #' ',(A2)+  ;print some spaces 
00003582  14FC 0020               4793      MOVE.B  #' ',(A2)+
00003586  14FC 0044               4794      MOVE.B  #'D',(A2)+ 
0000358A  4EB9 00003846           4795      JSR     get_bit_9_11
00003590                          4796     
00003590  4DF8 1472               4797      LEA     numTable,A6
00003594  C6FC 0008               4798      MULU    #8,D3
00003598  4EB6 3000               4799      JSR     (A6,D3)
0000359C                          4800      
0000359C  14FC 002C               4801      MOVE.B  #',',(A2)+
000035A0  14FC 0044               4802      MOVE.B  #'D',(A2)+
000035A4  4EB9 0000383C           4803      JSR get_bit_0_2
000035AA                          4804      
000035AA  4DF8 1472               4805      LEA     numTable,A6
000035AE  C6FC 0008               4806      MULU    #8,D3
000035B2  4EB6 3000               4807      JSR     (A6,D3)
000035B6                          4808      
000035B6  6000 0520               4809      BRA     printCode
000035BA                          4810      
000035BA                          4811      
000035BA                          4812  lslL_IN
000035BA                          4813      
000035BA  14FC 0020               4814      MOVE.B  #' ',(A2)+  ;print some spaces 
000035BE  14FC 0020               4815      MOVE.B  #' ',(A2)+
000035C2  14FC 0020               4816      MOVE.B  #' ',(A2)+
000035C6  14FC 0020               4817      MOVE.B  #' ',(A2)+
000035CA  14FC 004C               4818      MOVE.B  #'L',(A2)+  ;print L
000035CE  14FC 0053               4819      MOVE.B  #'S',(A2)+  ;print S
000035D2  14FC 004C               4820      MOVE.B  #'L',(A2)+  ;print L
000035D6  14FC 002E               4821      MOVE.B  #'.',(A2)+  ;print .
000035DA  14FC 004C               4822      MOVE.B  #'L',(A2)+  ;print 
000035DE  14FC 0020               4823      MOVE.B  #' ',(A2)+  ;
000035E2  14FC 0020               4824      MOVE.B  #' ',(A2)+  ;print some spaces 
000035E6  14FC 0020               4825      MOVE.B  #' ',(A2)+
000035EA  14FC 0023               4826      MOVE.B  #'#',(A2)+
000035EE                          4827      
000035EE  4EB9 00003846           4828      JSR     get_bit_9_11
000035F4  B63C 0000               4829      CMP.B   #0,D3
000035F8  6600 0232               4830      BNE     shift_Not_8
000035FC  14FC 0038               4831      MOVE.B  #'8',(A2)+
00003600  6000 020C               4832      BRA     shift_complete
00003604                          4833  
00003604                          4834  
00003604                          4835  
00003604                          4836  
00003604                          4837  lsrB_RN
00003604                          4838      
00003604  14FC 0020               4839      MOVE.B  #' ',(A2)+  ;print some spaces 
00003608  14FC 0020               4840      MOVE.B  #' ',(A2)+
0000360C  14FC 0020               4841      MOVE.B  #' ',(A2)+
00003610  14FC 0020               4842      MOVE.B  #' ',(A2)+
00003614  14FC 004C               4843      MOVE.B  #'L',(A2)+  ;print L
00003618  14FC 0053               4844      MOVE.B  #'S',(A2)+  ;print S
0000361C  14FC 0052               4845      MOVE.B  #'R',(A2)+  ;print R
00003620  14FC 002E               4846      MOVE.B  #'.',(A2)+  ;print .
00003624  14FC 0042               4847      MOVE.B  #'B',(A2)+  ;print B
00003628  14FC 0020               4848      MOVE.B  #' ',(A2)+  ;
0000362C  14FC 0020               4849      MOVE.B  #' ',(A2)+  ;print some spaces 
00003630  14FC 0020               4850      MOVE.B  #' ',(A2)+
00003634  14FC 0044               4851      MOVE.B  #'D',(A2)+ 
00003638  4EB9 00003846           4852      JSR     get_bit_9_11
0000363E                          4853     
0000363E  4DF8 1472               4854      LEA     numTable,A6
00003642  C6FC 0008               4855      MULU    #8,D3
00003646  4EB6 3000               4856      JSR     (A6,D3)
0000364A                          4857      
0000364A  14FC 002C               4858      MOVE.B  #',',(A2)+
0000364E  14FC 0044               4859      MOVE.B  #'D',(A2)+
00003652  4EB9 0000383C           4860      JSR get_bit_0_2
00003658                          4861      
00003658  4DF8 1472               4862      LEA     numTable,A6
0000365C  C6FC 0008               4863      MULU    #8,D3
00003660  4EB6 3000               4864      JSR     (A6,D3)
00003664                          4865      
00003664  6000 0472               4866      BRA     printCode
00003668                          4867      
00003668                          4868      
00003668                          4869  lsrB_IN
00003668                          4870      
00003668  14FC 0020               4871      MOVE.B  #' ',(A2)+  ;print some spaces 
0000366C  14FC 0020               4872      MOVE.B  #' ',(A2)+
00003670  14FC 0020               4873      MOVE.B  #' ',(A2)+
00003674  14FC 0020               4874      MOVE.B  #' ',(A2)+
00003678  14FC 004C               4875      MOVE.B  #'L',(A2)+  ;print L
0000367C  14FC 0053               4876      MOVE.B  #'S',(A2)+  ;print S
00003680  14FC 0052               4877      MOVE.B  #'R',(A2)+  ;print R
00003684  14FC 002E               4878      MOVE.B  #'.',(A2)+  ;print .
00003688  14FC 0042               4879      MOVE.B  #'B',(A2)+  ;print B
0000368C  14FC 0020               4880      MOVE.B  #' ',(A2)+  ;
00003690  14FC 0020               4881      MOVE.B  #' ',(A2)+  ;print some spaces 
00003694  14FC 0020               4882      MOVE.B  #' ',(A2)+
00003698  14FC 0023               4883      MOVE.B  #'#',(A2)+
0000369C                          4884      
0000369C  4EB9 00003846           4885      JSR     get_bit_9_11
000036A2  B63C 0000               4886      CMP.B   #0,D3
000036A6  6600 0184               4887      BNE     shift_Not_8
000036AA  14FC 0038               4888      MOVE.B  #'8',(A2)+
000036AE  6000 015E               4889      BRA     shift_complete
000036B2                          4890  
000036B2                          4891  
000036B2                          4892  
000036B2                          4893  lsrW_RN   
000036B2  14FC 0020               4894      MOVE.B  #' ',(A2)+  ;print some spaces 
000036B6  14FC 0020               4895      MOVE.B  #' ',(A2)+
000036BA  14FC 0020               4896      MOVE.B  #' ',(A2)+
000036BE  14FC 0020               4897      MOVE.B  #' ',(A2)+
000036C2  14FC 004C               4898      MOVE.B  #'L',(A2)+  ;print L
000036C6  14FC 0053               4899      MOVE.B  #'S',(A2)+  ;print S
000036CA  14FC 0052               4900      MOVE.B  #'R',(A2)+  ;print R
000036CE  14FC 002E               4901      MOVE.B  #'.',(A2)+  ;print .
000036D2  14FC 0057               4902      MOVE.B  #'W',(A2)+  ;print W
000036D6  14FC 0020               4903      MOVE.B  #' ',(A2)+  ;
000036DA  14FC 0020               4904      MOVE.B  #' ',(A2)+  ;print some spaces 
000036DE  14FC 0020               4905      MOVE.B  #' ',(A2)+
000036E2  14FC 0044               4906      MOVE.B  #'D',(A2)+ 
000036E6  4EB9 00003846           4907      JSR     get_bit_9_11
000036EC                          4908     
000036EC  4DF8 1472               4909      LEA     numTable,A6
000036F0  C6FC 0008               4910      MULU    #8,D3
000036F4  4EB6 3000               4911      JSR     (A6,D3)
000036F8                          4912      
000036F8  14FC 002C               4913      MOVE.B  #',',(A2)+
000036FC  14FC 0044               4914      MOVE.B  #'D',(A2)+
00003700  4EB9 0000383C           4915      JSR get_bit_0_2
00003706                          4916      
00003706  4DF8 1472               4917      LEA     numTable,A6
0000370A  C6FC 0008               4918      MULU    #8,D3
0000370E  4EB6 3000               4919      JSR     (A6,D3)
00003712                          4920      
00003712  6000 03C4               4921      BRA     printCode
00003716                          4922      
00003716                          4923      
00003716                          4924  lsrW_IN
00003716                          4925      
00003716  14FC 0020               4926      MOVE.B  #' ',(A2)+  ;print some spaces 
0000371A  14FC 0020               4927      MOVE.B  #' ',(A2)+
0000371E  14FC 0020               4928      MOVE.B  #' ',(A2)+
00003722  14FC 0020               4929      MOVE.B  #' ',(A2)+
00003726  14FC 004C               4930      MOVE.B  #'L',(A2)+  ;print L
0000372A  14FC 0053               4931      MOVE.B  #'S',(A2)+  ;print S
0000372E  14FC 0052               4932      MOVE.B  #'R',(A2)+  ;print R
00003732  14FC 002E               4933      MOVE.B  #'.',(A2)+  ;print .
00003736  14FC 0057               4934      MOVE.B  #'W',(A2)+  ;print W
0000373A  14FC 0020               4935      MOVE.B  #' ',(A2)+  ;
0000373E  14FC 0020               4936      MOVE.B  #' ',(A2)+  ;print some spaces 
00003742  14FC 0020               4937      MOVE.B  #' ',(A2)+
00003746  14FC 0023               4938      MOVE.B  #'#',(A2)+
0000374A                          4939      
0000374A  4EB9 00003846           4940      JSR     get_bit_9_11
00003750  B63C 0000               4941      CMP.B   #0,D3
00003754  6600 00D6               4942      BNE     shift_Not_8
00003758  14FC 0038               4943      MOVE.B  #'8',(A2)+
0000375C  6000 00B0               4944      BRA     shift_complete
00003760                          4945  
00003760                          4946  
00003760                          4947  lsrL_RN
00003760                          4948      
00003760  14FC 0020               4949      MOVE.B  #' ',(A2)+  ;print some spaces 
00003764  14FC 0020               4950      MOVE.B  #' ',(A2)+
00003768  14FC 0020               4951      MOVE.B  #' ',(A2)+
0000376C  14FC 0020               4952      MOVE.B  #' ',(A2)+
00003770  14FC 004C               4953      MOVE.B  #'L',(A2)+  ;print L
00003774  14FC 0053               4954      MOVE.B  #'S',(A2)+  ;print S
00003778  14FC 0052               4955      MOVE.B  #'R',(A2)+  ;print R
0000377C  14FC 002E               4956      MOVE.B  #'.',(A2)+  ;print .
00003780  14FC 004C               4957      MOVE.B  #'L',(A2)+  ;print L
00003784  14FC 0020               4958      MOVE.B  #' ',(A2)+  ;
00003788  14FC 0020               4959      MOVE.B  #' ',(A2)+  ;print some spaces 
0000378C  14FC 0020               4960      MOVE.B  #' ',(A2)+
00003790  14FC 0044               4961      MOVE.B  #'D',(A2)+ 
00003794  4EB9 00003846           4962      JSR     get_bit_9_11
0000379A                          4963     
0000379A  4DF8 1472               4964      LEA     numTable,A6
0000379E  C6FC 0008               4965      MULU    #8,D3
000037A2  4EB6 3000               4966      JSR     (A6,D3)
000037A6                          4967      
000037A6  14FC 002C               4968      MOVE.B  #',',(A2)+
000037AA  14FC 0044               4969      MOVE.B  #'D',(A2)+
000037AE  4EB9 0000383C           4970      JSR get_bit_0_2
000037B4                          4971      
000037B4  4DF8 1472               4972      LEA     numTable,A6
000037B8  C6FC 0008               4973      MULU    #8,D3
000037BC  4EB6 3000               4974      JSR     (A6,D3)
000037C0                          4975      
000037C0  6000 0316               4976      BRA     printCode
000037C4                          4977      
000037C4                          4978      
000037C4                          4979  lsrL_IN
000037C4                          4980      
000037C4  14FC 0020               4981      MOVE.B  #' ',(A2)+  ;print some spaces 
000037C8  14FC 0020               4982      MOVE.B  #' ',(A2)+
000037CC  14FC 0020               4983      MOVE.B  #' ',(A2)+
000037D0  14FC 0020               4984      MOVE.B  #' ',(A2)+
000037D4  14FC 004C               4985      MOVE.B  #'L',(A2)+  ;print L
000037D8  14FC 0053               4986      MOVE.B  #'S',(A2)+  ;print S
000037DC  14FC 0052               4987      MOVE.B  #'R',(A2)+  ;print R
000037E0  14FC 002E               4988      MOVE.B  #'.',(A2)+  ;print .
000037E4  14FC 004C               4989      MOVE.B  #'L',(A2)+  ;print L
000037E8  14FC 0020               4990      MOVE.B  #' ',(A2)+  ;
000037EC  14FC 0020               4991      MOVE.B  #' ',(A2)+  ;print some spaces 
000037F0  14FC 0020               4992      MOVE.B  #' ',(A2)+
000037F4  14FC 0023               4993      MOVE.B  #'#',(A2)+
000037F8                          4994      
000037F8  4EB9 00003846           4995      JSR     get_bit_9_11
000037FE  B63C 0000               4996      CMP.B   #0,D3
00003802  6600 0028               4997      BNE     shift_Not_8
00003806  14FC 0038               4998      MOVE.B  #'8',(A2)+
0000380A  6000 0002               4999      BRA     shift_complete
0000380E                          5000  
0000380E                          5001  
0000380E                          5002  
0000380E                          5003  
0000380E                          5004  
0000380E                          5005  
0000380E                          5006  
0000380E                          5007  
0000380E                          5008      *------------------HELPER FUNCTIONS*********************
0000380E                          5009  shift_complete
0000380E  14FC 002C               5010      MOVE.B  #',',(A2)+
00003812  14FC 0044               5011      MOVE.B  #'D',(A2)+
00003816  4EB9 0000383C           5012      JSR get_bit_0_2
0000381C  4DF8 1472               5013      LEA numTable,A6
00003820  C6FC 0008               5014      MULU    #8,D3
00003824  4EB6 3000               5015      JSR     (A6,D3)
00003828  6000 02AE               5016      BRA     printCode
0000382C                          5017      
0000382C                          5018  shift_Not_8
0000382C  C6FC 0008               5019      MULU.W  #8,D3
00003830  4DF8 1472               5020      LEA numTable,A6
00003834  4EB6 3000               5021      JSR     (A6,D3)
00003838  4EB8 380E               5022      JSR     shift_complete
0000383C                          5023      
0000383C                          5024  get_bit_0_2
0000383C  4243                    5025      CLR     D3
0000383E  1606                    5026      MOVE.B  D6,D3
00003840                          5027      ;AND.W   #$0F,D3
00003840  EB0B                    5028      LSL.B   #5,D3
00003842  EA0B                    5029      LSR.B   #5,D3
00003844  4E75                    5030      RTS
00003846                          5031      
00003846                          5032  get_bit_9_11
00003846  3606                    5033      MOVE.W  D6,D3
00003848  C67C 0F00               5034      AND.W   #$0F00,D3
0000384C  E04B                    5035      LSR.W   #8,D3
0000384E  E24B                    5036      LSR.W   #1,D3
00003850  4E75                    5037      RTS
00003852                          5038      
00003852                          5039  get_shift_normal:
00003852                          5040      *-get OPCODE
00003852  4243                    5041      CLR D3
00003854  3606                    5042      MOVE.W  D6,D3
00003856  E64B                    5043      LSR.W   #3,D3 *-get bits 3 and 4 
00003858  C67C 00FF               5044      AND.W   #$00FF,D3
0000385C  E50B                    5045      LSL.B   #2,D3
0000385E  E40B                    5046      LSR.B   #2,D3
00003860  4E75                    5047      RTS
00003862                          5048  
00003862                          5049  get_shift_size:
00003862                          5050  
00003862  4283                    5051      CLR.L   D3
00003864  3606                    5052      MOVE.W  D6,D3
00003866                          5053      *-clear MSB and LSB
00003866  C67C 0FF0               5054      AND.W   #$0FF0,D3
0000386A  EC4B                    5055      LSR.W   #6,D3
0000386C  4E75                    5056      RTS         *-got the bit 6 and 7
0000386E                          5057  
0000386E                          5058      
0000386E                          5059  
0000386E                          5060  -------------------- end include --------------------
0000386E                          5061      INCLUDE 'op1100.x68'
0000386E                          5062  op1100  ;AND MULS.W
0000386E                          5063  
0000386E  4EB8 1672               5064      JSR WordOrLong  ;result is what the OPMODE FIELD IS STored in D3
00003872                          5065  
00003872  14FC 0020               5066      MOVE.B  #' ',(A2)+
00003876  14FC 0020               5067      MOVE.B  #' ',(A2)+
0000387A  14FC 0020               5068      MOVE.B  #' ',(A2)+
0000387E  14FC 0020               5069      MOVE.B  #' ',(A2)+
00003882                          5070  
00003882  B63C 0000               5071      CMP.B   #hex_0,D3    ; AND.B
00003886  6700 0032               5072      BEQ     and_B       ;branch
0000388A  B63C 0001               5073      CMP.B   #hex_1,D3    ; AND.W
0000388E  6700 0046               5074      BEQ     and_W       ;branch
00003892  B63C 0002               5075      CMP.B   #hex_2,D3    ; AND.L
00003896  6700 005A               5076      BEQ     and_L       ;branch
0000389A  B63C 0004               5077      CMP.B   #hex_4,D3    ; AND.B [to EA]
0000389E  6700 00C2               5078      BEQ     and_B_EA    ;branch
000038A2  B63C 0005               5079      CMP.B   #hex_5,D3    ; AND.W [to EA]
000038A6  6700 00D6               5080      BEQ     and_W_EA    ;branch
000038AA  B63C 0006               5081      CMP.B   #hex_6,D3    ; AND.L [to EA]
000038AE  6700 00EA               5082      BEQ     and_L_EA    ;branch
000038B2                          5083  
000038B2  B63C 0007               5084      CMP.B   #hex_7,D3    ; MULS.W
000038B6  6700 0154               5085      BEQ     muls_W      ;branch
000038BA                          5086  
000038BA                          5087  
000038BA                          5088  
000038BA                          5089  and_B
000038BA  14FC 0041               5090      MOVE.B  #'A',(A2)+
000038BE  14FC 004E               5091      MOVE.B  #'N',(A2)+
000038C2  14FC 0044               5092      MOVE.B  #'D',(A2)+
000038C6  14FC 002E               5093      MOVE.B  #'.',(A2)+
000038CA  14FC 0042               5094      MOVE.B  #'B',(A2)+
000038CE  1E3C 0000               5095      MOVE.B  #0,D7           Byte Size
000038D2  6000 003A               5096      BRA     decodeAndEADn
000038D6                          5097  
000038D6                          5098  and_W   
000038D6  14FC 0041               5099      MOVE.B  #'A',(A2)+
000038DA  14FC 004E               5100      MOVE.B  #'N',(A2)+
000038DE  14FC 0044               5101      MOVE.B  #'D',(A2)+
000038E2  14FC 002E               5102      MOVE.B  #'.',(A2)+
000038E6  14FC 0057               5103      MOVE.B  #'W',(A2)+
000038EA  1E3C 0001               5104      MOVE.B  #1,D7           Word Size
000038EE  6000 001E               5105      BRA     decodeAndEADn
000038F2                          5106  
000038F2                          5107  and_L   
000038F2  14FC 0041               5108      MOVE.B  #'A',(A2)+
000038F6  14FC 004E               5109      MOVE.B  #'N',(A2)+
000038FA  14FC 0044               5110      MOVE.B  #'D',(A2)+
000038FE  14FC 002E               5111      MOVE.B  #'.',(A2)+
00003902  14FC 004C               5112      MOVE.B  #'L',(A2)+
00003906  1E3C 0002               5113      MOVE.B  #2,D7           Long Size
0000390A  6000 0002               5114      BRA     decodeAndEADn
0000390E                          5115  
0000390E                          5116  decodeAndEADn
0000390E  14FC 0020               5117      MOVE.B  #' ',(A2)+
00003912  14FC 0020               5118      MOVE.B  #' ',(A2)+
00003916  14FC 0020               5119      MOVE.B  #' ',(A2)+
0000391A  14FC 0020               5120      MOVE.B  #' ',(A2)+
0000391E                          5121  
0000391E  4EB8 156A               5122      JSR     get_3to5_bit
00003922                          5123  
00003922  4EB8 1552               5124      JSR     get_0to2_bit
00003926                          5125  
00003926                          5126  
00003926  B43C 0007               5127      CMP.B   #7,D2
0000392A  6700 001C               5128      BEQ     immAbAndEADn
0000392E                          5129  
0000392E                          5130  desDecodeAndEADn   
0000392E  14FC 002C               5131      MOVE.B  #',',(A2)+  comma between operands
00003932                          5132  
00003932  4281                    5133      CLR.L     D1
00003934  123C 0000               5134      MOVE.B  #0,D1           Always Dn format
00003938  4DF8 1350               5135      LEA     modeTable,A6
0000393C  4EB6 1000               5136      JSR     (A6,D1)
00003940                          5137  
00003940  4EB8 159E               5138      JSR     get_9to11_bit
00003944                          5139  
00003944                          5140  
00003944                          5141  
00003944                          5142  
00003944  6000 0192               5143      BRA     printCode
00003948                          5144  
00003948                          5145  immAbAndEADn
00003948                          5146  
00003948  B27C 0004               5147      CMP     #4,D1      if immediate data
0000394C  6700 0010               5148      BEQ     adjustimmAbAndEADn
00003950                          5149  immAbJumpAndEADn
00003950  4DF8 11A2               5150      LEA     immAbTable, A6
00003954  C2FC 0008               5151      MULU    #8,D1
00003958  4EB6 1000               5152      JSR     (A6,D1)
0000395C  60D0                    5153      BRA     desDecodeAndEADn
0000395E                          5154  adjustimmAbAndEADn
0000395E  9207                    5155      SUB.B   D7,D1
00003960  60EE                    5156      BRA     immAbJumpAndEADn
00003962                          5157  
00003962                          5158  
00003962                          5159  
00003962                          5160  
00003962                          5161  
00003962                          5162  and_B_EA
00003962  14FC 0041               5163      MOVE.B  #'A',(A2)+
00003966  14FC 004E               5164      MOVE.B  #'N',(A2)+
0000396A  14FC 0044               5165      MOVE.B  #'D',(A2)+
0000396E  14FC 002E               5166      MOVE.B  #'.',(A2)+
00003972  14FC 0042               5167      MOVE.B  #'B',(A2)+
00003976  1E3C 0000               5168      MOVE.B  #0,D7           Byte Size
0000397A  6000 003A               5169      BRA     decodeAndDnEA
0000397E                          5170  
0000397E                          5171  and_W_EA   
0000397E  14FC 0041               5172      MOVE.B  #'A',(A2)+
00003982  14FC 004E               5173      MOVE.B  #'N',(A2)+
00003986  14FC 0044               5174      MOVE.B  #'D',(A2)+
0000398A  14FC 002E               5175      MOVE.B  #'.',(A2)+
0000398E  14FC 0057               5176      MOVE.B  #'W',(A2)+
00003992  1E3C 0001               5177      MOVE.B  #1,D7           Word Size
00003996  6000 001E               5178      BRA     decodeAndDnEA
0000399A                          5179  
0000399A                          5180  and_L_EA   
0000399A  14FC 0041               5181      MOVE.B  #'A',(A2)+
0000399E  14FC 004E               5182      MOVE.B  #'N',(A2)+
000039A2  14FC 0044               5183      MOVE.B  #'D',(A2)+
000039A6  14FC 002E               5184      MOVE.B  #'.',(A2)+
000039AA  14FC 004C               5185      MOVE.B  #'L',(A2)+
000039AE  1E3C 0002               5186      MOVE.B  #2,D7           Word Size
000039B2  6000 0002               5187      BRA     decodeAndDnEA
000039B6                          5188  
000039B6                          5189  decodeAndDnEA
000039B6  14FC 0020               5190      MOVE.B  #' ',(A2)+
000039BA  14FC 0020               5191      MOVE.B  #' ',(A2)+
000039BE  14FC 0020               5192      MOVE.B  #' ',(A2)+
000039C2  14FC 0020               5193      MOVE.B  #' ',(A2)+
000039C6                          5194  
000039C6  4281                    5195      CLR.L     D1
000039C8  123C 0000               5196      MOVE.B  #0,D1           Always Dn format
000039CC  4DF8 1350               5197      LEA     modeTable,A6
000039D0  4EB6 1000               5198      JSR     (A6,D1)
000039D4                          5199  
000039D4  4EB8 159E               5200      JSR     get_9to11_bit
000039D8                          5201  
000039D8  14FC 002C               5202      MOVE.B  #',',(A2)+  comma between operands
000039DC                          5203  
000039DC  4EB8 156A               5204      JSR     get_3to5_bit
000039E0                          5205  
000039E0  4EB8 1552               5206      JSR     get_0to2_bit
000039E4                          5207  
000039E4                          5208  
000039E4  B43C 0007               5209      CMP.B   #7,D2
000039E8  6700 0006               5210      BEQ     immAbAndDnEA
000039EC                          5211  
000039EC                          5212  
000039EC                          5213  
000039EC                          5214  
000039EC  6000 00EA               5215      BRA     printCode
000039F0                          5216  
000039F0                          5217  immAbAndDnEA
000039F0                          5218  
000039F0  B27C 0004               5219      CMP     #4,D1      if immediate data
000039F4  6700 0012               5220      BEQ     adjustimmAbAndDnEA
000039F8                          5221  immAbJumpAndDnEA
000039F8  4DF8 11A2               5222      LEA     immAbTable, A6
000039FC  C2FC 0008               5223      MULU    #8,D1
00003A00  4EB6 1000               5224      JSR     (A6,D1)
00003A04  6000 00D2               5225      BRA     printCode
00003A08                          5226  adjustimmAbAndDnEA
00003A08  9207                    5227      SUB.B   D7,D1
00003A0A  60EC                    5228      BRA     immAbJumpAndDnEA
00003A0C                          5229  
00003A0C                          5230  
00003A0C                          5231  
00003A0C                          5232  
00003A0C                          5233  
00003A0C                          5234  muls_W
00003A0C  14FC 004D               5235      MOVE.B  #'M',(A2)+
00003A10  14FC 0055               5236      MOVE.B  #'U',(A2)+
00003A14  14FC 004C               5237      MOVE.B  #'L',(A2)+
00003A18  14FC 0053               5238      MOVE.B  #'S',(A2)+
00003A1C  14FC 002E               5239      MOVE.B  #'.',(A2)+
00003A20  14FC 0057               5240      MOVE.B  #'W',(A2)+
00003A24  14FC 0020               5241      MOVE.B  #' ',(A2)+
00003A28  14FC 0020               5242      MOVE.B  #' ',(A2)+
00003A2C                          5243  
00003A2C  4EB8 156A               5244      JSR     get_3to5_bit
00003A30                          5245  
00003A30  4EB8 1552               5246      JSR     get_0to2_bit
00003A34                          5247  
00003A34                          5248  
00003A34  B43C 0007               5249      CMP.B   #7,D2
00003A38  6700 001C               5250      BEQ     immAbMULS_W
00003A3C                          5251  
00003A3C                          5252  desDecodeMULS_W  
00003A3C  14FC 002C               5253      MOVE.B  #',',(A2)+  comma between operands
00003A40                          5254  
00003A40  4241                    5255      CLR     D1
00003A42  123C 0000               5256      MOVE.B  #0,D1           Always Dn format
00003A46  4DF8 1350               5257      LEA     modeTable,A6
00003A4A  4EB6 1000               5258      JSR     (A6,D1)
00003A4E                          5259  
00003A4E  4EB8 159E               5260      JSR     get_9to11_bit
00003A52                          5261  
00003A52                          5262  
00003A52                          5263  
00003A52                          5264  
00003A52  6000 0084               5265      BRA     printCode
00003A56                          5266  
00003A56                          5267  immAbMULS_W
00003A56                          5268  
00003A56  B27C 0004               5269      CMP     #4,D1      if immediate data
00003A5A  6700 0010               5270      BEQ     adjustimmAbMULS_W
00003A5E                          5271  immAbJumpMULS_W
00003A5E  4DF8 11A2               5272      LEA     immAbTable, A6
00003A62  C2FC 0008               5273      MULU    #8,D1
00003A66  4EB6 1000               5274      JSR     (A6,D1)
00003A6A  60D0                    5275      BRA     desDecodeMULS_W
00003A6C                          5276  adjustimmAbMULS_W
00003A6C  4241                    5277      CLR     D1
00003A6E  123C 0003               5278      MOVE.B  #3,D1           Always Word Size
00003A72  60EA                    5279      BRA     immAbJumpMULS_W
00003A74                          5280  
00003A74                          5281  
00003A74                          5282  
00003A74                          5283  
00003A74                          5284  
00003A74                          5285  
00003A74                          5286  
00003A74                          5287  
00003A74                          5288  
00003A74                          5289  
00003A74                          5290  
00003A74                          5291  
00003A74                          5292  
00003A74                          5293  
00003A74                          5294  
00003A74                          5295  
00003A74                          5296  
00003A74                          5297  
00003A74                          5298  
00003A74                          5299  
00003A74                          5300  
00003A74                          5301  
00003A74                          5302  
00003A74                          5303  
00003A74                          5304  
00003A74                          5305  -------------------- end include --------------------
00003A74                          5306      
00003A74                          5307  
00003A74                          5308  
00003A74                          5309  
00003A74                          5310  
00003A74                          5311  
00003A74                          5312  
00003A74                          5313  
00003A74                          5314      
00003A74                          5315      
00003A74                          5316  
00003A74                          5317      
00003A74                          5318  opError                             
00003A74  2608                    5319      MOVE.L  A0,D3
00003A76  2C03                    5320      MOVE.L  D3,D6
00003A78  45F9 00003CAC           5321      LEA     bad_code_buffer,A2
00003A7E  7E02                    5322      MOVE.L  #2,D7
00003A80  4EB8 1130               5323      JSR     write_data_in_D3_to_buffer
00003A84                          5324      
00003A84  14FC 0020               5325      MOVE.B  #' ',(A2)+      ;print spaces
00003A88  14FC 0020               5326      MOVE.B  #' ',(A2)+      ;print spaces
00003A8C  14FC 0020               5327      MOVE.B  #' ',(A2)+      ;print spaces
00003A90  14FC 0020               5328      MOVE.B  #' ',(A2)+      ;print spaces
00003A94  14FC 0044               5329      MOVE.B  #'D',(A2)+      ;print D
00003A98  14FC 0041               5330      MOVE.B  #'A',(A2)+      ;print A
00003A9C  14FC 0054               5331      MOVE.B  #'T',(A2)+      ;print T
00003AA0  14FC 0041               5332      MOVE.B  #'A',(A2)+      ;print A
00003AA4  14FC 0020               5333      MOVE.B  #' ',(A2)+      ;print spaces
00003AA8  14FC 0020               5334      MOVE.B  #' ',(A2)+      ;print spaces
00003AAC  14FC 0020               5335      MOVE.B  #' ',(A2)+      ;print spaces
00003AB0  14FC 0020               5336      MOVE.B  #' ',(A2)+      ;print spaces
00003AB4                          5337      
00003AB4                          5338      
00003AB4  14FC 0046               5339      MOVE.B  #'F',(A2)+      ;print spaces
00003AB8  14FC 0046               5340      MOVE.B  #'F',(A2)+      ;print spaces
00003ABC  14FC 0046               5341      MOVE.B  #'F',(A2)+      ;print spaces
00003AC0  14FC 0046               5342      MOVE.B  #'F',(A2)+      ;print spaces
00003AC4                          5343      
00003AC4                          5344      
00003AC4                          5345      ;MOVE.L  (A0),D3
00003AC4                          5346      ;MOVE.L  D3,D6
00003AC4                          5347      ;MOVE.L  #1,D7
00003AC4                          5348      ;JSR     write_data_in_D3_to_buffer
00003AC4                          5349      
00003AC4  14BC 0000               5350      MOVE.B  #$00,(A2) * add NULL value to print string
00003AC8  43F9 00003CAC           5351      LEA     bad_code_buffer,A1
00003ACE  103C 000D               5352      MOVE.B  #13,D0
00003AD2  4E4F                    5353      TRAP    #15
00003AD4                          5354      
00003AD4  6000 D614               5355      BRA     get_next_instruction
00003AD8                          5356  printCode   
00003AD8  14BC 0000               5357      MOVE.B  #$00,(A2)   * add NULL value to print string
00003ADC  070A 0000               5358      MOVEP   (A2),D3
00003AE0  43F9 00003C54           5359      LEA     good_code_buffer,A1 * load buffer for good code to print
00003AE6  700D                    5360      MOVEQ   #13,D0
00003AE8  4E4F                    5361      TRAP    #15         * display code
00003AEA                          5362    
00003AEA  6000 D5FE               5363      BRA     get_next_instruction
00003AEE                          5364  *    OP Codes -------------------------------------------------
00003AEE                          5365  
00003AEE  =00000000               5366  bin0000     EQU     %0000   ;ADDI, ANDI, EORI, BCHG, CMPI
00003AEE  =00000001               5367  bin0001     EQU     %0001   ;MOVE.B
00003AEE  =00000002               5368  bin0010     EQU     %0010   ;MOVE.L
00003AEE  =00000003               5369  bin0011     EQU     %0011   ;MOVE.W
00003AEE  =00000004               5370  bin0100     EQU     %0100   ;MOVEM, MULS.L, DIVU.L, LEA, CLR, JSR, RTS
00003AEE  =00000005               5371  bin0101     EQU     %0101   ;SUBQ
00003AEE  =00000006               5372  bin0110     EQU     %0110   ;Bcc
00003AEE  =00000007               5373  bin0111     EQU     %0111   ;MOVEQ
00003AEE  =00000008               5374  bin1000     EQU     %1000   ;DIVU.W
00003AEE  =00000009               5375  bin1001     EQU     %1001   ;SUB, SUBA
00003AEE  =0000000B               5376  bin1011     EQU     %1011   ;CMP, CMPA, EOR
00003AEE  =0000000C               5377  bin1100     EQU     %1100   ;AND, MULS.W
00003AEE  =0000000D               5378  bin1101     EQU     %1101   ;ADD, ADDA
00003AEE  =0000000E               5379  bin1110     EQU     %1110   ;ASR, ASL, ROL, ROR
00003AEE                          5380  
00003AEE                          5381  *    Binary HEX values*---------------------------------------------------------------
00003AEE                          5382  
00003AEE  =00000000               5383  hex_0   EQU     %0000 ;0 percent syntax means binary repersentation of this value
00003AEE  =00000001               5384  hex_1   EQU     %0001 ;1
00003AEE  =00000002               5385  hex_2   EQU     %0010 ;2    
00003AEE  =00000003               5386  hex_3   EQU     %0011 ;3
00003AEE  =00000004               5387  hex_4   EQU     %0100 ;4
00003AEE  =00000005               5388  hex_5   EQU     %0101 ;5
00003AEE  =00000006               5389  hex_6   EQU     %0110 ;6
00003AEE  =00000007               5390  hex_7   EQU     %0111 ;7
00003AEE  =00000008               5391  hex_8   EQU     %1000 ;8
00003AEE  =00000009               5392  hex_9   EQU     %1001 ;9
00003AEE  =0000000A               5393  hex_A   EQU     %1010 ;A
00003AEE  =0000000B               5394  hex_B   EQU     %1011 ;B
00003AEE  =0000000C               5395  hex_C   EQU     %1100 ;C
00003AEE  =0000000D               5396  hex_D   EQU     %1101 ;D
00003AEE  =0000000E               5397  hex_E   EQU     %1110 ;E
00003AEE  =0000000F               5398  hex_F   EQU     %1111 ;F      
00003AEE                          5399      
00003AEE                          5400  ;LOOP:
00003AEE                          5401      *-compare the adress pointers current address with ending address to see if we need to continue
00003AEE                          5402      *- load the address registrer (pointer/ this helps us look at data)
00003AEE                          5403      *-load address register number into data register
00003AEE                          5404      
00003AEE                          5405      ;MOVE.L  a5,d2   ;move the value of a5 to d2(starting/current pointing number)
00003AEE                          5406      ;lea     $00FFFF10,a6    ;load the ending address to d3(we do this so in the future d3 is not just storing something, we can free up d3 to use
00003AEE                          5407      ;MOVE.L  (a6),d3         since we loaded the address of ou engine value into a address register 'basically keeping its pointer instance' we deref it for the value
00003AEE                          5408      ;CMP.L   d2,d3       ;if the current poiinter is the same as
00003AEE                          5409      ;BEQ     FINISH      ;finish they are equal
00003AEE                          5410      ;RTS
00003AEE                          5411  
00003AEE                          5412      
00003AEE                          5413      *----------END OF I/O SECTION*---
00003AEE                          5414      
00003AEE                          5415  FINISH:
00003AEE                          5416      *INCLUDE 'opcode_subroutine.x68'
00003AEE  2608                    5417      MOVE.L  A0,D3
00003AF0  2C03                    5418      MOVE.L  D3,D6
00003AF2  45F9 00003C54           5419      LEA     good_code_buffer,A2
00003AF8                          5420   
00003AF8                          5421      
00003AF8  14FC 0046               5422      MOVE.B  #'F',(A2)+      ;print spaces
00003AFC  14FC 0049               5423      MOVE.B  #'I',(A2)+      ;print spaces
00003B00  14FC 0049               5424      MOVE.B  #'I',(A2)+      ;print spaces
00003B04  14FC 004E               5425      MOVE.B  #'N',(A2)+      ;print spaces
00003B08  14FC 0049               5426      MOVE.B  #'I',(A2)+      ;print D
00003B0C  14FC 0053               5427      MOVE.B  #'S',(A2)+      ;print A
00003B10  14FC 0048               5428      MOVE.B  #'H',(A2)+      ;print T
00003B14  14FC 0041               5429      MOVE.B  #'A',(A2)+      ;print A
00003B18  14FC 0041               5430      MOVE.B  #'A',(A2)+      ;print spaces
00003B1C  14FC 0041               5431      MOVE.B  #'A',(A2)+      ;print spaces
00003B20  14FC 0048               5432      MOVE.B  #'H',(A2)+      ;print spaces
00003B24  14FC 0041               5433      MOVE.B  #'A',(A2)+      ;print spaces
00003B28  14FC 0052               5434      MOVE.B  #'R',(A2)+
00003B2C  2610                    5435      MOVE.L  (A0),D3
00003B2E  2C03                    5436      MOVE.L  D3,D6
00003B30  7E01                    5437      MOVE.L  #1,D7
00003B32                          5438  
00003B32                          5439      
00003B32  14BC 0000               5440      MOVE.B  #$00,(A2) * add NULL value to print string
00003B36  43F9 00003C54           5441      LEA     good_code_buffer,A1
00003B3C  103C 000D               5442      MOVE.B  #13,D0
00003B40  4E4F                    5443      TRAP    #15
00003B42  FFFF FFFF               5444      SIMHALT
00003B46                          5445  
00003B46                          5446  *    -390 -> 406 WITH NOP AT 400
00003B46                          5447  
00003B46                          5448  *-----------------------------------------------------------------
00003B46                          5449  *           I/O Section
00003B46                          5450  *----------------------------------------------------------------
00003B46                          5451  
00003B46                          5452  *    -Parses input - take input from user to create a memory address
00003B46                          5453  
00003B46                          5454  *    - entry is parsed to make sure it falls within a valid range
00003B46                          5455  
00003B46                          5456  *    -good inputs are converteed to hex
00003B46                          5457  
00003B46                          5458  *    -the entered addres get's stored in d3
00003B46                          5459  
00003B46                          5460  parse_input     
00003B46  7C00                    5461      MOVEQ   #$0,D6  ZERO OUT THE REGISTERY
00003B48  7A00                    5462      MOVEQ   #$0,D5  ZERO OUT THE REGISTERY
00003B4A                          5463      
00003B4A                          5464      *-CHECK TO SEE INPUT DATA
00003B4A  B205                    5465      CMP.B   D5,D1   D5 IS 0
00003B4C  6700 0086               5466      BEQ     error_no_input no input was found
00003B50  0C41 0008               5467      CMPI    #$8,D1  CHECK IF THE USER ENTERED TOO MANY CHARACTERS 8+
00003B54  6E00 0090               5468      BGT     error_bad_entry
00003B58                          5469      ;BGT     error_inv_to_many_char
00003B58  6000 0018               5470      BRA     parse_each
00003B5C                          5471  
00003B5C  7C00                    5472  parse_end        MOVEQ   #$0,D6  CLEARS THE D6 REGISTEY
00003B5E  7A00                    5473      MOVEQ   #$0,D5  CLEARS D5
00003B60  B205                    5474      CMP.B   D5,D1   CHECKS TO SEE IF A VALUE WAS ENTERED
00003B62  6700 0070               5475      BEQ     error_no_input
00003B66  0C41 0008               5476      CMPI    #$8,D1  CHECKS IF THE USER ENTERED TOO MANY CHARACTERS 8+
00003B6A  6E00 007A               5477      BGT     error_bad_entry
00003B6E                          5478      ;BGT     error_to_many_char
00003B6E  6000 0002               5479      BRA     parse_each
00003B72                          5480  
00003B72                          5481  *    parse each analyzes each ind character entered
00003B72                          5482  
00003B72                          5483  *    in ASCII table lower case 'f' is tyhe highest character code (102)
00003B72                          5484  
00003B72                          5485  
00003B72                          5486  parse_each      
00003B72  1419                    5487      MOVE.B  (A1)+,D2    GET THE NEXT CHARACTER FOR PARSING
00003B74  B405                    5488      CMP.B   D5,D2       CHECK IF THE NEXT VALUE IS NULL, IF SO WE HAVE EITHER ERROR OR REACHED END OF INPUT
00003B76  6700 0058               5489      BEQ     parse_complete  end of user input
00003B7A  B43C 0066               5490      CMP.B   #102,D2     NEED TO CHECK WETHER THE INPUT IS OUT OF ASCII RANGE 'f' is 102
00003B7E  6E00 0012               5491      BGT     hex_compare
00003B82                          5492      
00003B82                          5493      *-
00003B82                          5494      *Comapare the decimal number values betyween 0 -9 first
00003B82                          5495      *
00003B82                          5496      *-
00003B82                          5497  dec_compare     
00003B82  B43C 002F               5498      CMP.B   #47,D2      if its lower than 47 that means its invalid character
00003B86                          5499      *-for decimal values between [47, 57] are valid
00003B86  6F00 0056               5500      BLE     error_char
00003B8A  B43C 003A               5501      CMP.B   #58, D2     IF THE VALUE IS NOT LESS THAN 47 AND NOT GREATER THAN 58 WE CAN CONVERT DECIMAL TO HEX
00003B8E  6D00 0022               5502      BLT     dec_convert
00003B92                          5503      *-
00003B92                          5504      *there are no number values, lets check alpha characters
00003B92                          5505      *->IF the value is not less than 65 which is 'A' and the value is NO more than
00003B92                          5506      *->71 'G' then we should go and convert to hex range A-F
00003B92                          5507      *-UPPER case
00003B92                          5508      *-
00003B92                          5509  hex_compare     
00003B92  B43C 0041               5510      CMP.B   #65,D2      CHECK TO SEE IF THE VALUE OF THE CHAR IS LESS THAN 65(A)
00003B96  6D00 0046               5511      BLT     error_char  the VALUE IS LESS THAN 65 WHICH IS SYMBOLS AND INVALID
00003B9A  B43C 0047               5512      CMP.B   #71,D2      CHECK TO SEE IF THE VALUE OF THE CHAR IS LESS THAN 71(G)
00003B9E  6D00 001C               5513      BLT     upper_ascii VALUE FELL IN RANGE A-F
00003BA2                          5514  low_hex_compare 
00003BA2  B43C 0061               5515      CMP.B   #97,D2      CHECK TO SEE IF VALUE IS LESS THAN 97 'a'
00003BA6  6D00 0036               5516      BLT     error_char  VALUE IS SOME SYMBOL *- 97 - 103
00003BAA  B43C 0067               5517      CMP.B   #103,D2     CHECK IF ITS WITHIN RANGE, LESS THAN 103
00003BAE  6D00 0016               5518      BLT     lower_ascii
00003BB2                          5519      
00003BB2                          5520      
00003BB2                          5521  dec_convert    
00003BB2  0402 0030               5522      SUBI.B  #48,D2      CONVERT TO HEX FROM ASCII BY SUBTRACTING 48 FROM CURRENT DECIMAL VALUE
00003BB6                          5523      *-BECAUSE 0 - 9 THE HEX VALUES WILL BE A SINGLE CHAR WE SHIFT LEFT
00003BB6  E986                    5524      ASL.L   #4,D6
00003BB8  DC02                    5525      ADD.B   D2,D6       MOVE NEW BYTE INTO THE RETURN REGISTER
00003BBA  60B6                    5526      BRA     parse_each  continue to parse the next character, SHOULD BE IN RANGE FOR LOWER
00003BBC                          5527      *- 97 - 103
00003BBC                          5528      
00003BBC                          5529      
00003BBC                          5530  *    - ASCII conversions UPPER case to hex value by substracting 55
00003BBC                          5531  
00003BBC                          5532  
00003BBC  0402 0037               5533  upper_ascii     SUBI.B  #55,D2  SUBTRACT 55 TO GET THE HEX VALUE OF THE CORRESPONDING CHARACTER
00003BC0  E986                    5534      ASL.L   #4,D6   MOVE THE SANITIZED VALUE INTO D6 REGISTER
00003BC2  DC02                    5535      ADD.B   D2,D6   MOVE THE NEW BYTE INTO RETURN REGISTER
00003BC4  60AC                    5536      BRA     parse_each  parse next item
00003BC6                          5537  *    -ASCI lower case to hex value by subtracting 87
00003BC6                          5538  
00003BC6  0402 0057               5539  lower_ascii     SUBI.B  #87,D2
00003BCA  E986                    5540      ASL.L   #4,D6
00003BCC  DC02                    5541      ADD.B   D2,D6
00003BCE  60A2                    5542      BRA     parse_each
00003BD0                          5543  
00003BD0  7801                    5544  parse_complete  MOVEQ   #1,D4  FINISH PARSING USER INPUT
00003BD2  4E75                    5545      RTS             JUMP FROM SUBROUTINE
00003BD4  43F9 00003CCA           5546  error_no_input  LEA no_entry,A1 load bad entry statment
00003BDA  7001                    5547      MOVE.L  #1,D0
00003BDC  4E4F                    5548      TRAP    #15
00003BDE                          5549      ;JMP     get_input
00003BDE  43F9 00003CF2           5550  error_char      LEA bad_char,A1
00003BE4  4E4F                    5551      trap #15
00003BE6                          5552      ;JMP get_input0
00003BE6  43F9 00003CDD           5553  error_bad_entry LEA bad_entry,A1
00003BEC  4E4F                    5554      TRAP #15
00003BEE                          5555      ;JMP  get_input
00003BEE                          5556  
00003BEE                          5557  
00003BEE  FFFF FFFF               5558      SIMHALT             ; halt simulator
00003BF2                          5559  
00003BF2                          5560  *    Put variables and constants here
00003BF2                          5561  
00003BF2= 48 65 6C 6C 6F 20 ...   5562  welcome_message DC.B    'Hello and Welcome 68Kkrew"s 68K Disassembler(get the pun)',CR,LF,0
00003C2E                          5563  
00003C2E= 48 69 74 20 65 6E ...   5564  hitEnter        DC.B 'Hit enter to display the next page.'
00003C51= 23                      5565  enterBuf        DC.B enterBuf-hitEnter
00003C52                          5566  haltEntry       DS.B 1
00003C53= 01                      5567  line_counter    DC.B 1
00003C54                          5568  
00003C54                          5569  good_code_buffer    DS.B    88
00003CAC                          5570  
00003CAC                          5571  bad_code_buffer     DS.B    30
00003CCA= 4E 6F 20 45 6E 74 ...   5572  no_entry    DC.B    'No Entry detected.',0
00003CDD= 42 61 64 20 45 6E ...   5573  bad_entry   DC.B    'Bad Entry Dectected.',0
00003CF2= 42 61 64 20 43 68 ...   5574  bad_char    DC.B    'Bad Char detected.',0
00003D05                          5575  *    -errors
00003D05                          5576  
00003D05                          5577  ;enter_start_AD  DC.B    'Enter a starting address between $0 and $00FFFE00: ',0
00003D05= 45 6E 74 65 72 20 ...   5578  enter_start_AD  DC.B    'Enter a starting address: ',0
00003D20                          5579  userStartAddrInput  DS.B    50  address used to store the data input from user
00003D52                          5580  userEndAddrInput    DS.B    50  address used to stoer the data input from use
00003D84= 45 6E 74 65 72 20 ...   5581  userEnd         DC.B    'Enter an address greater than the starting address: ',0
00003DB9                          5582  userEndInput    DS.B    50  addresse used to store the data input from user
00003DEC  43F8 3CCA               5583  error_inv_to_many_char  LEA no_entry,A1 load bad entry statment
00003DF0  7001                    5584      MOVE.L  #1,D0
00003DF2  4E4F                    5585      TRAP    #15
00003DF4                          5586      ;JMP     get_input
00003DF4                          5587  
00003DF4                          5588  *    -i dea i could load the string "           DATA            " without the cursor and find a way to load the address at the line
00003DF4                          5589  
00003DF4                          5590  
00003DF4                          5591      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDA_L              1ED6
ADDA_W              1EB6
ADDD_8              28CA
ADDIDECODE          251E
ADDI_B              24AA
ADDI_L              24F6
ADDI_W              24D0
ADDQ_B              267C
ADDQ_L              26D4
ADDQ_W              26A8
ADDRESSCOUNT        10D8
ADD_B               1D64
ADD_B_EA            1E0C
ADD_L               1D9C
ADD_L_EA            1E44
ADD_W               1D80
ADD_W_EA            1E28
ADJUSTIMMAB0010     1D08
ADJUSTIMMAB0011     1C5A
ADJUSTIMMABADDA     1F46
ADJUSTIMMABADDDNEA  1EB2
ADJUSTIMMABADDEADN  1E08
ADJUSTIMMABADDI     2572
ADJUSTIMMABANDDNEA  3A08
ADJUSTIMMABANDEADN  395E
ADJUSTIMMABDIVU_W   22A0
ADJUSTIMMABMULS_W   3A6C
ADJUSTIMMABORDNEA   23E0
ADJUSTIMMABOREADN   2340
ADJUSTIMMABSUBDNEA  20DC
ADJUSTIMMABSUBEADN  2032
ADJUSTIMMABSUBI     2634
AND_B               38BA
AND_B_EA            3962
AND_L               38F2
AND_L_EA            399A
AND_W               38D6
AND_W_EA            397E
ASLB_IN             304A
ASLB_RN             2FE6
ASLL_IN             3142
ASLL_RN             318C
ASLW_IN             30F8
ASLW_RN             3094
ASRB_IN             3254
ASRB_RN             31F0
ASRL_IN             33B0
ASRL_RN             334C
ASRW_IN             3302
ASRW_RN             329E
BAD_CHAR            3CF2
BAD_CODE_BUFFER     3CAC
BAD_ENTRY           3CDD
BIN0000             0
BIN0001             1
BIN0010             2
BIN0011             3
BIN0100             4
BIN0101             5
BIN0110             6
BIN0111             7
BIN1000             8
BIN1001             9
BIN1011             B
BIN1100             C
BIN1101             D
BIN1110             E
CHECK_CLR_OR_MOVEM  1A10
CLR_B               191E
CLR_L               19AA
CLR_W               1964
CR                  D
DECODE0000          2638
DECODE0010          1CCC
DECODE0011          1C1E
DECODEADDA          1EF6
DECODEADDDNEA       1E60
DECODEADDEADN       1DB8
DECODEANDDNEA       39B6
DECODEANDEADN       390E
DECODELISTMTOR      182A
DECODELISTRTOM      1778
DECODEMOVEM         1734
DECODEORDNEA        238E
DECODEOREADN        22F0
DECODESUBDNEA       208A
DECODESUBEADN       1FE2
DEC_COMPARE         3B82
DEC_CONVERT         3BB2
DESDECODE0001       1B96
DESDECODE0010       1CE0
DESDECODE0011       1C32
DESDECODEADDA       1F16
DESDECODEADDEADN    1DD8
DESDECODEANDEADN    392E
DESDECODEDIVU_W     2270
DESDECODELEA        18B8
DESDECODEMULS_W     3A3C
DESDECODEOREADN     2310
DESDECODESUBEADN    2002
DISPLACEMENTDECODE  1A9C
DIVU_W              2230
EADECODEADDI        2542
EADECODESUBI        2604
ENTERBUF            3C51
ENTER_START_AD      3D05
ERROR_BAD_ENTRY     3BE6
ERROR_CHAR          3BDE
ERROR_INV_TO_MANY_CHAR  3DEC
ERROR_NO_INPUT      3BD4
FINDLARGESTA        1780
FINDLARGESTD        17C6
FINISH              3AEE
FOUNDLA             179C
FOUNDLD             17E2
GET_0TO2_BIT        1552
GET_3TO5_BIT        156A
GET_6TO8_BIT        1584
GET_9TO11_BIT       159E
GET_BIT_0_2         383C
GET_BIT_9_11        3846
GET_BIT_9_11_ADDQ   28CE
GET_NEXT_INSTRUCTION  10EA
GET_SHIFT_NORMAL    3852
GET_SHIFT_SIZE      3862
GOOD_CODE_BUFFER    3C54
HALT                10B6
HALTENTRY           3C52
HEX_0               0
HEX_1               1
HEX_2               2
HEX_3               3
HEX_4               4
HEX_5               5
HEX_6               6
HEX_7               7
HEX_8               8
HEX_9               9
HEX_A               A
HEX_B               B
HEX_C               C
HEX_COMPARE         3B92
HEX_D               D
HEX_E               E
HEX_F               F
HITENTER            3C2E
IA000               11EA
IA001               1252
IA010               11CA
IA011               11D6
IA100               1316
IMMAB0001           1BA6
IMMAB0010           1CF0
IMMAB0011           1C42
IMMAB0101           2746
IMMAB1110           2BC2
IMMABADDA           1F30
IMMABADDDNEA        1E9A
IMMABADDEADN        1DF2
IMMABADDI           255A
IMMABANDDNEA        39F0
IMMABANDEADN        3948
IMMABDIVU_W         228A
IMMABJSR            19F0
IMMABJUMP0010       1CF8
IMMABJUMP0011       1C4A
IMMABJUMPADDA       1F38
IMMABJUMPADDDNEA    1EA2
IMMABJUMPADDEADN    1DFA
IMMABJUMPADDI       2562
IMMABJUMPANDDNEA    39F8
IMMABJUMPANDEADN    3950
IMMABJUMPDIVU_W     2292
IMMABJUMPMULS_W     3A5E
IMMABJUMPORDNEA     23D0
IMMABJUMPOREADN     2332
IMMABJUMPSUBDNEA    20CC
IMMABJUMPSUBEADN    2024
IMMABJUMPSUBI       2624
IMMABLEA            1A00
IMMABMTOR           181A
IMMABMULS_W         3A56
IMMABORDNEA         23C8
IMMABOREADN         232A
IMMABRTOM           1768
IMMABSUBDNEA        20C4
IMMABSUBEADN        201C
IMMABSUBI           261C
IMMABTABLE          11A2
LF                  A
LINECOUNT           10A4
LINE_COUNTER        3C53
LOWER_ASCII         3BC6
LOW_HEX_COMPARE     3BA2
LSLB_IN             345E
LSLB_RN             33FA
LSLL_IN             35BA
LSLL_RN             3556
LSLW_IN             350C
LSLW_RN             34A8
LSRB_IN             3668
LSRB_RN             3604
LSRL_IN             37C4
LSRL_RN             3760
LSRW_IN             3716
LSRW_RN             36B2
M0000               1390
M0001               139C
M0010               13A8
M0011               13BC
M0100               13D4
M0101               13EC
M0110               13EE
M0111               13F0
MAINLOOP            1036
MODETABLE           1350
MOVEA_L             1CAC
MOVEA_W             1BFE
MOVEINTPOINTERLONG  11E6
MOVEINTPOINTERWORD  11E2
MOVE_L              1C8C
MOVE_W              1BDE
MTOR                1800
MULS_W              3A0C
N0000               14F2
N0001               14F8
N0010               14FE
N0011               1504
N0100               150A
N0101               1510
N0110               1516
N0111               151C
N1000               1522
N1001               1528
N1010               152E
N1011               1534
N1100               153A
N1101               1540
N1110               1546
N1111               154C
NO_ENTRY            3CCA
NUMTABLE            1472
OP0000              245E
OP0001              1B56
OP0010              1C62
OP0011              1BB4
OP0100              168A
OP0101              2648
OP0101DECODE        2700
OP0110              1A20
OP0111              23E6
OP1000              21E4
OP1001              1F4A
OP1100              386E
OP1101              1D10
OP1110              28DE
OPERROR             3A74
OR_B                22A8
OR_B_EA             2346
OR_L                22D8
OR_L_EA             2376
OR_W                22C0
OR_W_EA             235E
PARSE_COMPLETE      3BD0
PARSE_EACH          3B72
PARSE_END           3B5C
PARSE_INPUT         3B46
PRINTCODE           3AD8
PRINTLONGADDI       253A
PRINTLONGSUBI       25FC
PRINT_ADDRESS       1AFE
PRINT_LONG          15B6
PRINT_WORD          1146
REGISTERPRINT       13F6
REGNUMTABLE         1402
RN0000              1442
RN0001              1448
RN0010              144E
RN0011              1454
RN0100              145A
RN0101              1460
RN0110              1466
RN0111              146C
ROLB_IN             2E40
ROLB_RN             2DDC
ROLL_IN             2F9C
ROLL_RN             2F38
ROLW_IN             2EEE
ROLW_RN             2E8A
RORB_IN             2C36
RORB_RN             2BD2
RORL_IN             2D92
RORL_RN             2D2E
RORW_IN             2C80
RORW_RN             2CCA
RTOM                174E
SETUPFINDLARGESTD   17BA
SHIFT_COMPLETE      380E
SHIFT_NOT_8         382C
START               1000
STARTLOC            7000
SUBA_L              2162
SUBA_W              20E0
SUBIDECODE          25E0
SUBI_B_             2576
SUBI_L_             25BE
SUBI_W_             259A
SUBQ_B              2756
SUBQ_L              284E
SUBQ_W              27D2
SUB_B               1F8E
SUB_B_EA            2036
SUB_L               1FC6
SUB_L_EA            206E
SUB_W               1FAA
SUB_W_EA            2052
UPPER_ASCII         3BBC
USEREND             3D84
USERENDADDRINPUT    3D52
USERENDINPUT        3DB9
USERSTARTADDRINPUT  3D20
WELCOME_MESSAGE     3BF2
WORDORLONG          1672
WRITE_DATA_IN_D3_TO_BUFFER  1130
_16_BITD            1ADC
_32_BITD            1AF0
_ASLMS              2ABE
_ASRMS              2A7C
_BCC                1A6C
_BGE                1A8C
_BLT                1A7C
_BRA                1A5C
_JSR                18D8
_LEA                1876
_LSLMS              2B00
_LSRMS              2A3A
_MOVEML             170C
_MOVEMW             16E4
_NOP                182A
_ROLMS              2B84
_RORMS              2B42
_RTS                1850
